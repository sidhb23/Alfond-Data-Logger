
Zigbee_545.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bfc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009e38  08009e38  0000ae38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2b8  0800a2b8  0000b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2c0  0800a2c0  0000b2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a2c4  0800a2c4  0000b2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  20000000  0800a2c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  200001f4  0800a4bc  0000c1f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003fc  0800a4bc  0000c3fc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010dd2  00000000  00000000  0000c22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002340  00000000  00000000  0001cffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d30  00000000  00000000  0001f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a1b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002db2e  00000000  00000000  00020a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011466  00000000  00000000  0004e5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011aa95  00000000  00000000  0005fa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017a4b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004764  00000000  00000000  0017a4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0017ec5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f4 	.word	0x200001f4
 8000254:	00000000 	.word	0x00000000
 8000258:	08009e1c 	.word	0x08009e1c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f8 	.word	0x200001f8
 8000274:	08009e1c 	.word	0x08009e1c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fb92 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f834 	bl	8000f3c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ed4:	f000 f88e 	bl	8000ff4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f8f8 	bl	80010cc <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000edc:	f000 f896 	bl	800100c <MX_ICACHE_Init>
  MX_UART5_Init();
 8000ee0:	f000 f8a8 	bl	8001034 <MX_UART5_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  counter = counter + 1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <main+0x64>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <main+0x64>)
 8000eee:	701a      	strb	r2, [r3, #0]
	  if (counter == 10){
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <main+0x64>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b0a      	cmp	r3, #10
 8000ef6:	d102      	bne.n	8000efe <main+0x36>
		  counter = 0;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <main+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	  }

	  sprintf(sent_data, "Data: %d \n", counter);
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <main+0x64>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	490a      	ldr	r1, [pc, #40]	@ (8000f30 <main+0x68>)
 8000f06:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <main+0x6c>)
 8000f08:	f006 fe42 	bl	8007b90 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t*) sent_data, strlen(sent_data), 100);
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <main+0x6c>)
 8000f0e:	f7ff f9b3 	bl	8000278 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	2364      	movs	r3, #100	@ 0x64
 8000f18:	4906      	ldr	r1, [pc, #24]	@ (8000f34 <main+0x6c>)
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <main+0x70>)
 8000f1c:	f005 f852 	bl	8005fc4 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f24:	f000 fc2c 	bl	8001780 <HAL_Delay>
	  counter = counter + 1;
 8000f28:	e7dc      	b.n	8000ee4 <main+0x1c>
 8000f2a:	bf00      	nop
 8000f2c:	200002a4 	.word	0x200002a4
 8000f30:	08009e38 	.word	0x08009e38
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000210 	.word	0x20000210

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09e      	sub	sp, #120	@ 0x78
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2260      	movs	r2, #96	@ 0x60
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f006 fe83 	bl	8007c56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f60:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000f64:	f001 f88a 	bl	800207c <HAL_PWREx_ControlVoltageScaling>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000f6e:	f000 f921 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f72:	2310      	movs	r3, #16
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f86:	2301      	movs	r3, #1
 8000f88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000f90:	2303      	movs	r3, #3
 8000f92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f94:	230a      	movs	r3, #10
 8000f96:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f93f 	bl	8002234 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fbc:	f000 f8fa 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	231f      	movs	r3, #31
 8000fc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	2340      	movs	r3, #64	@ 0x40
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f805 	bl	8002fec <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fe8:	f000 f8e4 	bl	80011b4 <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3778      	adds	r7, #120	@ 0x78
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f001 f8cb 	bl	8002194 <HAL_PWREx_ConfigSupply>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8001004:	f000 f8d6 	bl	80011b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001010:	2000      	movs	r0, #0
 8001012:	f001 f803 	bl	800201c <HAL_ICACHE_ConfigAssociativityMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800101c:	f000 f8ca 	bl	80011b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001020:	f001 f81c 	bl	800205c <HAL_ICACHE_Enable>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800102a:	f000 f8c3 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <MX_UART5_Init+0x90>)
 800103a:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <MX_UART5_Init+0x94>)
 800103c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001040:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001044:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_UART5_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_UART5_Init+0x90>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_UART5_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800107c:	4811      	ldr	r0, [pc, #68]	@ (80010c4 <MX_UART5_Init+0x90>)
 800107e:	f004 ff51 	bl	8005f24 <HAL_UART_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001088:	f000 f894 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <MX_UART5_Init+0x90>)
 8001090:	f005 ff97 	bl	8006fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800109a:	f000 f88b 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <MX_UART5_Init+0x90>)
 80010a2:	f005 ffcc 	bl	800703e <HAL_UARTEx_SetRxFifoThreshold>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 f882 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_UART5_Init+0x90>)
 80010b2:	f005 ff4d 	bl	8006f50 <HAL_UARTEx_DisableFifoMode>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 f87a 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000210 	.word	0x20000210
 80010c8:	40005000 	.word	0x40005000

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e8:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010f2:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001106:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001124:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800113e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800114e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001160:	f000 ff44 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_GPIO_Init+0xe0>)
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_GPIO_Init+0xe4>)
 800117a:	f000 fd5f 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800117e:	2320      	movs	r3, #32
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001196:	f000 fd51 	bl	8001c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	46020c00 	.word	0x46020c00
 80011a8:	42020000 	.word	0x42020000
 80011ac:	10210000 	.word	0x10210000
 80011b0:	42020800 	.word	0x42020800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  counter = counter + 1;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <Error_Handler+0x18>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b01      	ldr	r3, [pc, #4]	@ (80011cc <Error_Handler+0x18>)
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e7f8      	b.n	80011bc <Error_Handler+0x8>
 80011ca:	bf00      	nop
 80011cc:	200002a4 	.word	0x200002a4

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_MspInit+0x30>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011dc:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_MspInit+0x30>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_MspInit+0x30>)
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	46020c00 	.word	0x46020c00

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0bc      	sub	sp, #240	@ 0xf0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	22c0      	movs	r2, #192	@ 0xc0
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f006 fd16 	bl	8007c56 <memset>
  if(huart->Instance==UART5)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3c      	ldr	r2, [pc, #240]	@ (8001320 <HAL_UART_MspInit+0x11c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d171      	bne.n	8001318 <HAL_UART_MspInit+0x114>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001234:	f04f 0210 	mov.w	r2, #16
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f002 faa3 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001254:	f7ff ffae 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001258:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <HAL_UART_MspInit+0x120>)
 800125a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800125e:	4a31      	ldr	r2, [pc, #196]	@ (8001324 <HAL_UART_MspInit+0x120>)
 8001260:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001264:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <HAL_UART_MspInit+0x120>)
 800126a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <HAL_UART_MspInit+0x120>)
 8001278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127c:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <HAL_UART_MspInit+0x120>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <HAL_UART_MspInit+0x120>)
 8001288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_UART_MspInit+0x120>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129a:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <HAL_UART_MspInit+0x120>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <HAL_UART_MspInit+0x120>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012cc:	2308      	movs	r3, #8
 80012ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d6:	4619      	mov	r1, r3
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <HAL_UART_MspInit+0x124>)
 80012da:	f000 fcaf 	bl	8001c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012de:	2304      	movs	r3, #4
 80012e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012f6:	2308      	movs	r3, #8
 80012f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001300:	4619      	mov	r1, r3
 8001302:	480a      	ldr	r0, [pc, #40]	@ (800132c <HAL_UART_MspInit+0x128>)
 8001304:	f000 fc9a 	bl	8001c3c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2041      	movs	r0, #65	@ 0x41
 800130e:	f000 fb13 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001312:	2041      	movs	r0, #65	@ 0x41
 8001314:	f000 fb2a 	bl	800196c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8001318:	bf00      	nop
 800131a:	37f0      	adds	r7, #240	@ 0xf0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40005000 	.word	0x40005000
 8001324:	46020c00 	.word	0x46020c00
 8001328:	42020800 	.word	0x42020800
 800132c:	42020c00 	.word	0x42020c00

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <NMI_Handler+0x4>

08001338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <MemManage_Handler+0x4>

08001348 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <UsageFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f9db 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <UART5_IRQHandler+0x10>)
 8001396:	f004 fea3 	bl	80060e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000210 	.word	0x20000210

080013a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_kill>:

int _kill(int pid, int sig)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013be:	f006 fc9d 	bl	8007cfc <__errno>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2216      	movs	r2, #22
 80013c6:	601a      	str	r2, [r3, #0]
  return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_exit>:

void _exit (int status)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ffe7 	bl	80013b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e6:	bf00      	nop
 80013e8:	e7fd      	b.n	80013e6 <_exit+0x12>

080013ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e00a      	b.n	8001412 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fc:	f3af 8000 	nop.w
 8001400:	4601      	mov	r1, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	60ba      	str	r2, [r7, #8]
 8001408:	b2ca      	uxtb	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbf0      	blt.n	80013fc <_read+0x12>
  }

  return len;
 800141a:	687b      	ldr	r3, [r7, #4]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e009      	b.n	800144a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	60ba      	str	r2, [r7, #8]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbf1      	blt.n	8001436 <_write+0x12>
  }
  return len;
 8001452:	687b      	ldr	r3, [r7, #4]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_close>:

int _close(int file)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	605a      	str	r2, [r3, #4]
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_isatty>:

int _isatty(int file)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f006 fc02 	bl	8007cfc <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20040000 	.word	0x20040000
 8001524:	00000400 	.word	0x00000400
 8001528:	200002a8 	.word	0x200002a8
 800152c:	20000400 	.word	0x20000400

08001530 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <SystemInit+0x68>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <SystemInit+0x68>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <SystemInit+0x6c>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <SystemInit+0x6c>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <SystemInit+0x6c>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <SystemInit+0x6c>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <SystemInit+0x6c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <SystemInit+0x6c>)
 8001562:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001566:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <SystemInit+0x6c>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <SystemInit+0x6c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <SystemInit+0x6c>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <SystemInit+0x6c>)
 8001580:	2200      	movs	r2, #0
 8001582:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <SystemInit+0x68>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
  #endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	46020c00 	.word	0x46020c00

080015a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a4:	f7ff ffc4 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	@ (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	@ (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ce:	f006 fb9b 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d2:	f7ff fc79 	bl	8000ec8 <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   r0, =_estack
 80015d8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80015e4:	0800a2c8 	.word	0x0800a2c8
  ldr r2, =_sbss
 80015e8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80015ec:	200003fc 	.word	0x200003fc

080015f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_Init+0x50>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_Init+0x50>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f98c 	bl	8001922 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800160a:	f001 fee1 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_Init+0x54>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	490c      	ldr	r1, [pc, #48]	@ (800164c <HAL_Init+0x58>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_Init+0x5c>)
 8001622:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001624:	2004      	movs	r0, #4
 8001626:	f000 f9d1 	bl	80019cc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	200f      	movs	r0, #15
 800162c:	f000 f812 	bl	8001654 <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e002      	b.n	8001640 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800163a:	f7ff fdc9 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000
 8001648:	46020c00 	.word	0x46020c00
 800164c:	08009e44 	.word	0x08009e44
 8001650:	20000020 	.word	0x20000020

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_InitTick+0xdc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e05c      	b.n	8001726 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_InitTick+0xe0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	d10c      	bne.n	8001692 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001678:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_InitTick+0xe4>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <HAL_InitTick+0xdc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e037      	b.n	8001702 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001692:	f000 f9f3 	bl	8001a7c <HAL_SYSTICK_GetCLKSourceConfig>
 8001696:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d023      	beq.n	80016e6 <HAL_InitTick+0x92>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d82d      	bhi.n	8001700 <HAL_InitTick+0xac>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_InitTick+0x5e>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d00d      	beq.n	80016cc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80016b0:	e026      	b.n	8001700 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_InitTick+0xe4>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_InitTick+0xdc>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80016c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	60fb      	str	r3, [r7, #12]
        break;
 80016ca:	e01a      	b.n	8001702 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_InitTick+0xdc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80016da:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
        break;
 80016e4:	e00d      	b.n	8001702 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_InitTick+0xdc>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	60fb      	str	r3, [r7, #12]
        break;
 80016fe:	e000      	b.n	8001702 <HAL_InitTick+0xae>
        break;
 8001700:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f940 	bl	8001988 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e009      	b.n	8001726 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001712:	2200      	movs	r2, #0
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
 800171a:	f000 f90d 	bl	8001938 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800171e:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_InitTick+0xe8>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000028 	.word	0x20000028
 8001734:	e000e010 	.word	0xe000e010
 8001738:	20000020 	.word	0x20000020
 800173c:	20000024 	.word	0x20000024

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000028 	.word	0x20000028
 8001764:	200002ac 	.word	0x200002ac

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200002ac 	.word	0x200002ac

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000028 	.word	0x20000028

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	@ (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff4c 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001946:	f7ff ff63 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800194a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff ffb3 	bl	80018bc <NVIC_EncodePriority>
 8001956:	4602      	mov	r2, r0
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff82 	bl	8001868 <__NVIC_SetPriority>
}
 8001964:	bf00      	nop
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff56 	bl	800182c <__NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800199a:	2301      	movs	r3, #1
 800199c:	e00d      	b.n	80019ba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <HAL_SYSTICK_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_SYSTICK_Config+0x40>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_SYSTICK_Config+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <HAL_SYSTICK_Config+0x40>)
 80019b2:	f043 0303 	orr.w	r3, r3, #3
 80019b6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d844      	bhi.n	8001a64 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a03 	.word	0x08001a03
 80019e4:	08001a21 	.word	0x08001a21
 80019e8:	08001a43 	.word	0x08001a43
 80019ec:	08001a65 	.word	0x08001a65
 80019f0:	080019f5 	.word	0x080019f5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6013      	str	r3, [r2, #0]
      break;
 8001a00:	e031      	b.n	8001a66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a1e:	e022      	b.n	8001a66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a13      	ldr	r2, [pc, #76]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a36:	4a10      	ldr	r2, [pc, #64]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a40:	e011      	b.n	8001a66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a62:	e000      	b.n	8001a66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a64:	bf00      	nop
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010
 8001a78:	46020c00 	.word	0x46020c00

08001a7c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	e021      	b.n	8001ad8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a9e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001aa6:	d011      	beq.n	8001acc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001aae:	d810      	bhi.n	8001ad2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001abc:	d003      	beq.n	8001ac6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001abe:	e008      	b.n	8001ad2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
        break;
 8001ac4:	e008      	b.n	8001ad8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	607b      	str	r3, [r7, #4]
        break;
 8001aca:	e005      	b.n	8001ad8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001acc:	2302      	movs	r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
        break;
 8001ad0:	e002      	b.n	8001ad8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
        break;
 8001ad6:	bf00      	nop
    }
  }
  return systick_source;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010
 8001aec:	46020c00 	.word	0x46020c00

08001af0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001af8:	f7ff fe36 	bl	8001768 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e06b      	b.n	8001be0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e05c      	b.n	8001be0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0204 	orr.w	r2, r2, #4
 8001b34:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001b3e:	e020      	b.n	8001b82 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001b40:	f7ff fe12 	bl	8001768 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d919      	bls.n	8001b82 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b72:	2201      	movs	r2, #1
 8001b74:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e02e      	b.n	8001be0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0d7      	beq.n	8001b40 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0202 	orr.w	r2, r2, #2
 8001b9e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001bb0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bca:	2201      	movs	r2, #1
 8001bcc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e019      	b.n	8001c2e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00e      	b.n	8001c2e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c4e:	e1ba      	b.n	8001fc6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 81aa 	beq.w	8001fc0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a55      	ldr	r2, [pc, #340]	@ (8001dc4 <HAL_GPIO_Init+0x188>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d15d      	bne.n	8001d30 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001ca4:	4a48      	ldr	r2, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x18c>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001cac:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001cae:	4a46      	ldr	r2, [pc, #280]	@ (8001dc8 <HAL_GPIO_Init+0x18c>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220b      	movs	r2, #11
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e067      	b.n	8001e00 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x104>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b12      	cmp	r3, #18
 8001d3e:	d145      	bne.n	8001dcc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69f9      	ldr	r1, [r7, #28]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e01e      	b.n	8001e00 <HAL_GPIO_Init+0x1c4>
 8001dc2:	bf00      	nop
 8001dc4:	46020000 	.word	0x46020000
 8001dc8:	08009e9c 	.word	0x08009e9c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00b      	beq.n	8001e20 <HAL_GPIO_Init+0x1e4>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d130      	bne.n	8001e82 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001e56:	2201      	movs	r2, #1
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0201 	and.w	r2, r3, #1
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07c      	beq.n	8001fc0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ec6:	4a47      	ldr	r2, [pc, #284]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3318      	adds	r3, #24
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0a9a      	lsrs	r2, r3, #10
 8001eee:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <HAL_GPIO_Init+0x3ac>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	4093      	lsls	r3, r2
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f02:	4938      	ldr	r1, [pc, #224]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3318      	adds	r3, #24
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f10:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001f34:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f6a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001f8a:	4a16      	ldr	r2, [pc, #88]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f98:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_GPIO_Init+0x3a8>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f ae3d 	bne.w	8001c50 <HAL_GPIO_Init+0x14>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	3724      	adds	r7, #36	@ 0x24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	46022000 	.word	0x46022000
 8001fe8:	002f7f7f 	.word	0x002f7f7f

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002008:	e002      	b.n	8002010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e007      	b.n	800204a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0204 	bic.w	r2, r3, #4
 8002042:	4905      	ldr	r1, [pc, #20]	@ (8002058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
  }

  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40030400 	.word	0x40030400

0800205c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_ICACHE_Enable+0x1c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <HAL_ICACHE_Enable+0x1c>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40030400 	.word	0x40030400

0800207c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d10b      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209c:	d905      	bls.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800209e:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e057      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d90a      	bls.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	4a2a      	ldr	r2, [pc, #168]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	60d3      	str	r3, [r2, #12]
 80020ca:	e007      	b.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020d4:	4925      	ldr	r1, [pc, #148]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	2232      	movs	r2, #50	@ 0x32
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4a21      	ldr	r2, [pc, #132]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80020fa:	e002      	b.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3b01      	subs	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002102:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x98>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f3      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	2232      	movs	r2, #50	@ 0x32
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002138:	e002      	b.n	8002140 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3b01      	subs	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f3      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e000      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	46020800 	.word	0x46020800
 8002170:	20000020 	.word	0x20000020
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_PWREx_GetVoltageRange+0x18>)
 800217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	46020800 	.word	0x46020800

08002194 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800219c:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <HAL_PWREx_ConfigSupply+0x94>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a22      	ldr	r2, [pc, #136]	@ (800222c <HAL_PWREx_ConfigSupply+0x98>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	2232      	movs	r2, #50	@ 0x32
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_PWREx_ConfigSupply+0x98>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d113      	bne.n	80021e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021c6:	f023 0302 	bic.w	r3, r3, #2
 80021ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021cc:	e002      	b.n	80021d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021d4:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d116      	bne.n	800220e <HAL_PWREx_ConfigSupply+0x7a>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f3      	bne.n	80021ce <HAL_PWREx_ConfigSupply+0x3a>
 80021e6:	e012      	b.n	800220e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021f4:	e002      	b.n	80021fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <HAL_PWREx_ConfigSupply+0x9c>)
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_PWREx_ConfigSupply+0x7a>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f3      	bne.n	80021f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e000      	b.n	800221a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000020 	.word	0x20000020
 800222c:	10624dd3 	.word	0x10624dd3
 8002230:	46020800 	.word	0x46020800

08002234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	@ 0x38
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	f000 bec8 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224e:	4b99      	ldr	r3, [pc, #612]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002258:	4b96      	ldr	r3, [pc, #600]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 816c 	beq.w	8002548 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_RCC_OscConfig+0x52>
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	2b0c      	cmp	r3, #12
 800227a:	f040 80de 	bne.w	800243a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 80da 	bne.w	800243a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 bea5 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002298:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_RCC_OscConfig+0x7a>
 80022a4:	4b83      	ldr	r3, [pc, #524]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80022ac:	e005      	b.n	80022ba <HAL_RCC_OscConfig+0x86>
 80022ae:	4b81      	ldr	r3, [pc, #516]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d255      	bcs.n	800236a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 f9dd 	bl	8003688 <RCC_SetFlashLatencyFromMSIRange>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f000 be82 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022e4:	6093      	str	r3, [r2, #8]
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	4970      	ldr	r1, [pc, #448]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002300:	d309      	bcc.n	8002316 <HAL_RCC_OscConfig+0xe2>
 8002302:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 021f 	bic.w	r2, r3, #31
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4969      	ldr	r1, [pc, #420]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
 8002314:	e07e      	b.n	8002414 <HAL_RCC_OscConfig+0x1e0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0a      	bge.n	8002334 <HAL_RCC_OscConfig+0x100>
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	015b      	lsls	r3, r3, #5
 800232c:	4961      	ldr	r1, [pc, #388]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
 8002332:	e06f      	b.n	8002414 <HAL_RCC_OscConfig+0x1e0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d30a      	bcc.n	8002354 <HAL_RCC_OscConfig+0x120>
 800233e:	4b5d      	ldr	r3, [pc, #372]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4959      	ldr	r1, [pc, #356]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800234e:	4313      	orrs	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]
 8002352:	e05f      	b.n	8002414 <HAL_RCC_OscConfig+0x1e0>
 8002354:	4b57      	ldr	r3, [pc, #348]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	03db      	lsls	r3, r3, #15
 8002362:	4954      	ldr	r1, [pc, #336]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002364:	4313      	orrs	r3, r2
 8002366:	60cb      	str	r3, [r1, #12]
 8002368:	e054      	b.n	8002414 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800236a:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4a51      	ldr	r2, [pc, #324]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002374:	6093      	str	r3, [r2, #8]
 8002376:	4b4f      	ldr	r3, [pc, #316]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	494c      	ldr	r1, [pc, #304]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002390:	d309      	bcc.n	80023a6 <HAL_RCC_OscConfig+0x172>
 8002392:	4b48      	ldr	r3, [pc, #288]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f023 021f 	bic.w	r2, r3, #31
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4945      	ldr	r1, [pc, #276]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
 80023a4:	e028      	b.n	80023f8 <HAL_RCC_OscConfig+0x1c4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0a      	bge.n	80023c4 <HAL_RCC_OscConfig+0x190>
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	493d      	ldr	r1, [pc, #244]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	60cb      	str	r3, [r1, #12]
 80023c2:	e019      	b.n	80023f8 <HAL_RCC_OscConfig+0x1c4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023cc:	d30a      	bcc.n	80023e4 <HAL_RCC_OscConfig+0x1b0>
 80023ce:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4935      	ldr	r1, [pc, #212]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
 80023e2:	e009      	b.n	80023f8 <HAL_RCC_OscConfig+0x1c4>
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	03db      	lsls	r3, r3, #15
 80023f2:	4930      	ldr	r1, [pc, #192]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	4618      	mov	r0, r3
 8002404:	f001 f940 	bl	8003688 <RCC_SetFlashLatencyFromMSIRange>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 bde5 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002414:	f001 f8e2 	bl	80035dc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002418:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <HAL_RCC_OscConfig+0x284>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f919 	bl	8001654 <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 808a 	beq.w	8002546 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002436:	f000 bdd2 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d066      	beq.n	8002510 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800244e:	f7ff f98b 	bl	8001768 <HAL_GetTick>
 8002452:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002454:	e009      	b.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002456:	f7ff f987 	bl	8001768 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d902      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	f000 bdba 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ef      	beq.n	8002456 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002476:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 800247c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002480:	6093      	str	r3, [r2, #8]
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	4909      	ldr	r1, [pc, #36]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800249c:	d30e      	bcc.n	80024bc <HAL_RCC_OscConfig+0x288>
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 021f 	bic.w	r2, r3, #31
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4902      	ldr	r1, [pc, #8]	@ (80024b4 <HAL_RCC_OscConfig+0x280>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e04a      	b.n	8002548 <HAL_RCC_OscConfig+0x314>
 80024b2:	bf00      	nop
 80024b4:	46020c00 	.word	0x46020c00
 80024b8:	20000024 	.word	0x20000024
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da0a      	bge.n	80024da <HAL_RCC_OscConfig+0x2a6>
 80024c4:	4b98      	ldr	r3, [pc, #608]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	015b      	lsls	r3, r3, #5
 80024d2:	4995      	ldr	r1, [pc, #596]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e036      	b.n	8002548 <HAL_RCC_OscConfig+0x314>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e2:	d30a      	bcc.n	80024fa <HAL_RCC_OscConfig+0x2c6>
 80024e4:	4b90      	ldr	r3, [pc, #576]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	498d      	ldr	r1, [pc, #564]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
 80024f8:	e026      	b.n	8002548 <HAL_RCC_OscConfig+0x314>
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	03db      	lsls	r3, r3, #15
 8002508:	4987      	ldr	r1, [pc, #540]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002510:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a84      	ldr	r2, [pc, #528]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800251c:	f7ff f924 	bl	8001768 <HAL_GetTick>
 8002520:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002522:	e009      	b.n	8002538 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002524:	f7ff f920 	bl	8001768 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d902      	bls.n	8002538 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	f000 bd53 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002538:	4b7b      	ldr	r3, [pc, #492]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ef      	bne.n	8002524 <HAL_RCC_OscConfig+0x2f0>
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 808b 	beq.w	800266c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	2b08      	cmp	r3, #8
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x334>
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d109      	bne.n	8002576 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002564:	2b03      	cmp	r3, #3
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d17d      	bne.n	800266c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f000 bd34 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x35a>
 8002580:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a68      	ldr	r2, [pc, #416]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e041      	b.n	8002612 <HAL_RCC_OscConfig+0x3de>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002596:	d112      	bne.n	80025be <HAL_RCC_OscConfig+0x38a>
 8002598:	4b63      	ldr	r3, [pc, #396]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a62      	ldr	r2, [pc, #392]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e029      	b.n	8002612 <HAL_RCC_OscConfig+0x3de>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x3ba>
 80025c8:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a56      	ldr	r2, [pc, #344]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b54      	ldr	r3, [pc, #336]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a53      	ldr	r2, [pc, #332]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b51      	ldr	r3, [pc, #324]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e011      	b.n	8002612 <HAL_RCC_OscConfig+0x3de>
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b48      	ldr	r3, [pc, #288]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a47      	ldr	r2, [pc, #284]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d014      	beq.n	8002644 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800261a:	f7ff f8a5 	bl	8001768 <HAL_GetTick>
 800261e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002620:	e009      	b.n	8002636 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002622:	f7ff f8a1 	bl	8001768 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	@ 0x64
 800262e:	d902      	bls.n	8002636 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	f000 bcd4 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ef      	beq.n	8002622 <HAL_RCC_OscConfig+0x3ee>
 8002642:	e013      	b.n	800266c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002644:	f7ff f890 	bl	8001768 <HAL_GetTick>
 8002648:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff f88c 	bl	8001768 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d902      	bls.n	8002660 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	f000 bcbf 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002660:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05f      	beq.n	8002738 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	2b04      	cmp	r3, #4
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x456>
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d114      	bne.n	80026ae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	2b02      	cmp	r3, #2
 8002688:	d111      	bne.n	80026ae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bca3 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	4920      	ldr	r1, [pc, #128]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026ac:	e044      	b.n	8002738 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d024      	beq.n	8002700 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80026b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026c2:	f7ff f851 	bl	8001768 <HAL_GetTick>
 80026c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c8:	e009      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f84d 	bl	8001768 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d902      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	f000 bc80 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ef      	beq.n	80026ca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	490b      	ldr	r1, [pc, #44]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	610b      	str	r3, [r1, #16]
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800270a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800270c:	f7ff f82c 	bl	8001768 <HAL_GetTick>
 8002710:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7ff f828 	bl	8001768 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d904      	bls.n	800272c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	f000 bc5b 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
 8002728:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272c:	4baf      	ldr	r3, [pc, #700]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ed      	bne.n	8002714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80c8 	beq.w	80028d6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274c:	4ba7      	ldr	r3, [pc, #668]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d111      	bne.n	800277e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4ba4      	ldr	r3, [pc, #656]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002760:	4aa2      	ldr	r2, [pc, #648]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800276a:	4ba0      	ldr	r3, [pc, #640]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800277e:	4b9c      	ldr	r3, [pc, #624]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800278a:	4b99      	ldr	r3, [pc, #612]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	4a98      	ldr	r2, [pc, #608]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe ffe7 	bl	8001768 <HAL_GetTick>
 800279a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe ffe3 	bl	8001768 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d902      	bls.n	80027b2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f000 bc16 	b.w	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80027b2:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ef      	beq.n	800279e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d05f      	beq.n	8002886 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80027c6:	4b89      	ldr	r3, [pc, #548]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80027c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027cc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	429a      	cmp	r2, r3
 80027da:	d037      	beq.n	800284c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e3f4      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01b      	beq.n	8002836 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80027fe:	4b7b      	ldr	r3, [pc, #492]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002804:	4a79      	ldr	r2, [pc, #484]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002806:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800280a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800280e:	f7fe ffab 	bl	8001768 <HAL_GetTick>
 8002812:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe ffa7 	bl	8001768 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b05      	cmp	r3, #5
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e3da      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002828:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800282a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800282e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ef      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002836:	4b6d      	ldr	r3, [pc, #436]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4969      	ldr	r1, [pc, #420]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800284c:	4b67      	ldr	r3, [pc, #412]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800284e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002852:	4a66      	ldr	r2, [pc, #408]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002854:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800285c:	f7fe ff84 	bl	8001768 <HAL_GetTick>
 8002860:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe ff80 	bl	8001768 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e3b3      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002876:	4b5d      	ldr	r3, [pc, #372]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ef      	beq.n	8002864 <HAL_RCC_OscConfig+0x630>
 8002884:	e01b      	b.n	80028be <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002886:	4b59      	ldr	r3, [pc, #356]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800288c:	4a57      	ldr	r2, [pc, #348]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800288e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002896:	f7fe ff67 	bl	8001768 <HAL_GetTick>
 800289a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe ff63 	bl	8001768 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e396      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028b0:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80028b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ef      	bne.n	800289e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b49      	ldr	r3, [pc, #292]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028cc:	4a47      	ldr	r2, [pc, #284]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8111 	beq.w	8002b06 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b40      	ldr	r3, [pc, #256]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b3c      	ldr	r3, [pc, #240]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fe:	4a3b      	ldr	r2, [pc, #236]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002908:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800291c:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d118      	bne.n	800295a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002934:	f7fe ff18 	bl	8001768 <HAL_GetTick>
 8002938:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe ff14 	bl	8001768 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e347      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_RCC_OscConfig+0x7bc>)
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002988:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 8002996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299a:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a4:	e00f      	b.n	80029c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80029a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ac:	4a0f      	ldr	r2, [pc, #60]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_RCC_OscConfig+0x7b8>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d057      	beq.n	8002a7e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80029ce:	f7fe fecb 	bl	8001768 <HAL_GetTick>
 80029d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	e00e      	b.n	80029f4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fec7 	bl	8001768 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d905      	bls.n	80029f4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e2f8      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
 80029ec:	46020c00 	.word	0x46020c00
 80029f0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 80029f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0e9      	beq.n	80029d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01b      	beq.n	8002a46 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a0e:	4b96      	ldr	r3, [pc, #600]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a14:	4a94      	ldr	r2, [pc, #592]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fea2 	bl	8001768 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e2d3      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a36:	4b8c      	ldr	r3, [pc, #560]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ed      	beq.n	8002a20 <HAL_RCC_OscConfig+0x7ec>
 8002a44:	e053      	b.n	8002aee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a46:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a4c:	4a86      	ldr	r2, [pc, #536]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fe86 	bl	8001768 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e2b7      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ed      	bne.n	8002a58 <HAL_RCC_OscConfig+0x824>
 8002a7c:	e037      	b.n	8002aee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fe73 	bl	8001768 <HAL_GetTick>
 8002a82:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fe6f 	bl	8001768 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e2a0      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a9c:	4b72      	ldr	r3, [pc, #456]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ed      	bne.n	8002a86 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01a      	beq.n	8002aee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002abe:	4a6a      	ldr	r2, [pc, #424]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe fe4d 	bl	8001768 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e27e      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ae0:	4b61      	ldr	r3, [pc, #388]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ed      	bne.n	8002aca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002b1a:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b24:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b26:	f7fe fe1f 	bl	8001768 <HAL_GetTick>
 8002b2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b2e:	f7fe fe1b 	bl	8001768 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e24e      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b40:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x8fa>
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002b4e:	4b46      	ldr	r3, [pc, #280]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a45      	ldr	r2, [pc, #276]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b5a:	f7fe fe05 	bl	8001768 <HAL_GetTick>
 8002b5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b62:	f7fe fe01 	bl	8001768 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e234      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b74:	4b3c      	ldr	r3, [pc, #240]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d036      	beq.n	8002bfa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d019      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002b94:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a33      	ldr	r2, [pc, #204]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ba0:	f7fe fde2 	bl	8001768 <HAL_GetTick>
 8002ba4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fdde 	bl	8001768 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e211      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002bba:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x974>
 8002bc6:	e018      	b.n	8002bfa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002bc8:	4b27      	ldr	r3, [pc, #156]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bd4:	f7fe fdc8 	bl	8001768 <HAL_GetTick>
 8002bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fdc4 	bl	8001768 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1f7      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d07f      	beq.n	8002d06 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d062      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c18:	6093      	str	r3, [r2, #8]
 8002c1a:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	4910      	ldr	r1, [pc, #64]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002c34:	d309      	bcc.n	8002c4a <HAL_RCC_OscConfig+0xa16>
 8002c36:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 021f 	bic.w	r2, r3, #31
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4909      	ldr	r1, [pc, #36]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
 8002c48:	e02a      	b.n	8002ca0 <HAL_RCC_OscConfig+0xa6c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0c      	bge.n	8002c6c <HAL_RCC_OscConfig+0xa38>
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	4901      	ldr	r1, [pc, #4]	@ (8002c68 <HAL_RCC_OscConfig+0xa34>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]
 8002c66:	e01b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xa6c>
 8002c68:	46020c00 	.word	0x46020c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d30a      	bcc.n	8002c8c <HAL_RCC_OscConfig+0xa58>
 8002c76:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	499d      	ldr	r1, [pc, #628]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60cb      	str	r3, [r1, #12]
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCC_OscConfig+0xa6c>
 8002c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	03db      	lsls	r3, r3, #15
 8002c9a:	4998      	ldr	r1, [pc, #608]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002ca0:	4b96      	ldr	r3, [pc, #600]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a95      	ldr	r2, [pc, #596]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ca6:	f043 0310 	orr.w	r3, r3, #16
 8002caa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002cac:	f7fe fd5c 	bl	8001768 <HAL_GetTick>
 8002cb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002cb4:	f7fe fd58 	bl	8001768 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e18b      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xa80>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002cd4:	4b89      	ldr	r3, [pc, #548]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a88      	ldr	r2, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ce0:	f7fe fd42 	bl	8001768 <HAL_GetTick>
 8002ce4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ce8:	f7fe fd3e 	bl	8001768 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e171      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002cfa:	4b80      	ldr	r3, [pc, #512]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8166 	beq.w	8002fdc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d16:	4b79      	ldr	r3, [pc, #484]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	f000 80f2 	beq.w	8002f08 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 80c5 	bne.w	8002eb8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b73      	ldr	r3, [pc, #460]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a72      	ldr	r2, [pc, #456]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d3a:	f7fe fd15 	bl	8001768 <HAL_GetTick>
 8002d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fd11 	bl	8001768 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e144      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d111      	bne.n	8002d92 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b63      	ldr	r3, [pc, #396]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d74:	4a61      	ldr	r2, [pc, #388]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002d92:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <HAL_RCC_OscConfig+0xccc>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d9e:	d102      	bne.n	8002da6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002da6:	4b56      	ldr	r3, [pc, #344]	@ (8002f00 <HAL_RCC_OscConfig+0xccc>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a55      	ldr	r2, [pc, #340]	@ (8002f00 <HAL_RCC_OscConfig+0xccc>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002db2:	4b52      	ldr	r3, [pc, #328]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dc6:	3a01      	subs	r2, #1
 8002dc8:	0212      	lsls	r2, r2, #8
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	494a      	ldr	r1, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dd8:	4b48      	ldr	r3, [pc, #288]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ddc:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_RCC_OscConfig+0xcd0>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002de4:	3a01      	subs	r2, #1
 8002de6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dee:	3a01      	subs	r2, #1
 8002df0:	0252      	lsls	r2, r2, #9
 8002df2:	b292      	uxth	r2, r2
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0412      	lsls	r2, r2, #16
 8002dfe:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0612      	lsls	r2, r2, #24
 8002e0c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002e10:	430a      	orrs	r2, r1
 8002e12:	493a      	ldr	r1, [pc, #232]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	4a37      	ldr	r2, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e1e:	f023 0310 	bic.w	r3, r3, #16
 8002e22:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	4a34      	ldr	r2, [pc, #208]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002e2e:	4b33      	ldr	r3, [pc, #204]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e34:	f043 0310 	orr.w	r3, r3, #16
 8002e38:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002e3a:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	f023 020c 	bic.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	492d      	ldr	r1, [pc, #180]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e54:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <HAL_RCC_OscConfig+0xccc>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <HAL_RCC_OscConfig+0xccc>)
 8002e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e5e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002e60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6e:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e84:	f7fe fc70 	bl	8001768 <HAL_GetTick>
 8002e88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fc6c 	bl	8001768 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e09f      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb4:	6293      	str	r3, [r2, #40]	@ 0x28
 8002eb6:	e091      	b.n	8002fdc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ec4:	f7fe fc50 	bl	8001768 <HAL_GetTick>
 8002ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fc4c 	bl	8001768 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	4a03      	ldr	r2, [pc, #12]	@ (8002efc <HAL_RCC_OscConfig+0xcc8>)
 8002ef0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	6293      	str	r3, [r2, #40]	@ 0x28
 8002efa:	e06f      	b.n	8002fdc <HAL_RCC_OscConfig+0xda8>
 8002efc:	46020c00 	.word	0x46020c00
 8002f00:	46020800 	.word	0x46020800
 8002f04:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002f08:	4b37      	ldr	r3, [pc, #220]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f0e:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f12:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d039      	beq.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d132      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d129      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d122      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f54:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d11a      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	0a5b      	lsrs	r3, r3, #9
 8002f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d111      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f78:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d108      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	0e1b      	lsrs	r3, r3, #24
 8002f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e024      	b.n	8002fde <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f94:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d01a      	beq.n	8002fdc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002fac:	f023 0310 	bic.w	r3, r3, #16
 8002fb0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fbd9 	bl	8001768 <HAL_GetTick>
 8002fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002fb8:	bf00      	nop
 8002fba:	f7fe fbd5 	bl	8001768 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d0f9      	beq.n	8002fba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	4a07      	ldr	r2, [pc, #28]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <HAL_RCC_OscConfig+0xdb4>)
 8002fd6:	f043 0310 	orr.w	r3, r3, #16
 8002fda:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3738      	adds	r7, #56	@ 0x38
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	46020c00 	.word	0x46020c00

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e1d9      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b9b      	ldr	r3, [pc, #620]	@ (8003270 <HAL_RCC_ClockConfig+0x284>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b98      	ldr	r3, [pc, #608]	@ (8003270 <HAL_RCC_ClockConfig+0x284>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4996      	ldr	r1, [pc, #600]	@ (8003270 <HAL_RCC_ClockConfig+0x284>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b94      	ldr	r3, [pc, #592]	@ (8003270 <HAL_RCC_ClockConfig+0x284>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e1c1      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	4b8c      	ldr	r3, [pc, #560]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800304c:	4b89      	ldr	r3, [pc, #548]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4986      	ldr	r1, [pc, #536]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 800305a:	4313      	orrs	r3, r2
 800305c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	4b81      	ldr	r3, [pc, #516]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d909      	bls.n	8003090 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800307c:	4b7d      	ldr	r3, [pc, #500]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	497a      	ldr	r1, [pc, #488]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 800308c:	4313      	orrs	r3, r2
 800308e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4b74      	ldr	r3, [pc, #464]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d908      	bls.n	80030be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b71      	ldr	r3, [pc, #452]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	496e      	ldr	r1, [pc, #440]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b69      	ldr	r3, [pc, #420]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d908      	bls.n	80030ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80030da:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 020f 	bic.w	r2, r3, #15
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4963      	ldr	r1, [pc, #396]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80d2 	beq.w	800329e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d143      	bne.n	800318e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b5b      	ldr	r3, [pc, #364]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d110      	bne.n	8003136 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b57      	ldr	r3, [pc, #348]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311a:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003136:	f7fe fb17 	bl	8001768 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800313c:	4b4e      	ldr	r3, [pc, #312]	@ (8003278 <HAL_RCC_ClockConfig+0x28c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00f      	beq.n	8003168 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800314a:	f7fe fb0d 	bl	8001768 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e12b      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800315c:	4b46      	ldr	r3, [pc, #280]	@ (8003278 <HAL_RCC_ClockConfig+0x28c>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003174:	4a3f      	ldr	r2, [pc, #252]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800317e:	4b3d      	ldr	r3, [pc, #244]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d121      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e112      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e106      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80031ae:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0fa      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031be:	4b2d      	ldr	r3, [pc, #180]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0f2      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4926      	ldr	r1, [pc, #152]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80031e0:	f7fe fac2 	bl	8001768 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d112      	bne.n	8003214 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe faba 	bl	8001768 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0d6      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d1ee      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x204>
 8003212:	e044      	b.n	800329e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d112      	bne.n	8003242 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321e:	f7fe faa3 	bl	8001768 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0bf      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003234:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d1ee      	bne.n	800321e <HAL_RCC_ClockConfig+0x232>
 8003240:	e02d      	b.n	800329e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d123      	bne.n	8003292 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fe fa8c 	bl	8001768 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0a8      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003262:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <HAL_RCC_ClockConfig+0x288>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ee      	bne.n	800324c <HAL_RCC_ClockConfig+0x260>
 800326e:	e016      	b.n	800329e <HAL_RCC_ClockConfig+0x2b2>
 8003270:	40022000 	.word	0x40022000
 8003274:	46020c00 	.word	0x46020c00
 8003278:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe fa74 	bl	8001768 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e090      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003292:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d1ee      	bne.n	800327c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	4b43      	ldr	r3, [pc, #268]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d208      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80032ba:	4b40      	ldr	r3, [pc, #256]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	493d      	ldr	r1, [pc, #244]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b3c      	ldr	r3, [pc, #240]	@ (80033c0 <HAL_RCC_ClockConfig+0x3d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d210      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <HAL_RCC_ClockConfig+0x3d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 020f 	bic.w	r2, r3, #15
 80032e2:	4937      	ldr	r1, [pc, #220]	@ (80033c0 <HAL_RCC_ClockConfig+0x3d4>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <HAL_RCC_ClockConfig+0x3d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e05b      	b.n	80033b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003314:	429a      	cmp	r2, r3
 8003316:	d208      	bcs.n	800332a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4925      	ldr	r1, [pc, #148]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 8003326:	4313      	orrs	r3, r2
 8003328:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003344:	429a      	cmp	r2, r3
 8003346:	d209      	bcs.n	800335c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003348:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4919      	ldr	r1, [pc, #100]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003374:	429a      	cmp	r2, r3
 8003376:	d208      	bcs.n	800338a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	490d      	ldr	r1, [pc, #52]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800338a:	f000 f821 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <HAL_RCC_ClockConfig+0x3d0>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	490a      	ldr	r1, [pc, #40]	@ (80033c4 <HAL_RCC_ClockConfig+0x3d8>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	4a09      	ldr	r2, [pc, #36]	@ (80033c8 <HAL_RCC_ClockConfig+0x3dc>)
 80033a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <HAL_RCC_ClockConfig+0x3e0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe f953 	bl	8001654 <HAL_InitTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	46020c00 	.word	0x46020c00
 80033c0:	40022000 	.word	0x40022000
 80033c4:	08009e44 	.word	0x08009e44
 80033c8:	20000020 	.word	0x20000020
 80033cc:	20000024 	.word	0x20000024

080033d0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033de:	4b78      	ldr	r3, [pc, #480]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e8:	4b75      	ldr	r3, [pc, #468]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x34>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d121      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d11e      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003404:	4b6e      	ldr	r3, [pc, #440]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d107      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003410:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003416:	0b1b      	lsrs	r3, r3, #12
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
 800341e:	e005      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003420:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	0f1b      	lsrs	r3, r3, #28
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800342c:	4a65      	ldr	r2, [pc, #404]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003440:	e00d      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003442:	4b5f      	ldr	r3, [pc, #380]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d102      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344e:	4b5e      	ldr	r3, [pc, #376]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	e004      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b08      	cmp	r3, #8
 8003458:	d101      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800345a:	4b5c      	ldr	r3, [pc, #368]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800345c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	f040 80a5 	bne.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003466:	4b56      	ldr	r3, [pc, #344]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003470:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3301      	adds	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800347e:	4b50      	ldr	r3, [pc, #320]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800348a:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d003      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d022      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x128>
 80034b2:	e043      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80035d0 <HAL_RCC_GetSysClockFreq+0x200>
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b3e      	ldr	r3, [pc, #248]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034d6:	ed97 6a01 	vldr	s12, [r7, #4]
 80034da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80035d4 <HAL_RCC_GetSysClockFreq+0x204>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034f6:	e046      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80035d8 <HAL_RCC_GetSysClockFreq+0x208>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800351a:	ed97 6a01 	vldr	s12, [r7, #4]
 800351e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80035d4 <HAL_RCC_GetSysClockFreq+0x204>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800352a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800353a:	e024      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003554:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003564:	ed97 6a01 	vldr	s12, [r7, #4]
 8003568:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80035d4 <HAL_RCC_GetSysClockFreq+0x204>
 800356c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003574:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003578:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003580:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003584:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003586:	4b0e      	ldr	r3, [pc, #56]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003590:	3301      	adds	r3, #1
 8003592:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800359e:	edd7 6a07 	vldr	s13, [r7, #28]
 80035a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035aa:	ee17 3a90 	vmov	r3, s15
 80035ae:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	372c      	adds	r7, #44	@ 0x2c
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	46020c00 	.word	0x46020c00
 80035c4:	08009e5c 	.word	0x08009e5c
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200
 80035d0:	4b742400 	.word	0x4b742400
 80035d4:	46000000 	.word	0x46000000
 80035d8:	4af42400 	.word	0x4af42400

080035dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035e0:	f7ff fef6 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b07      	ldr	r3, [pc, #28]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x28>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	4906      	ldr	r1, [pc, #24]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x2c>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a05      	ldr	r2, [pc, #20]	@ (800360c <HAL_RCC_GetHCLKFreq+0x30>)
 80035f8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80035fa:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCC_GetHCLKFreq+0x30>)
 80035fc:	681b      	ldr	r3, [r3, #0]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	46020c00 	.word	0x46020c00
 8003608:	08009e44 	.word	0x08009e44
 800360c:	20000020 	.word	0x20000020

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003614:	f7ff ffe2 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	@ (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	46020c00 	.word	0x46020c00
 8003634:	08009e54 	.word	0x08009e54

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800363c:	f7ff ffce 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	@ (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	46020c00 	.word	0x46020c00
 800365c:	08009e54 	.word	0x08009e54

08003660 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003664:	f7ff ffba 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetPCLK3Freq+0x20>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	@ (8003684 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	46020c00 	.word	0x46020c00
 8003684:	08009e54 	.word	0x08009e54

08003688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003690:	4b3e      	ldr	r3, [pc, #248]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800369e:	f7fe fd6b 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 80036a2:	6178      	str	r0, [r7, #20]
 80036a4:	e019      	b.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4b39      	ldr	r3, [pc, #228]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ac:	4a37      	ldr	r2, [pc, #220]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036b6:	4b35      	ldr	r3, [pc, #212]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036c4:	f7fe fd58 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 80036c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b30      	ldr	r3, [pc, #192]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d0:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036e0:	d003      	beq.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036e8:	d109      	bne.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036f0:	d202      	bcs.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80036f2:	2301      	movs	r3, #1
 80036f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80036f6:	e033      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80036fc:	e030      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003704:	d208      	bcs.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370c:	d102      	bne.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800370e:	2303      	movs	r3, #3
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e025      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e035      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800371e:	d90f      	bls.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800372c:	d902      	bls.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e015      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003734:	2301      	movs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e012      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e00f      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003746:	d109      	bne.n	800375c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374e:	d102      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e004      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003756:	2302      	movs	r3, #2
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e001      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800375c:	2301      	movs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 020f 	bic.w	r2, r3, #15
 8003768:	4909      	ldr	r1, [pc, #36]	@ (8003790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	46020c00 	.word	0x46020c00
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b0b6      	sub	sp, #216	@ 0xd8
 800379a:	af00      	add	r7, sp, #0
 800379c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f002 0401 	and.w	r4, r2, #1
 80037b8:	2500      	movs	r5, #0
 80037ba:	ea54 0305 	orrs.w	r3, r4, r5
 80037be:	d00b      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80037c0:	4bc5      	ldr	r3, [pc, #788]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037c6:	f023 0103 	bic.w	r1, r3, #3
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d0:	4ac1      	ldr	r2, [pc, #772]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0804 	and.w	r8, r2, #4
 80037e4:	f04f 0900 	mov.w	r9, #0
 80037e8:	ea58 0309 	orrs.w	r3, r8, r9
 80037ec:	d00b      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80037ee:	4bba      	ldr	r3, [pc, #744]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	4ab6      	ldr	r2, [pc, #728]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f002 0a08 	and.w	sl, r2, #8
 8003812:	f04f 0b00 	mov.w	fp, #0
 8003816:	ea5a 030b 	orrs.w	r3, sl, fp
 800381a:	d00b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800381c:	4bae      	ldr	r3, [pc, #696]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800381e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003822:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800382a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382c:	4aaa      	ldr	r2, [pc, #680]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800382e:	430b      	orrs	r3, r1
 8003830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f002 0310 	and.w	r3, r2, #16
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800384a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d00b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003854:	4ba0      	ldr	r3, [pc, #640]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800385a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800385e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003864:	4a9c      	ldr	r2, [pc, #624]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003866:	430b      	orrs	r3, r1
 8003868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 0320 	and.w	r3, r2, #32
 8003878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003882:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d00b      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800388c:	4b92      	ldr	r3, [pc, #584]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800388e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003892:	f023 0107 	bic.w	r1, r3, #7
 8003896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	4a8e      	ldr	r2, [pc, #568]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80038b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d00b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80038c4:	4b84      	ldr	r3, [pc, #528]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80038ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d4:	4a80      	ldr	r2, [pc, #512]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038f2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d00b      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80038fc:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390c:	4a72      	ldr	r2, [pc, #456]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800392a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800392e:	460b      	mov	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	d00b      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800393a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800393e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003944:	4a64      	ldr	r2, [pc, #400]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800394c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003962:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d00b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800396c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003972:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800397a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397c:	4a56      	ldr	r2, [pc, #344]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800397e:	430b      	orrs	r3, r1
 8003980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800399a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800399e:	460b      	mov	r3, r1
 80039a0:	4313      	orrs	r3, r2
 80039a2:	d00b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80039a4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039aa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80039ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	4a48      	ldr	r2, [pc, #288]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	d00b      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80039dc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039e2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80039e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ec:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80039f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a02:	2300      	movs	r3, #0
 8003a04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003a10:	4b31      	ldr	r3, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a20:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a22:	430b      	orrs	r3, r1
 8003a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a36:	2300      	movs	r3, #0
 8003a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a3a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d04f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d02d      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a50:	2b80      	cmp	r3, #128	@ 0x80
 8003a52:	d827      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a54:	2b60      	cmp	r3, #96	@ 0x60
 8003a56:	d02b      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003a58:	2b60      	cmp	r3, #96	@ 0x60
 8003a5a:	d823      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	d006      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d81f      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d011      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a6c:	e01a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a7a:	e01a      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a80:	3308      	adds	r3, #8
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 f91e 	bl	8005cc4 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a8e:	e010      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a94:	332c      	adds	r3, #44	@ 0x2c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 f9ac 	bl	8005df4 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003aa2:	e006      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d110      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003abc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ac0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003acc:	4a02      	ldr	r2, [pc, #8]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ad4:	e006      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003ad6:	bf00      	nop
 8003ad8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ae0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af2:	2300      	movs	r3, #0
 8003af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003af6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d046      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b0c:	d028      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b12:	d821      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b18:	d022      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b1e:	d81b      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b24:	d01c      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b2a:	d815      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b36:	d80f      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d011      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b40:	d00e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b48:	3308      	adds	r3, #8
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 f8ba 	bl	8005cc4 <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003b6a:	4bb6      	ldr	r3, [pc, #728]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b7c:	4ab1      	ldr	r2, [pc, #708]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b8a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ba0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d03e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d81d      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003bdf 	.word	0x08003bdf
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bd0:	4b9c      	ldr	r3, [pc, #624]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	4a9b      	ldr	r2, [pc, #620]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be2:	332c      	adds	r3, #44	@ 0x2c
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 f905 	bl	8005df4 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bf0:	e004      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bf8:	e000      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003bfa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003bfc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003c04:	4b8f      	ldr	r3, [pc, #572]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c0a:	f023 0107 	bic.w	r1, r3, #7
 8003c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c16:	4a8b      	ldr	r2, [pc, #556]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c24:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c36:	2300      	movs	r3, #0
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c56:	d821      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c5c:	d024      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c62:	d81b      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c68:	d00e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c6e:	d815      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d110      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c7a:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	4a71      	ldr	r2, [pc, #452]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003c86:	e012      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c8c:	332c      	adds	r3, #44	@ 0x2c
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 f8b0 	bl	8005df4 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003ca2:	e004      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003ca4:	bf00      	nop
 8003ca6:	e002      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003cac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003cae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003cb6:	4b63      	ldr	r3, [pc, #396]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003cd6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce8:	2300      	movs	r3, #0
 8003cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f000 80ba 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b51      	ldr	r3, [pc, #324]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d113      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d12:	4a4c      	ldr	r2, [pc, #304]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d1c:	4b49      	ldr	r3, [pc, #292]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d34:	4b44      	ldr	r3, [pc, #272]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	4a43      	ldr	r2, [pc, #268]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d40:	f7fd fd12 	bl	8001768 <HAL_GetTick>
 8003d44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d48:	e00b      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4a:	f7fd fd0d 	bl	8001768 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d903      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d62:	4b39      	ldr	r3, [pc, #228]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ed      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8003d6e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d16a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d76:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d023      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d90:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d9c:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003daa:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db0:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc0:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dca:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d019      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fcc2 	bl	8001768 <HAL_GetTick>
 8003de4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de8:	e00d      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fd fcbd 	bl	8001768 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d903      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8003e04:	e006      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ea      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003e14:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10d      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e2e:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e36:	e00d      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e38:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e3c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e42:	bf00      	nop
 8003e44:	46020c00 	.word	0x46020c00
 8003e48:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e50:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e54:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5c:	4bb2      	ldr	r3, [pc, #712]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e62:	4ab1      	ldr	r2, [pc, #708]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d042      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e90:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e94:	d022      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003e96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e9a:	d81b      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea0:	d011      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea6:	d815      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d019      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003eac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eb0:	d110      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 ff03 	bl	8005cc4 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003ec4:	e00d      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec6:	4b98      	ldr	r3, [pc, #608]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	4a97      	ldr	r2, [pc, #604]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003ed2:	e006      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003eda:	e002      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003ee0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ee2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10d      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003eea:	4b8f      	ldr	r3, [pc, #572]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ef0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efc:	4a8a      	ldr	r2, [pc, #552]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003efe:	430b      	orrs	r3, r1
 8003f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f0a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f24:	460b      	mov	r3, r1
 8003f26:	4313      	orrs	r3, r2
 8003f28:	d02d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f36:	d00b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3c:	d804      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d007      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003f4e:	e004      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f50:	bf00      	nop
 8003f52:	e002      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f5a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003f62:	4b71      	ldr	r3, [pc, #452]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f74:	4a6c      	ldr	r2, [pc, #432]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f82:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f94:	2300      	movs	r3, #0
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003fa2:	4b61      	ldr	r3, [pc, #388]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fa8:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	d019      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fe6:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	4a4f      	ldr	r2, [pc, #316]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ff8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004004:	4a48      	ldr	r2, [pc, #288]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004006:	430b      	orrs	r3, r1
 8004008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800400c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	2300      	movs	r3, #0
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800401e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d00c      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004028:	4b3f      	ldr	r3, [pc, #252]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800402a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800402e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800403a:	493b      	ldr	r1, [pc, #236]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d00c      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800405e:	4b32      	ldr	r3, [pc, #200]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800406c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004070:	492d      	ldr	r1, [pc, #180]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d00c      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800409a:	f023 0218 	bic.w	r2, r3, #24
 800409e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040a6:	4920      	ldr	r1, [pc, #128]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d034      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80040ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	4a12      	ldr	r2, [pc, #72]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80040e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040f0:	d108      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040f6:	3308      	adds	r3, #8
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fde3 	bl	8005cc4 <RCCEx_PLL2_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004104:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800410c:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800410e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800411e:	4902      	ldr	r1, [pc, #8]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004128:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004130:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d03a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004158:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800415c:	d00e      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800415e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004162:	d815      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d017      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800416c:	d110      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416e:	4b27      	ldr	r3, [pc, #156]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	4a26      	ldr	r2, [pc, #152]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004178:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800417a:	e00e      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800417c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004180:	3308      	adds	r3, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fd9e 	bl	8005cc4 <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004198:	bf00      	nop
    }
    if (ret == HAL_OK)
 800419a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80041a2:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b4:	4915      	ldr	r1, [pc, #84]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80041c2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80041c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041dc:	460b      	mov	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	d00c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041e8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80041ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f4:	4905      	ldr	r1, [pc, #20]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80041fc:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8004200:	4618      	mov	r0, r3
 8004202:	37d8      	adds	r7, #216	@ 0xd8
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420a:	bf00      	nop
 800420c:	46020c00 	.word	0x46020c00

08004210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	@ 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004218:	4ba6      	ldr	r3, [pc, #664]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800421a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004222:	4ba4      	ldr	r3, [pc, #656]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800422c:	4ba1      	ldr	r3, [pc, #644]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	3301      	adds	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800423a:	4b9e      	ldr	r3, [pc, #632]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004246:	4b9b      	ldr	r3, [pc, #620]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d062      	beq.n	800432e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b03      	cmp	r3, #3
 800426c:	f200 8081 	bhi.w	8004372 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d024      	beq.n	80042c0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d17a      	bne.n	8004372 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80044b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800428a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428e:	4b89      	ldr	r3, [pc, #548]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800429e:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80044bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80042a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042be:	e08f      	b.n	80043e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042c0:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80042cc:	4b79      	ldr	r3, [pc, #484]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	0f1b      	lsrs	r3, r3, #28
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	e006      	b.n	80042e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80042d8:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	0f1b      	lsrs	r3, r3, #28
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	4a76      	ldr	r2, [pc, #472]	@ (80044c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80042e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004310:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80044bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004320:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004328:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800432c:	e058      	b.n	80043e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004338:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80044c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 800433c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004340:	4b5c      	ldr	r3, [pc, #368]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004350:	ed97 6a02 	vldr	s12, [r7, #8]
 8004354:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80044bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004358:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800435c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004364:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004370:	e036      	b.n	80043e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004372:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800437e:	4b4d      	ldr	r3, [pc, #308]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0f1b      	lsrs	r3, r3, #28
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800438c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	0f1b      	lsrs	r3, r3, #28
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	4a49      	ldr	r2, [pc, #292]	@ (80044c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	ee07 3a90 	vmov	s15, r3
 80043ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043be:	ed97 6a02 	vldr	s12, [r7, #8]
 80043c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80044bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80043c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043de:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80043e0:	4b34      	ldr	r3, [pc, #208]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043ec:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80043fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004402:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004406:	edd7 6a07 	vldr	s13, [r7, #28]
 800440a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004412:	ee17 2a90 	vmov	r2, s15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e002      	b.n	8004422 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800442e:	4b21      	ldr	r3, [pc, #132]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004444:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004448:	edd7 6a07 	vldr	s13, [r7, #28]
 800444c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004454:	ee17 2a90 	vmov	r2, s15
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	e002      	b.n	8004464 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004464:	4b13      	ldr	r3, [pc, #76]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004486:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800448a:	edd7 6a07 	vldr	s13, [r7, #28]
 800448e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004496:	ee17 2a90 	vmov	r2, s15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800449e:	e002      	b.n	80044a6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
}
 80044a6:	bf00      	nop
 80044a8:	3724      	adds	r7, #36	@ 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	46020c00 	.word	0x46020c00
 80044b8:	4b742400 	.word	0x4b742400
 80044bc:	46000000 	.word	0x46000000
 80044c0:	08009e5c 	.word	0x08009e5c
 80044c4:	4af42400 	.word	0x4af42400

080044c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80044d0:	4ba6      	ldr	r3, [pc, #664]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80044da:	4ba4      	ldr	r3, [pc, #656]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80044e4:	4ba1      	ldr	r3, [pc, #644]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3301      	adds	r3, #1
 80044f0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80044f2:	4b9e      	ldr	r3, [pc, #632]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80044fe:	4b9b      	ldr	r3, [pc, #620]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	08db      	lsrs	r3, r3, #3
 8004504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d062      	beq.n	80045e6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b03      	cmp	r3, #3
 8004524:	f200 8081 	bhi.w	800462a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d024      	beq.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d17a      	bne.n	800462a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b89      	ldr	r3, [pc, #548]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004576:	e08f      	b.n	8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004578:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004584:	4b79      	ldr	r3, [pc, #484]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	0f1b      	lsrs	r3, r3, #28
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	e006      	b.n	800459e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004590:	4b76      	ldr	r3, [pc, #472]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	0f1b      	lsrs	r3, r3, #28
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a76      	ldr	r2, [pc, #472]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80045cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80045dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e4:	e058      	b.n	8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 80045f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f8:	4b5c      	ldr	r3, [pc, #368]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004608:	ed97 6a02 	vldr	s12, [r7, #8]
 800460c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004610:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004614:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004624:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004628:	e036      	b.n	8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800462a:	4b50      	ldr	r3, [pc, #320]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004636:	4b4d      	ldr	r3, [pc, #308]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	e006      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004642:	4b4a      	ldr	r3, [pc, #296]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	0f1b      	lsrs	r3, r3, #28
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	4a49      	ldr	r2, [pc, #292]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004696:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004698:	4b34      	ldr	r3, [pc, #208]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046a4:	4b31      	ldr	r3, [pc, #196]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80046b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046be:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ca:	ee17 2a90 	vmov	r2, s15
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d017      	beq.n	8004716 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046e6:	4b21      	ldr	r3, [pc, #132]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80046f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046fc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004700:	edd7 6a07 	vldr	s13, [r7, #28]
 8004704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470c:	ee17 2a90 	vmov	r2, s15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	e002      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800471c:	4b13      	ldr	r3, [pc, #76]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d017      	beq.n	8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004728:	4b10      	ldr	r3, [pc, #64]	@ (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	0e1b      	lsrs	r3, r3, #24
 800472e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004756:	e002      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	3724      	adds	r7, #36	@ 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	46020c00 	.word	0x46020c00
 8004770:	4b742400 	.word	0x4b742400
 8004774:	46000000 	.word	0x46000000
 8004778:	08009e5c 	.word	0x08009e5c
 800477c:	4af42400 	.word	0x4af42400

08004780 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004788:	4ba6      	ldr	r3, [pc, #664]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004792:	4ba4      	ldr	r3, [pc, #656]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800479c:	4ba1      	ldr	r3, [pc, #644]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3301      	adds	r3, #1
 80047a8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80047aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80047b6:	4b9b      	ldr	r3, [pc, #620]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d062      	beq.n	800489e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	f200 8081 	bhi.w	80048e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d024      	beq.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d17a      	bne.n	80048e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b89      	ldr	r3, [pc, #548]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800480e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004812:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800481e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800482e:	e08f      	b.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004830:	4b7c      	ldr	r3, [pc, #496]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800483c:	4b79      	ldr	r3, [pc, #484]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0f1b      	lsrs	r3, r3, #28
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	e006      	b.n	8004856 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004848:	4b76      	ldr	r3, [pc, #472]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800484a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	0f1b      	lsrs	r3, r3, #28
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	4a76      	ldr	r2, [pc, #472]	@ (8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004880:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004890:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800489c:	e058      	b.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 80048ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80048c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80048cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80048d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e0:	e036      	b.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048e2:	4b50      	ldr	r3, [pc, #320]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80048ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0f1b      	lsrs	r3, r3, #28
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80048fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	0f1b      	lsrs	r3, r3, #28
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	4a49      	ldr	r2, [pc, #292]	@ (8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800494e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004950:	4b34      	ldr	r3, [pc, #208]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d017      	beq.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800495c:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800496e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004972:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004976:	edd7 6a07 	vldr	s13, [r7, #28]
 800497a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	ee17 2a90 	vmov	r2, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004992:	4b24      	ldr	r3, [pc, #144]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d017      	beq.n	80049ce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800499e:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80049b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c4:	ee17 2a90 	vmov	r2, s15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	e002      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80049d4:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049e0:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80049f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a06:	ee17 2a90 	vmov	r2, s15
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a0e:	e002      	b.n	8004a16 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	46020c00 	.word	0x46020c00
 8004a28:	4b742400 	.word	0x4b742400
 8004a2c:	46000000 	.word	0x46000000
 8004a30:	08009e5c 	.word	0x08009e5c
 8004a34:	4af42400 	.word	0x4af42400

08004a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08e      	sub	sp, #56	@ 0x38
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a46:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	d145      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a4e:	4b9b      	ldr	r3, [pc, #620]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004a5a:	4b98      	ldr	r3, [pc, #608]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d108      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6e:	d104      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	f001 b916 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004a7a:	4b90      	ldr	r3, [pc, #576]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a88:	d114      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a90:	d110      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a92:	4b8a      	ldr	r3, [pc, #552]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aa0:	d103      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004aa2:	23fa      	movs	r3, #250	@ 0xfa
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004aa6:	f001 b8fe 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8004aaa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ab0:	f001 b8f9 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004ab4:	4b81      	ldr	r3, [pc, #516]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac8:	d103      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004aca:	4b7d      	ldr	r3, [pc, #500]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ace:	f001 b8ea 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad6:	f001 b8e6 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ade:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	d151      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ae6:	4b75      	ldr	r3, [pc, #468]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004aec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004af0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	2b80      	cmp	r3, #128	@ 0x80
 8004af6:	d035      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d841      	bhi.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	2b60      	cmp	r3, #96	@ 0x60
 8004b02:	d02a      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	2b60      	cmp	r3, #96	@ 0x60
 8004b08:	d83b      	bhi.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	2b40      	cmp	r3, #64	@ 0x40
 8004b0e:	d009      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d835      	bhi.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d012      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004b22:	e02e      	b.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fb71 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b32:	f001 b8b8 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fcc4 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b44:	f001 b8af 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fe17 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b56:	f001 b8a6 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b60:	f001 b8a1 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b55      	ldr	r3, [pc, #340]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	d103      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004b72:	4b54      	ldr	r3, [pc, #336]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004b74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b76:	f001 b896 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b7e:	f001 b892 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :
      {
        frequency = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b86:	f001 b88e 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b8e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b92:	430b      	orrs	r3, r1
 8004b94:	d126      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004b96:	4b49      	ldr	r3, [pc, #292]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004ba2:	4b46      	ldr	r3, [pc, #280]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d106      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004bb6:	4b43      	ldr	r3, [pc, #268]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	f001 b874 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd2:	d103      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	f001 b865 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be0:	f001 b861 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004bec:	430b      	orrs	r3, r1
 8004bee:	d171      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004bf0:	4b32      	ldr	r3, [pc, #200]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c02:	d034      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c0a:	d853      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c12:	d00b      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1a:	d84b      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c28:	d009      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004c2a:	e043      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff faed 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c3a:	f001 b834 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3e:	f107 0318 	add.w	r3, r7, #24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fc40 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c4c:	f001 b82b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004c50:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5c:	d103      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c62:	f001 b820 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c6a:	f001 b81c 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c6e:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d118      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0e1b      	lsrs	r3, r3, #24
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	0e1b      	lsrs	r3, r3, #24
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ca8:	f000 bffd 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb0:	f000 bff9 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :

        frequency = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb8:	f000 bff5 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8004cbc:	46020c00 	.word	0x46020c00
 8004cc0:	0003d090 	.word	0x0003d090
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	007a1200 	.word	0x007a1200
 8004ccc:	02dc6c00 	.word	0x02dc6c00
 8004cd0:	08009e5c 	.word	0x08009e5c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	d17f      	bne.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ce0:	4ba8      	ldr	r3, [pc, #672]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d165      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004cf2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d04:	d034      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d0c:	d853      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d14:	d00b      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1c:	d84b      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004d2c:	e043      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fa6c 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d3c:	f000 bfb3 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fbbf 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d4e:	f000 bfaa 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004d52:	4b8c      	ldr	r3, [pc, #560]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5e:	d103      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004d60:	4b89      	ldr	r3, [pc, #548]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004d62:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004d64:	f000 bf9f 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d6c:	f000 bf9b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d70:	4b84      	ldr	r3, [pc, #528]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d118      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d7c:	4b81      	ldr	r3, [pc, #516]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004d88:	4b7e      	ldr	r3, [pc, #504]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	0e1b      	lsrs	r3, r3, #24
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	e006      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004d94:	4b7b      	ldr	r3, [pc, #492]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	4a7a      	ldr	r2, [pc, #488]	@ (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004daa:	f000 bf7c 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004db2:	f000 bf78 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        default :
        {
          frequency = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004dba:	f000 bf74 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fa20 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd4:	f000 bf67 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else
    {
      frequency = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ddc:	f000 bf63 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de4:	1e51      	subs	r1, r2, #1
 8004de6:	430b      	orrs	r3, r1
 8004de8:	d136      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004dea:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004dfc:	f7fe fc1c 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004e00:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e02:	f000 bf50 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d104      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e0c:	f7fe fae0 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004e10:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e12:	f000 bf48 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d106      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d103      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004e2a:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2e:	f000 bf3a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004e32:	4b54      	ldr	r3, [pc, #336]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d104      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4c:	f000 bf2b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e54:	f000 bf27 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5c:	1f11      	subs	r1, r2, #4
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	d136      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e62:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7fe fbcc 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004e78:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e7a:	f000 bf14 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d104      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e84:	f7fe faa4 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004e88:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e8a:	f000 bf0c 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d103      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea6:	f000 befe 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	2b30      	cmp	r3, #48	@ 0x30
 8004ebc:	d104      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	f000 beef 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ecc:	f000 beeb 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed4:	f1a2 0108 	sub.w	r1, r2, #8
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	d136      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004edc:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ee6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fe fb8f 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004ef2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ef4:	f000 bed7 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d104      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fe fa67 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004f02:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f04:	f000 becf 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004f08:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d106      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d103      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f20:	f000 bec1 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d107      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f36:	d104      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f3e:	f000 beb2 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f46:	f000 beae 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4e:	f1a2 0110 	sub.w	r1, r2, #16
 8004f52:	430b      	orrs	r3, r1
 8004f54:	d141      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f56:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f68:	f7fe fb52 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f6e:	f000 be9a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe fa29 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004f7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f80:	f000 be91 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8004f84:	46020c00 	.word	0x46020c00
 8004f88:	02dc6c00 	.word	0x02dc6c00
 8004f8c:	08009e5c 	.word	0x08009e5c
 8004f90:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004f94:	4baa      	ldr	r3, [pc, #680]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa8:	d103      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004faa:	4ba6      	ldr	r3, [pc, #664]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fae:	f000 be7a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004fb2:	4ba3      	ldr	r3, [pc, #652]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d108      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc6:	d104      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fce:	f000 be6a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd6:	f000 be66 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fde:	f1a2 0120 	sub.w	r1, r2, #32
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	d158      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004fe6:	4b96      	ldr	r3, [pc, #600]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004ff8:	f7fe fb32 	bl	8003660 <HAL_RCC_GetPCLK3Freq>
 8004ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ffe:	f000 be52 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	2b01      	cmp	r3, #1
 8005006:	d104      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005008:	f7fe f9e2 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800500c:	6378      	str	r0, [r7, #52]	@ 0x34
 800500e:	f000 be4a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005012:	4b8b      	ldr	r3, [pc, #556]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d106      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8005026:	4b87      	ldr	r3, [pc, #540]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
 800502a:	f000 be3c 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800502e:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d107      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	2b03      	cmp	r3, #3
 8005040:	d104      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8005042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005046:	637b      	str	r3, [r7, #52]	@ 0x34
 8005048:	f000 be2d 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800504c:	4b7c      	ldr	r3, [pc, #496]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d11b      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	2b04      	cmp	r3, #4
 800505c:	d118      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800505e:	4b78      	ldr	r3, [pc, #480]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 800506a:	4b75      	ldr	r3, [pc, #468]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005076:	4b72      	ldr	r3, [pc, #456]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	0e1b      	lsrs	r3, r3, #24
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	4a70      	ldr	r2, [pc, #448]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
 800508c:	f000 be0b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
 8005094:	f000 be07 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80050a0:	430b      	orrs	r3, r1
 80050a2:	d16c      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80050a4:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050aa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80050ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b6:	d104      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050b8:	f7fe f98a 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80050bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80050be:	f000 bdf2 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c8:	d108      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ca:	f107 0318 	add.w	r3, r7, #24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff f9fa 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d8:	f000 bde5 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80050e2:	f7fe fa7b 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80050e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80050e8:	f000 bddd 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050f2:	d122      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050f4:	4b52      	ldr	r3, [pc, #328]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d118      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005100:	4b4f      	ldr	r3, [pc, #316]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800510c:	4b4c      	ldr	r3, [pc, #304]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	e006      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005118:	4b49      	ldr	r3, [pc, #292]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800511a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	0e1b      	lsrs	r3, r3, #24
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	4a48      	ldr	r2, [pc, #288]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	f000 bdba 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
 8005136:	f000 bdb6 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800513a:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005146:	d107      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800514e:	d103      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005150:	4b3e      	ldr	r3, [pc, #248]	@ (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f000 bda7 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005158:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005164:	d107      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800516c:	d103      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800516e:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
 8005172:	f000 bd98 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
 800517a:	f000 bd94 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800517e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005182:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005186:	430b      	orrs	r3, r1
 8005188:	d162      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800518a:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800518c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	2b04      	cmp	r3, #4
 800519a:	d84c      	bhi.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051dd 	.word	0x080051dd
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051cb 	.word	0x080051cb
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051f1 	.word	0x080051f1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff f827 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051c6:	f000 bd6e 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051ca:	f107 030c 	add.w	r3, r7, #12
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fad6 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d8:	f000 bd65 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80051dc:	f7fe f9fe 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80051e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051e2:	f000 bd60 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80051e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051ec:	f000 bd5b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d118      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051fc:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005208:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	0e1b      	lsrs	r3, r3, #24
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	e006      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005214:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	0e1b      	lsrs	r3, r3, #24
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800522a:	f000 bd3c 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005232:	f000 bd38 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800523a:	f000 bd34 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800523e:	bf00      	nop
 8005240:	46020c00 	.word	0x46020c00
 8005244:	00f42400 	.word	0x00f42400
 8005248:	08009e5c 	.word	0x08009e5c
 800524c:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005254:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8005258:	430b      	orrs	r3, r1
 800525a:	d167      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800525c:	4ba0      	ldr	r3, [pc, #640]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800525e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005262:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800526e:	d036      	beq.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005276:	d855      	bhi.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800527e:	d029      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005286:	d84d      	bhi.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800528e:	d013      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005296:	d845      	bhi.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	2b00      	cmp	r3, #0
 800529c:	d015      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a4:	d13e      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe ffb0 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052b4:	f000 bcf7 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fa5f 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052c6:	f000 bcee 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80052ca:	f7fe f987 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80052ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80052d0:	f000 bce9 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80052d4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052da:	f000 bce4 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052de:	4b80      	ldr	r3, [pc, #512]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d118      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052ea:	4b7d      	ldr	r3, [pc, #500]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80052f6:	4b7a      	ldr	r3, [pc, #488]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0e1b      	lsrs	r3, r3, #24
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8005302:	4b77      	ldr	r3, [pc, #476]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	0e1b      	lsrs	r3, r3, #24
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	4a74      	ldr	r2, [pc, #464]	@ (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005318:	f000 bcc5 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005320:	f000 bcc1 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005328:	f000 bcbd 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005330:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005334:	430b      	orrs	r3, r1
 8005336:	d14c      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005338:	4b69      	ldr	r3, [pc, #420]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800533a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005342:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800534a:	f7fe f961 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 800534e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005350:	f000 bca9 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535a:	d104      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800535c:	f7fe f838 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005360:	6378      	str	r0, [r7, #52]	@ 0x34
 8005362:	f000 bca0 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005366:	4b5e      	ldr	r3, [pc, #376]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005372:	d107      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800537a:	d103      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
    {
      frequency = HSI_VALUE;
 800537c:	4b5a      	ldr	r3, [pc, #360]	@ (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005380:	f000 bc91 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005384:	4b56      	ldr	r3, [pc, #344]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b20      	cmp	r3, #32
 800538e:	d11c      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005396:	d118      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005398:	4b51      	ldr	r3, [pc, #324]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80053a4:	4b4e      	ldr	r3, [pc, #312]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	0e1b      	lsrs	r3, r3, #24
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80053b0:	4b4b      	ldr	r3, [pc, #300]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80053b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	0e1b      	lsrs	r3, r3, #24
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	4a49      	ldr	r2, [pc, #292]	@ (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80053c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c6:	f000 bc6e 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ce:	f000 bc6a 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80053d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d6:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80053da:	430b      	orrs	r3, r1
 80053dc:	d14c      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80053e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fe f90e 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80053f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80053f6:	f000 bc56 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005400:	d104      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005402:	f7fd ffe5 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005406:	6378      	str	r0, [r7, #52]	@ 0x34
 8005408:	f000 bc4d 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800540c:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005418:	d107      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005420:	d103      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HSI_VALUE;
 8005422:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
 8005426:	f000 bc3e 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800542a:	4b2d      	ldr	r3, [pc, #180]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d11c      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800543c:	d118      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800543e:	4b28      	ldr	r3, [pc, #160]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800544a:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0e1b      	lsrs	r3, r3, #24
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	e006      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8005456:	4b22      	ldr	r3, [pc, #136]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	0e1b      	lsrs	r3, r3, #24
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	4a1f      	ldr	r2, [pc, #124]	@ (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	637b      	str	r3, [r7, #52]	@ 0x34
 800546c:	f000 bc1b 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34
 8005474:	f000 bc17 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005480:	430b      	orrs	r3, r1
 8005482:	d157      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005484:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800548a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800548e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	2bc0      	cmp	r3, #192	@ 0xc0
 8005494:	d02a      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2bc0      	cmp	r3, #192	@ 0xc0
 800549a:	d848      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	2b80      	cmp	r3, #128	@ 0x80
 80054a0:	d00d      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2b80      	cmp	r3, #128	@ 0x80
 80054a6:	d842      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d011      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 80054b4:	e03b      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80054b6:	f7fe f8d3 	bl	8003660 <HAL_RCC_GetPCLK3Freq>
 80054ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054bc:	e3f3      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ca:	d102      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9a>
        {
          frequency = HSI_VALUE;
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054d0:	e3e9      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054d6:	e3e6      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80054d8:	f7fd ff7a 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80054dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054de:	e3e2      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80054e0:	46020c00 	.word	0x46020c00
 80054e4:	08009e5c 	.word	0x08009e5c
 80054e8:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054ec:	4ba3      	ldr	r3, [pc, #652]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d117      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054f8:	4ba0      	ldr	r3, [pc, #640]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8005504:	4b9d      	ldr	r3, [pc, #628]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	0e1b      	lsrs	r3, r3, #24
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	e006      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8005510:	4b9a      	ldr	r3, [pc, #616]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a98      	ldr	r2, [pc, #608]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005526:	e3be      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800552c:	e3bb      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      default:
      {
        frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005532:	e3b8      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005538:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800553c:	430b      	orrs	r3, r1
 800553e:	d147      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005540:	4b8e      	ldr	r3, [pc, #568]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005546:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800554a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005552:	f7fe f85d 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005556:	6378      	str	r0, [r7, #52]	@ 0x34
 8005558:	e3a5      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005560:	d103      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005562:	f7fd ff35 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005566:	6378      	str	r0, [r7, #52]	@ 0x34
 8005568:	e39d      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800556a:	4b84      	ldr	r3, [pc, #528]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005576:	d106      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800557e:	d102      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
    {
      frequency = HSI_VALUE;
 8005580:	4b80      	ldr	r3, [pc, #512]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34
 8005584:	e38f      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005586:	4b7d      	ldr	r3, [pc, #500]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d11b      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005598:	d117      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800559a:	4b78      	ldr	r3, [pc, #480]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
 80055a6:	4b75      	ldr	r3, [pc, #468]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	e006      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80055b2:	4b72      	ldr	r3, [pc, #456]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	0e1b      	lsrs	r3, r3, #24
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	4a6f      	ldr	r2, [pc, #444]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c8:	e36d      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ce:	e36a      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80055d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80055d8:	430b      	orrs	r3, r1
 80055da:	d164      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80055dc:	4b67      	ldr	r3, [pc, #412]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d120      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055ee:	4b63      	ldr	r3, [pc, #396]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d117      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055fa:	4b60      	ldr	r3, [pc, #384]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xbda>
 8005606:	4b5d      	ldr	r3, [pc, #372]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0e1b      	lsrs	r3, r3, #24
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8005612:	4b5a      	ldr	r3, [pc, #360]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	0e1b      	lsrs	r3, r3, #24
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	4a57      	ldr	r2, [pc, #348]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
 8005628:	e33d      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	@ 0x34
 800562e:	e33a      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005630:	4b52      	ldr	r3, [pc, #328]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800563a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800563e:	d112      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d10e      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005648:	4b4c      	ldr	r3, [pc, #304]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800564a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800564e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005656:	d102      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
      {
        frequency = LSI_VALUE / 128U;
 8005658:	23fa      	movs	r3, #250	@ 0xfa
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800565c:	e323      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 800565e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005664:	e31f      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005666:	4b45      	ldr	r3, [pc, #276]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005672:	d106      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567a:	d102      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
    {
      frequency = HSI_VALUE;
 800567c:	4b41      	ldr	r3, [pc, #260]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	e311      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005682:	4b3e      	ldr	r3, [pc, #248]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d107      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005696:	d103      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = LSE_VALUE;
 8005698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569c:	637b      	str	r3, [r7, #52]	@ 0x34
 800569e:	e302      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a4:	e2ff      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80056a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056aa:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80056ae:	430b      	orrs	r3, r1
 80056b0:	d16a      	bne.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056b2:	4b32      	ldr	r3, [pc, #200]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d120      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056c4:	4b2d      	ldr	r3, [pc, #180]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d117      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056d0:	4b2a      	ldr	r3, [pc, #168]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80056dc:	4b27      	ldr	r3, [pc, #156]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80056e8:	4b24      	ldr	r3, [pc, #144]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	0e1b      	lsrs	r3, r3, #24
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	4a22      	ldr	r2, [pc, #136]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80056f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fe:	e2d2      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
 8005704:	e2cf      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005706:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800570c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005714:	d112      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571c:	d10e      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800571e:	4b17      	ldr	r3, [pc, #92]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572c:	d102      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 800572e:	23fa      	movs	r3, #250	@ 0xfa
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005732:	e2b8      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8005734:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800573a:	e2b4      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800573c:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005748:	d106      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005750:	d102      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 8005752:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
 8005756:	e2a6      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005758:	4b08      	ldr	r3, [pc, #32]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800575a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b02      	cmp	r3, #2
 8005764:	d107      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800576c:	d103      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	e297      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34
 800577a:	e294      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800577c:	46020c00 	.word	0x46020c00
 8005780:	08009e5c 	.word	0x08009e5c
 8005784:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800578c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005790:	430b      	orrs	r3, r1
 8005792:	d147      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005794:	4b9a      	ldr	r3, [pc, #616]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800579a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800579e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80057a6:	f7fd ff33 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80057aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80057ac:	e27b      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80057ae:	4b94      	ldr	r3, [pc, #592]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80057b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057bc:	d112      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057c4:	d10e      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80057c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d4:	d102      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
      {
        frequency = LSI_VALUE / 128U;
 80057d6:	23fa      	movs	r3, #250	@ 0xfa
 80057d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057da:	e264      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 80057dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057e2:	e260      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80057e4:	4b86      	ldr	r3, [pc, #536]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d106      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057f8:	d102      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
    {
      frequency = HSI_VALUE;
 80057fa:	4b82      	ldr	r3, [pc, #520]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	e252      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005800:	4b7f      	ldr	r3, [pc, #508]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	d107      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005814:	d103      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
    {
      frequency = LSE_VALUE;
 8005816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
 800581c:	e243      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
 8005822:	e240      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005828:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800582c:	430b      	orrs	r3, r1
 800582e:	d12d      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005830:	4b73      	ldr	r3, [pc, #460]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005836:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800583c:	4b70      	ldr	r3, [pc, #448]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005848:	d105      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = HSE_VALUE;
 8005850:	4b6d      	ldr	r3, [pc, #436]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
 8005854:	e227      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800585c:	d107      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800585e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fcd4 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	e21b      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005874:	d107      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fe24 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
 8005884:	e20f      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
 800588a:	e20c      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800588c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005890:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005894:	430b      	orrs	r3, r1
 8005896:	d156      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005898:	4b59      	ldr	r3, [pc, #356]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800589a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800589e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80058a2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058aa:	d028      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058b2:	d845      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ba:	d013      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058c2:	d83d      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 80058d2:	e035      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fd feb0 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 80058d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058da:	e1e4      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058dc:	f7fd fd78 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80058e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058e2:	e1e0      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e4:	4b46      	ldr	r3, [pc, #280]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f0:	d102      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
        {
          frequency = HSI_VALUE;
 80058f2:	4b44      	ldr	r3, [pc, #272]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80058f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058f6:	e1d6      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058fc:	e1d3      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058fe:	4b40      	ldr	r3, [pc, #256]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d117      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800590a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
 8005916:	4b3a      	ldr	r3, [pc, #232]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	0e1b      	lsrs	r3, r3, #24
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005922:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	0e1b      	lsrs	r3, r3, #24
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	4a36      	ldr	r2, [pc, #216]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8005932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005938:	e1b5      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800593e:	e1b2      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005944:	e1af      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800594e:	430b      	orrs	r3, r1
 8005950:	d15e      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005952:	4b2b      	ldr	r3, [pc, #172]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005964:	d028      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800596c:	d845      	bhi.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005974:	d013      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800597c:	d83d      	bhi.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598a:	d004      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800598c:	e035      	b.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800598e:	f7fd fe3f 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005992:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005994:	e187      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005996:	f7fd fd1b 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800599a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800599c:	e183      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800599e:	4b18      	ldr	r3, [pc, #96]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
        {
          frequency = HSI_VALUE;
 80059ac:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059b0:	e179      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059b6:	e176      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d117      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	e006      	b.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
 80059dc:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80059de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	4a08      	ldr	r2, [pc, #32]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059f2:	e158      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059f8:	e155      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059fe:	e152      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005a00:	46020c00 	.word	0x46020c00
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	007a1200 	.word	0x007a1200
 8005a0c:	08009e5c 	.word	0x08009e5c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a14:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	d176      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x10d2>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005a1c:	4ba4      	ldr	r3, [pc, #656]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a22:	f003 0318 	and.w	r3, r3, #24
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b18      	cmp	r3, #24
 8005a2c:	d86a      	bhi.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a99 	.word	0x08005a99
 8005a38:	08005b05 	.word	0x08005b05
 8005a3c:	08005b05 	.word	0x08005b05
 8005a40:	08005b05 	.word	0x08005b05
 8005a44:	08005b05 	.word	0x08005b05
 8005a48:	08005b05 	.word	0x08005b05
 8005a4c:	08005b05 	.word	0x08005b05
 8005a50:	08005b05 	.word	0x08005b05
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005b05 	.word	0x08005b05
 8005a5c:	08005b05 	.word	0x08005b05
 8005a60:	08005b05 	.word	0x08005b05
 8005a64:	08005b05 	.word	0x08005b05
 8005a68:	08005b05 	.word	0x08005b05
 8005a6c:	08005b05 	.word	0x08005b05
 8005a70:	08005b05 	.word	0x08005b05
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005b05 	.word	0x08005b05
 8005a7c:	08005b05 	.word	0x08005b05
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005b05 	.word	0x08005b05
 8005a88:	08005b05 	.word	0x08005b05
 8005a8c:	08005b05 	.word	0x08005b05
 8005a90:	08005b05 	.word	0x08005b05
 8005a94:	08005ac3 	.word	0x08005ac3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005a98:	f7fd fde2 	bl	8003660 <HAL_RCC_GetPCLK3Freq>
 8005a9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a9e:	e102      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005aa0:	f7fd fc96 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005aa4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005aa6:	e0fe      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005aa8:	4b81      	ldr	r3, [pc, #516]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab4:	d102      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
        {
          frequency = HSI_VALUE;
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005aba:	e0f4      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ac0:	e0f1      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d117      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ace:	4b78      	ldr	r3, [pc, #480]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8005ada:	4b75      	ldr	r3, [pc, #468]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0e1b      	lsrs	r3, r3, #24
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
 8005ae6:	4b72      	ldr	r3, [pc, #456]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	4a70      	ldr	r2, [pc, #448]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005afc:	e0d3      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b02:	e0d0      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b08:	e0cd      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005b12:	430b      	orrs	r3, r1
 8005b14:	d155      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005b16:	4b66      	ldr	r3, [pc, #408]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b1c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005b20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b28:	d013      	beq.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b30:	d844      	bhi.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b38:	d013      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b40:	d83c      	bhi.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d014      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b4e:	d014      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 8005b50:	e034      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b52:	f107 0318 	add.w	r3, r7, #24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fcb6 	bl	80044c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b60:	e0a1      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fb52 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b70:	e099      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fd fc2d 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005b76:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b78:	e095      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d117      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b86:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
 8005b92:	4b47      	ldr	r3, [pc, #284]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0e1b      	lsrs	r3, r3, #24
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x1174>
 8005b9e:	4b44      	ldr	r3, [pc, #272]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	0e1b      	lsrs	r3, r3, #24
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	4a42      	ldr	r2, [pc, #264]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bb4:	e077      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bba:	e074      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bc0:	e071      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	d131      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005bce:	4b38      	ldr	r3, [pc, #224]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bd8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005bda:	4b35      	ldr	r3, [pc, #212]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d106      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
    {
      frequency = LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bf4:	e057      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c04:	d112      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c0c:	d10e      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c0e:	4b28      	ldr	r3, [pc, #160]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1c:	d102      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
      {
        frequency = LSI_VALUE / 128U;
 8005c1e:	23fa      	movs	r3, #250	@ 0xfa
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c22:	e040      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005c28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c2a:	e03c      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c30:	e039      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c36:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	d131      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x126a>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c44:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c48:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005c4a:	4b19      	ldr	r3, [pc, #100]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c56:	d105      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
    {
      frequency = HSI48_VALUE;
 8005c5e:	4b17      	ldr	r3, [pc, #92]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c62:	e020      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005c64:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c70:	d106      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c78:	d102      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005c7a:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c7e:	e012      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c8c:	d106      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c94:	d102      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
    {
      frequency = HSI_VALUE;
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9a:	e004      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca0:	e001      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3738      	adds	r7, #56	@ 0x38
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	00f42400 	.word	0x00f42400
 8005cb8:	08009e5c 	.word	0x08009e5c
 8005cbc:	02dc6c00 	.word	0x02dc6c00
 8005cc0:	016e3600 	.word	0x016e3600

08005cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005ccc:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a46      	ldr	r2, [pc, #280]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005cd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cd8:	f7fb fd46 	bl	8001768 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cde:	e008      	b.n	8005cf2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ce0:	f7fb fd42 	bl	8001768 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e077      	b.n	8005de2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6811      	ldr	r1, [r2, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	0212      	lsls	r2, r2, #8
 8005d16:	430a      	orrs	r2, r1
 8005d18:	4934      	ldr	r1, [pc, #208]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005d1e:	4b33      	ldr	r3, [pc, #204]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d22:	4b33      	ldr	r3, [pc, #204]	@ (8005df0 <RCCEx_PLL2_Config+0x12c>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6892      	ldr	r2, [r2, #8]
 8005d2a:	3a01      	subs	r2, #1
 8005d2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68d2      	ldr	r2, [r2, #12]
 8005d34:	3a01      	subs	r2, #1
 8005d36:	0252      	lsls	r2, r2, #9
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6912      	ldr	r2, [r2, #16]
 8005d40:	3a01      	subs	r2, #1
 8005d42:	0412      	lsls	r2, r2, #16
 8005d44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d48:	4311      	orrs	r1, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6952      	ldr	r2, [r2, #20]
 8005d4e:	3a01      	subs	r2, #1
 8005d50:	0612      	lsls	r2, r2, #24
 8005d52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d56:	430a      	orrs	r2, r1
 8005d58:	4924      	ldr	r1, [pc, #144]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d5e:	4b23      	ldr	r3, [pc, #140]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	f023 020c 	bic.w	r2, r3, #12
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	4920      	ldr	r1, [pc, #128]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d70:	4b1e      	ldr	r3, [pc, #120]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	491c      	ldr	r1, [pc, #112]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	4a1a      	ldr	r2, [pc, #104]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d84:	f023 0310 	bic.w	r3, r3, #16
 8005d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d8a:	4b18      	ldr	r3, [pc, #96]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	69d2      	ldr	r2, [r2, #28]
 8005d9a:	00d2      	lsls	r2, r2, #3
 8005d9c:	4913      	ldr	r1, [pc, #76]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005da2:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	4a11      	ldr	r2, [pc, #68]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005da8:	f043 0310 	orr.w	r3, r3, #16
 8005dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005dae:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a0e      	ldr	r2, [pc, #56]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005db4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005db8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dba:	f7fb fcd5 	bl	8001768 <HAL_GetTick>
 8005dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005dc2:	f7fb fcd1 	bl	8001768 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e006      	b.n	8005de2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <RCCEx_PLL2_Config+0x128>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0

}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	46020c00 	.word	0x46020c00
 8005df0:	80800000 	.word	0x80800000

08005df4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005dfc:	4b47      	ldr	r3, [pc, #284]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a46      	ldr	r2, [pc, #280]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e08:	f7fb fcae 	bl	8001768 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e10:	f7fb fcaa 	bl	8001768 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e077      	b.n	8005f12 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e22:	4b3e      	ldr	r3, [pc, #248]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6811      	ldr	r1, [r2, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6852      	ldr	r2, [r2, #4]
 8005e42:	3a01      	subs	r2, #1
 8005e44:	0212      	lsls	r2, r2, #8
 8005e46:	430a      	orrs	r2, r1
 8005e48:	4934      	ldr	r1, [pc, #208]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e4e:	4b33      	ldr	r3, [pc, #204]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e52:	4b33      	ldr	r3, [pc, #204]	@ (8005f20 <RCCEx_PLL3_Config+0x12c>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68d2      	ldr	r2, [r2, #12]
 8005e64:	3a01      	subs	r2, #1
 8005e66:	0252      	lsls	r2, r2, #9
 8005e68:	b292      	uxth	r2, r2
 8005e6a:	4311      	orrs	r1, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6912      	ldr	r2, [r2, #16]
 8005e70:	3a01      	subs	r2, #1
 8005e72:	0412      	lsls	r2, r2, #16
 8005e74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6952      	ldr	r2, [r2, #20]
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	0612      	lsls	r2, r2, #24
 8005e82:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005e86:	430a      	orrs	r2, r1
 8005e88:	4924      	ldr	r1, [pc, #144]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f023 020c 	bic.w	r2, r3, #12
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	4920      	ldr	r1, [pc, #128]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	491c      	ldr	r1, [pc, #112]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005eae:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005eb4:	f023 0310 	bic.w	r3, r3, #16
 8005eb8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005eba:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ec2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	69d2      	ldr	r2, [r2, #28]
 8005eca:	00d2      	lsls	r2, r2, #3
 8005ecc:	4913      	ldr	r1, [pc, #76]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005ed2:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	4a11      	ldr	r2, [pc, #68]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ed8:	f043 0310 	orr.w	r3, r3, #16
 8005edc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005ede:	4b0f      	ldr	r3, [pc, #60]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eea:	f7fb fc3d 	bl	8001768 <HAL_GetTick>
 8005eee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ef0:	e008      	b.n	8005f04 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ef2:	f7fb fc39 	bl	8001768 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e006      	b.n	8005f12 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <RCCEx_PLL3_Config+0x128>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0f0      	beq.n	8005ef2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	46020c00 	.word	0x46020c00
 8005f20:	80800000 	.word	0x80800000

08005f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e042      	b.n	8005fbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fb f95b 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2224      	movs	r2, #36	@ 0x24
 8005f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fd7a 	bl	8006a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fbdf 	bl	8006738 <UART_SetConfig>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e01b      	b.n	8005fbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fdf9 	bl	8006bac <UART_CheckIdleState>
 8005fba:	4603      	mov	r3, r0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d17b      	bne.n	80060d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_UART_Transmit+0x26>
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e074      	b.n	80060d8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2221      	movs	r2, #33	@ 0x21
 8005ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffe:	f7fb fbb3 	bl	8001768 <HAL_GetTick>
 8006002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601c:	d108      	bne.n	8006030 <HAL_UART_Transmit+0x6c>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e003      	b.n	8006038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006038:	e030      	b.n	800609c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	2180      	movs	r1, #128	@ 0x80
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fe5b 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e03d      	b.n	80060d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006070:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	3302      	adds	r3, #2
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e007      	b.n	800608a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1c8      	bne.n	800603a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2200      	movs	r2, #0
 80060b0:	2140      	movs	r1, #64	@ 0x40
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fe24 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e006      	b.n	80060d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e000      	b.n	80060d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
  }
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b0ba      	sub	sp, #232	@ 0xe8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006106:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800610a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800610e:	4013      	ands	r3, r2
 8006110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d11b      	bne.n	8006154 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d015      	beq.n	8006154 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 82cb 	beq.w	80066e0 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
      }
      return;
 8006152:	e2c5      	b.n	80066e0 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8123 	beq.w	80063a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800615e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006162:	4b8d      	ldr	r3, [pc, #564]	@ (8006398 <HAL_UART_IRQHandler+0x2b8>)
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800616a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800616e:	4b8b      	ldr	r3, [pc, #556]	@ (800639c <HAL_UART_IRQHandler+0x2bc>)
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8116 	beq.w	80063a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d011      	beq.n	80061a8 <HAL_UART_IRQHandler+0xc8>
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619e:	f043 0201 	orr.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d011      	beq.n	80061d8 <HAL_UART_IRQHandler+0xf8>
 80061b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2202      	movs	r2, #2
 80061c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ce:	f043 0204 	orr.w	r2, r3, #4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <HAL_UART_IRQHandler+0x128>
 80061e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2204      	movs	r2, #4
 80061f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006224:	4b5c      	ldr	r3, [pc, #368]	@ (8006398 <HAL_UART_IRQHandler+0x2b8>)
 8006226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2208      	movs	r2, #8
 8006232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623a:	f043 0208 	orr.w	r2, r3, #8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800624c:	2b00      	cmp	r3, #0
 800624e:	d012      	beq.n	8006276 <HAL_UART_IRQHandler+0x196>
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8231 	beq.w	80066e4 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800629a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ca:	2b40      	cmp	r3, #64	@ 0x40
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d054      	beq.n	8006384 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fd7d 	bl	8006dda <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ea:	2b40      	cmp	r3, #64	@ 0x40
 80062ec:	d146      	bne.n	800637c <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800631a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800631e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1d9      	bne.n	80062ee <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d017      	beq.n	8006374 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800634a:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <HAL_UART_IRQHandler+0x2c0>)
 800634c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006354:	4618      	mov	r0, r3
 8006356:	f7fb fc47 	bl	8001be8 <HAL_DMA_Abort_IT>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d019      	beq.n	8006394 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800636e:	4610      	mov	r0, r2
 8006370:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006372:	e00f      	b.n	8006394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f9c9 	bl	800670c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	e00b      	b.n	8006394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f9c5 	bl	800670c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006382:	e007      	b.n	8006394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f9c1 	bl	800670c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006392:	e1a7      	b.n	80066e4 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	bf00      	nop
    return;
 8006396:	e1a5      	b.n	80066e4 <HAL_UART_IRQHandler+0x604>
 8006398:	10000001 	.word	0x10000001
 800639c:	04000120 	.word	0x04000120
 80063a0:	08006ea7 	.word	0x08006ea7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 8150 	bne.w	800664e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8149 	beq.w	800664e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8142 	beq.w	800664e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b40      	cmp	r3, #64	@ 0x40
 80063de:	f040 80b8 	bne.w	8006552 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8177 	beq.w	80066e8 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006404:	429a      	cmp	r2, r3
 8006406:	f080 816f 	bcs.w	80066e8 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641c:	2b81      	cmp	r3, #129	@ 0x81
 800641e:	f000 8087 	beq.w	8006530 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800643a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800643e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800644c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006450:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006458:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1da      	bne.n	8006422 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800647c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800647e:	f023 0301 	bic.w	r3, r3, #1
 8006482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006490:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006494:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e1      	bne.n	800646c <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064fe:	f023 0310 	bic.w	r3, r3, #16
 8006502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006512:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800651e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e4      	bne.n	80064ee <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb fae0 	bl	8001af0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006542:	b29b      	uxth	r3, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8e8 	bl	8006720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006550:	e0ca      	b.n	80066e8 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800655e:	b29b      	uxth	r3, r3
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80bc 	beq.w	80066ec <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8006574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80b7 	beq.w	80066ec <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800658c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e4      	bne.n	800657e <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	623b      	str	r3, [r7, #32]
   return(result);
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e1      	bne.n	80065b4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	60fb      	str	r3, [r7, #12]
   return(result);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0310 	bic.w	r3, r3, #16
 8006618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69b9      	ldr	r1, [r7, #24]
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	617b      	str	r3, [r7, #20]
   return(result);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e4      	bne.n	8006604 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f86a 	bl	8006720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800664c:	e04e      	b.n	80066ec <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800665a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d105      	bne.n	8006672 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006676:	2b00      	cmp	r3, #0
 8006678:	d03a      	beq.n	80066f0 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
    }
    return;
 8006682:	e035      	b.n	80066f0 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_UART_IRQHandler+0x5c4>
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc18 	bl	8006ed2 <UART_EndTransmit_IT>
    return;
 80066a2:	e026      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_UART_IRQHandler+0x5e4>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc3d 	bl	8006f3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c2:	e016      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <HAL_UART_IRQHandler+0x612>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0c      	bge.n	80066f2 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fc25 	bl	8006f28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066de:	e008      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
      return;
 80066e0:	bf00      	nop
 80066e2:	e006      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
    return;
 80066e4:	bf00      	nop
 80066e6:	e004      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
      return;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
      return;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <HAL_UART_IRQHandler+0x612>
    return;
 80066f0:	bf00      	nop
  }
}
 80066f2:	37e8      	adds	r7, #232	@ 0xe8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800673c:	b094      	sub	sp, #80	@ 0x50
 800673e:	af00      	add	r7, sp, #0
 8006740:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b9b      	ldr	r3, [pc, #620]	@ (80069bc <UART_SetConfig+0x284>)
 800674e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	431a      	orrs	r2, r3
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	431a      	orrs	r2, r3
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	4313      	orrs	r3, r2
 8006766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4994      	ldr	r1, [pc, #592]	@ (80069c0 <UART_SetConfig+0x288>)
 8006770:	4019      	ands	r1, r3
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006778:	430b      	orrs	r3, r1
 800677a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	68d9      	ldr	r1, [r3, #12]
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	ea40 0301 	orr.w	r3, r0, r1
 8006792:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b87      	ldr	r3, [pc, #540]	@ (80069bc <UART_SetConfig+0x284>)
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d009      	beq.n	80067b8 <UART_SetConfig+0x80>
 80067a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b86      	ldr	r3, [pc, #536]	@ (80069c4 <UART_SetConfig+0x28c>)
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d004      	beq.n	80067b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b4:	4313      	orrs	r3, r2
 80067b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80067c2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	f023 000f 	bic.w	r0, r3, #15
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	ea40 0301 	orr.w	r3, r0, r1
 80067e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b76      	ldr	r3, [pc, #472]	@ (80069c8 <UART_SetConfig+0x290>)
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d102      	bne.n	80067f8 <UART_SetConfig+0xc0>
 80067f2:	2301      	movs	r3, #1
 80067f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f6:	e021      	b.n	800683c <UART_SetConfig+0x104>
 80067f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b73      	ldr	r3, [pc, #460]	@ (80069cc <UART_SetConfig+0x294>)
 80067fe:	429a      	cmp	r2, r3
 8006800:	d102      	bne.n	8006808 <UART_SetConfig+0xd0>
 8006802:	2304      	movs	r3, #4
 8006804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006806:	e019      	b.n	800683c <UART_SetConfig+0x104>
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b70      	ldr	r3, [pc, #448]	@ (80069d0 <UART_SetConfig+0x298>)
 800680e:	429a      	cmp	r2, r3
 8006810:	d102      	bne.n	8006818 <UART_SetConfig+0xe0>
 8006812:	2308      	movs	r3, #8
 8006814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006816:	e011      	b.n	800683c <UART_SetConfig+0x104>
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b6d      	ldr	r3, [pc, #436]	@ (80069d4 <UART_SetConfig+0x29c>)
 800681e:	429a      	cmp	r2, r3
 8006820:	d102      	bne.n	8006828 <UART_SetConfig+0xf0>
 8006822:	2310      	movs	r3, #16
 8006824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006826:	e009      	b.n	800683c <UART_SetConfig+0x104>
 8006828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	4b63      	ldr	r3, [pc, #396]	@ (80069bc <UART_SetConfig+0x284>)
 800682e:	429a      	cmp	r2, r3
 8006830:	d102      	bne.n	8006838 <UART_SetConfig+0x100>
 8006832:	2320      	movs	r3, #32
 8006834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006836:	e001      	b.n	800683c <UART_SetConfig+0x104>
 8006838:	2300      	movs	r3, #0
 800683a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b5e      	ldr	r3, [pc, #376]	@ (80069bc <UART_SetConfig+0x284>)
 8006842:	429a      	cmp	r2, r3
 8006844:	d004      	beq.n	8006850 <UART_SetConfig+0x118>
 8006846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b5e      	ldr	r3, [pc, #376]	@ (80069c4 <UART_SetConfig+0x28c>)
 800684c:	429a      	cmp	r2, r3
 800684e:	d172      	bne.n	8006936 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006852:	2200      	movs	r2, #0
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	627a      	str	r2, [r7, #36]	@ 0x24
 8006858:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800685c:	f7fe f8ec 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8006860:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80e7 	beq.w	8006a38 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	4a5a      	ldr	r2, [pc, #360]	@ (80069d8 <UART_SetConfig+0x2a0>)
 8006870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006874:	461a      	mov	r2, r3
 8006876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006878:	fbb3 f3f2 	udiv	r3, r3, r2
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	4413      	add	r3, r2
 8006888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800688a:	429a      	cmp	r2, r3
 800688c:	d305      	bcc.n	800689a <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006896:	429a      	cmp	r2, r3
 8006898:	d903      	bls.n	80068a2 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80068a0:	e048      	b.n	8006934 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068a4:	2200      	movs	r2, #0
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	61fa      	str	r2, [r7, #28]
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	4a4a      	ldr	r2, [pc, #296]	@ (80069d8 <UART_SetConfig+0x2a0>)
 80068b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2200      	movs	r2, #0
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	617a      	str	r2, [r7, #20]
 80068bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068c4:	f7fa f974 	bl	8000bb0 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4610      	mov	r0, r2
 80068ce:	4619      	mov	r1, r3
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	020b      	lsls	r3, r1, #8
 80068da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068de:	0202      	lsls	r2, r0, #8
 80068e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e2:	6849      	ldr	r1, [r1, #4]
 80068e4:	0849      	lsrs	r1, r1, #1
 80068e6:	2000      	movs	r0, #0
 80068e8:	460c      	mov	r4, r1
 80068ea:	4605      	mov	r5, r0
 80068ec:	eb12 0804 	adds.w	r8, r2, r4
 80068f0:	eb43 0905 	adc.w	r9, r3, r5
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	60fa      	str	r2, [r7, #12]
 80068fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7fa f953 	bl	8000bb0 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4613      	mov	r3, r2
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006918:	d308      	bcc.n	800692c <UART_SetConfig+0x1f4>
 800691a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006920:	d204      	bcs.n	800692c <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006928:	60da      	str	r2, [r3, #12]
 800692a:	e003      	b.n	8006934 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006932:	e081      	b.n	8006a38 <UART_SetConfig+0x300>
 8006934:	e080      	b.n	8006a38 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800693e:	d14d      	bne.n	80069dc <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006942:	2200      	movs	r2, #0
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800694c:	f7fe f874 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8006950:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d06f      	beq.n	8006a38 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	4a1e      	ldr	r2, [pc, #120]	@ (80069d8 <UART_SetConfig+0x2a0>)
 800695e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006962:	461a      	mov	r2, r3
 8006964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006966:	fbb3 f3f2 	udiv	r3, r3, r2
 800696a:	005a      	lsls	r2, r3, #1
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	441a      	add	r2, r3
 8006974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d916      	bls.n	80069b2 <UART_SetConfig+0x27a>
 8006984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698a:	d212      	bcs.n	80069b2 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698e:	b29b      	uxth	r3, r3
 8006990:	f023 030f 	bic.w	r3, r3, #15
 8006994:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	b29b      	uxth	r3, r3
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80069a4:	4313      	orrs	r3, r2
 80069a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80069ae:	60da      	str	r2, [r3, #12]
 80069b0:	e042      	b.n	8006a38 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80069b8:	e03e      	b.n	8006a38 <UART_SetConfig+0x300>
 80069ba:	bf00      	nop
 80069bc:	46002400 	.word	0x46002400
 80069c0:	cfff69f3 	.word	0xcfff69f3
 80069c4:	56002400 	.word	0x56002400
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40004800 	.word	0x40004800
 80069d0:	40004c00 	.word	0x40004c00
 80069d4:	40005000 	.word	0x40005000
 80069d8:	08009f1c 	.word	0x08009f1c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80069dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069de:	2200      	movs	r2, #0
 80069e0:	469a      	mov	sl, r3
 80069e2:	4693      	mov	fp, r2
 80069e4:	4650      	mov	r0, sl
 80069e6:	4659      	mov	r1, fp
 80069e8:	f7fe f826 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 80069ec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80069ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d021      	beq.n	8006a38 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <UART_SetConfig+0x32c>)
 80069fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	441a      	add	r2, r3
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1a:	2b0f      	cmp	r3, #15
 8006a1c:	d909      	bls.n	8006a32 <UART_SetConfig+0x2fa>
 8006a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a24:	d205      	bcs.n	8006a32 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e002      	b.n	8006a38 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	2201      	movs	r2, #1
 8006a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	2200      	movs	r2, #0
 8006a52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3750      	adds	r7, #80	@ 0x50
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a62:	bf00      	nop
 8006a64:	08009f1c 	.word	0x08009f1c

08006a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b66:	d10a      	bne.n	8006b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b098      	sub	sp, #96	@ 0x60
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bbc:	f7fa fdd4 	bl	8001768 <HAL_GetTick>
 8006bc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d12f      	bne.n	8006c30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f88e 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d022      	beq.n	8006c30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e063      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d149      	bne.n	8006cd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c46:	2200      	movs	r2, #0
 8006c48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f857 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d03c      	beq.n	8006cd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	623b      	str	r3, [r7, #32]
   return(result);
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e6      	bne.n	8006c58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e012      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3758      	adds	r7, #88	@ 0x58
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	e04f      	b.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d04b      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fa fd25 	bl	8001768 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e04e      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d037      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b80      	cmp	r3, #128	@ 0x80
 8006d46:	d034      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d031      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d110      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2208      	movs	r2, #8
 8006d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f838 	bl	8006dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e029      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d8c:	d111      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f81e 	bl	8006dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00f      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d0a0      	beq.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b095      	sub	sp, #84	@ 0x54
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e6      	bne.n	8006de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e3      	bne.n	8006e14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d118      	bne.n	8006e86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 0310 	bic.w	r3, r3, #16
 8006e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6979      	ldr	r1, [r7, #20]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e9a:	bf00      	nop
 8006e9c:	3754      	adds	r7, #84	@ 0x54
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fc21 	bl	800670c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6979      	ldr	r1, [r7, #20]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fbec 	bl	80066f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f20:	bf00      	nop
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e027      	b.n	8006fb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2224      	movs	r2, #36	@ 0x24
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e02d      	b.n	8007036 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	@ 0x24
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f850 	bl	80070bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007052:	2302      	movs	r3, #2
 8007054:	e02d      	b.n	80070b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2224      	movs	r2, #36	@ 0x24
 8007062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f812 	bl	80070bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d108      	bne.n	80070de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070dc:	e031      	b.n	8007142 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070de:	2308      	movs	r3, #8
 80070e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070e2:	2308      	movs	r3, #8
 80070e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	0e5b      	lsrs	r3, r3, #25
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0f5b      	lsrs	r3, r3, #29
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	7b3a      	ldrb	r2, [r7, #12]
 800710a:	4911      	ldr	r1, [pc, #68]	@ (8007150 <UARTEx_SetNbDataToProcess+0x94>)
 800710c:	5c8a      	ldrb	r2, [r1, r2]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007112:	7b3a      	ldrb	r2, [r7, #12]
 8007114:	490f      	ldr	r1, [pc, #60]	@ (8007154 <UARTEx_SetNbDataToProcess+0x98>)
 8007116:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007118:	fb93 f3f2 	sdiv	r3, r3, r2
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	7b7a      	ldrb	r2, [r7, #13]
 8007128:	4909      	ldr	r1, [pc, #36]	@ (8007150 <UARTEx_SetNbDataToProcess+0x94>)
 800712a:	5c8a      	ldrb	r2, [r1, r2]
 800712c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007130:	7b7a      	ldrb	r2, [r7, #13]
 8007132:	4908      	ldr	r1, [pc, #32]	@ (8007154 <UARTEx_SetNbDataToProcess+0x98>)
 8007134:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007136:	fb93 f3f2 	sdiv	r3, r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	08009f34 	.word	0x08009f34
 8007154:	08009f3c 	.word	0x08009f3c

08007158 <__cvt>:
 8007158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	ec57 6b10 	vmov	r6, r7, d0
 8007160:	2f00      	cmp	r7, #0
 8007162:	460c      	mov	r4, r1
 8007164:	4619      	mov	r1, r3
 8007166:	463b      	mov	r3, r7
 8007168:	bfb4      	ite	lt
 800716a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800716e:	2300      	movge	r3, #0
 8007170:	4691      	mov	r9, r2
 8007172:	bfbf      	itttt	lt
 8007174:	4632      	movlt	r2, r6
 8007176:	461f      	movlt	r7, r3
 8007178:	232d      	movlt	r3, #45	@ 0x2d
 800717a:	4616      	movlt	r6, r2
 800717c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007180:	700b      	strb	r3, [r1, #0]
 8007182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007184:	f023 0820 	bic.w	r8, r3, #32
 8007188:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800718c:	d005      	beq.n	800719a <__cvt+0x42>
 800718e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007192:	d100      	bne.n	8007196 <__cvt+0x3e>
 8007194:	3401      	adds	r4, #1
 8007196:	2102      	movs	r1, #2
 8007198:	e000      	b.n	800719c <__cvt+0x44>
 800719a:	2103      	movs	r1, #3
 800719c:	ab03      	add	r3, sp, #12
 800719e:	4622      	mov	r2, r4
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	ab02      	add	r3, sp, #8
 80071a4:	ec47 6b10 	vmov	d0, r6, r7
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4653      	mov	r3, sl
 80071ac:	f000 fe70 	bl	8007e90 <_dtoa_r>
 80071b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071b4:	4605      	mov	r5, r0
 80071b6:	d119      	bne.n	80071ec <__cvt+0x94>
 80071b8:	f019 0f01 	tst.w	r9, #1
 80071bc:	d00e      	beq.n	80071dc <__cvt+0x84>
 80071be:	eb00 0904 	add.w	r9, r0, r4
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fc81 	bl	8000ad0 <__aeabi_dcmpeq>
 80071ce:	b108      	cbz	r0, 80071d4 <__cvt+0x7c>
 80071d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80071d4:	2230      	movs	r2, #48	@ 0x30
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	454b      	cmp	r3, r9
 80071da:	d31e      	bcc.n	800721a <__cvt+0xc2>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	4628      	mov	r0, r5
 80071e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071e2:	1b5b      	subs	r3, r3, r5
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	b004      	add	sp, #16
 80071e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071f0:	eb00 0904 	add.w	r9, r0, r4
 80071f4:	d1e5      	bne.n	80071c2 <__cvt+0x6a>
 80071f6:	7803      	ldrb	r3, [r0, #0]
 80071f8:	2b30      	cmp	r3, #48	@ 0x30
 80071fa:	d10a      	bne.n	8007212 <__cvt+0xba>
 80071fc:	2200      	movs	r2, #0
 80071fe:	2300      	movs	r3, #0
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fc64 	bl	8000ad0 <__aeabi_dcmpeq>
 8007208:	b918      	cbnz	r0, 8007212 <__cvt+0xba>
 800720a:	f1c4 0401 	rsb	r4, r4, #1
 800720e:	f8ca 4000 	str.w	r4, [sl]
 8007212:	f8da 3000 	ldr.w	r3, [sl]
 8007216:	4499      	add	r9, r3
 8007218:	e7d3      	b.n	80071c2 <__cvt+0x6a>
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	9103      	str	r1, [sp, #12]
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e7d9      	b.n	80071d6 <__cvt+0x7e>

08007222 <__exponent>:
 8007222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007224:	2900      	cmp	r1, #0
 8007226:	7002      	strb	r2, [r0, #0]
 8007228:	bfba      	itte	lt
 800722a:	4249      	neglt	r1, r1
 800722c:	232d      	movlt	r3, #45	@ 0x2d
 800722e:	232b      	movge	r3, #43	@ 0x2b
 8007230:	2909      	cmp	r1, #9
 8007232:	7043      	strb	r3, [r0, #1]
 8007234:	dd28      	ble.n	8007288 <__exponent+0x66>
 8007236:	f10d 0307 	add.w	r3, sp, #7
 800723a:	270a      	movs	r7, #10
 800723c:	461d      	mov	r5, r3
 800723e:	461a      	mov	r2, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	fbb1 f6f7 	udiv	r6, r1, r7
 8007246:	fb07 1416 	mls	r4, r7, r6, r1
 800724a:	3430      	adds	r4, #48	@ 0x30
 800724c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007250:	460c      	mov	r4, r1
 8007252:	4631      	mov	r1, r6
 8007254:	2c63      	cmp	r4, #99	@ 0x63
 8007256:	dcf2      	bgt.n	800723e <__exponent+0x1c>
 8007258:	3130      	adds	r1, #48	@ 0x30
 800725a:	1e94      	subs	r4, r2, #2
 800725c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007260:	1c41      	adds	r1, r0, #1
 8007262:	4623      	mov	r3, r4
 8007264:	42ab      	cmp	r3, r5
 8007266:	d30a      	bcc.n	800727e <__exponent+0x5c>
 8007268:	f10d 0309 	add.w	r3, sp, #9
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	42ac      	cmp	r4, r5
 8007270:	bf88      	it	hi
 8007272:	2300      	movhi	r3, #0
 8007274:	3302      	adds	r3, #2
 8007276:	4403      	add	r3, r0
 8007278:	1a18      	subs	r0, r3, r0
 800727a:	b003      	add	sp, #12
 800727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007282:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007286:	e7ed      	b.n	8007264 <__exponent+0x42>
 8007288:	2330      	movs	r3, #48	@ 0x30
 800728a:	3130      	adds	r1, #48	@ 0x30
 800728c:	7083      	strb	r3, [r0, #2]
 800728e:	1d03      	adds	r3, r0, #4
 8007290:	70c1      	strb	r1, [r0, #3]
 8007292:	e7f1      	b.n	8007278 <__exponent+0x56>

08007294 <_printf_float>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	b08d      	sub	sp, #52	@ 0x34
 800729a:	460c      	mov	r4, r1
 800729c:	4616      	mov	r6, r2
 800729e:	461f      	mov	r7, r3
 80072a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072a4:	4605      	mov	r5, r0
 80072a6:	f000 fcdf 	bl	8007c68 <_localeconv_r>
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	f7f8 ffe2 	bl	8000278 <strlen>
 80072b4:	2300      	movs	r3, #0
 80072b6:	9005      	str	r0, [sp, #20]
 80072b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ba:	f8d8 3000 	ldr.w	r3, [r8]
 80072be:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072c2:	3307      	adds	r3, #7
 80072c4:	f8d4 b000 	ldr.w	fp, [r4]
 80072c8:	f023 0307 	bic.w	r3, r3, #7
 80072cc:	f103 0208 	add.w	r2, r3, #8
 80072d0:	f8c8 2000 	str.w	r2, [r8]
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80072e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	4b9d      	ldr	r3, [pc, #628]	@ (800755c <_printf_float+0x2c8>)
 80072e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80072f0:	f7f9 fc20 	bl	8000b34 <__aeabi_dcmpun>
 80072f4:	bb70      	cbnz	r0, 8007354 <_printf_float+0xc0>
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	4b98      	ldr	r3, [pc, #608]	@ (800755c <_printf_float+0x2c8>)
 80072fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007300:	f7f9 fbfa 	bl	8000af8 <__aeabi_dcmple>
 8007304:	bb30      	cbnz	r0, 8007354 <_printf_float+0xc0>
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4640      	mov	r0, r8
 800730c:	4649      	mov	r1, r9
 800730e:	f7f9 fbe9 	bl	8000ae4 <__aeabi_dcmplt>
 8007312:	b110      	cbz	r0, 800731a <_printf_float+0x86>
 8007314:	232d      	movs	r3, #45	@ 0x2d
 8007316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800731a:	4a91      	ldr	r2, [pc, #580]	@ (8007560 <_printf_float+0x2cc>)
 800731c:	4b91      	ldr	r3, [pc, #580]	@ (8007564 <_printf_float+0x2d0>)
 800731e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007322:	bf94      	ite	ls
 8007324:	4690      	movls	r8, r2
 8007326:	4698      	movhi	r8, r3
 8007328:	2303      	movs	r3, #3
 800732a:	f04f 0900 	mov.w	r9, #0
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	f02b 0304 	bic.w	r3, fp, #4
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	4633      	mov	r3, r6
 8007338:	aa0b      	add	r2, sp, #44	@ 0x2c
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	9700      	str	r7, [sp, #0]
 8007340:	f000 f9d2 	bl	80076e8 <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	f040 808d 	bne.w	8007464 <_printf_float+0x1d0>
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	b00d      	add	sp, #52	@ 0x34
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f9 fbea 	bl	8000b34 <__aeabi_dcmpun>
 8007360:	b140      	cbz	r0, 8007374 <_printf_float+0xe0>
 8007362:	464b      	mov	r3, r9
 8007364:	4a80      	ldr	r2, [pc, #512]	@ (8007568 <_printf_float+0x2d4>)
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfbc      	itt	lt
 800736a:	232d      	movlt	r3, #45	@ 0x2d
 800736c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007370:	4b7e      	ldr	r3, [pc, #504]	@ (800756c <_printf_float+0x2d8>)
 8007372:	e7d4      	b.n	800731e <_printf_float+0x8a>
 8007374:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	9206      	str	r2, [sp, #24]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	d13b      	bne.n	80073f8 <_printf_float+0x164>
 8007380:	2306      	movs	r3, #6
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007388:	2300      	movs	r3, #0
 800738a:	4628      	mov	r0, r5
 800738c:	6022      	str	r2, [r4, #0]
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	ab0a      	add	r3, sp, #40	@ 0x28
 8007392:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007396:	ab09      	add	r3, sp, #36	@ 0x24
 8007398:	ec49 8b10 	vmov	d0, r8, r9
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073a2:	6861      	ldr	r1, [r4, #4]
 80073a4:	f7ff fed8 	bl	8007158 <__cvt>
 80073a8:	9b06      	ldr	r3, [sp, #24]
 80073aa:	4680      	mov	r8, r0
 80073ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073ae:	2b47      	cmp	r3, #71	@ 0x47
 80073b0:	d129      	bne.n	8007406 <_printf_float+0x172>
 80073b2:	1cc8      	adds	r0, r1, #3
 80073b4:	db02      	blt.n	80073bc <_printf_float+0x128>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	4299      	cmp	r1, r3
 80073ba:	dd41      	ble.n	8007440 <_printf_float+0x1ac>
 80073bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80073c0:	fa5f fa8a 	uxtb.w	sl, sl
 80073c4:	3901      	subs	r1, #1
 80073c6:	4652      	mov	r2, sl
 80073c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80073cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80073ce:	f7ff ff28 	bl	8007222 <__exponent>
 80073d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073d4:	4681      	mov	r9, r0
 80073d6:	1813      	adds	r3, r2, r0
 80073d8:	2a01      	cmp	r2, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	dc02      	bgt.n	80073e4 <_printf_float+0x150>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	07d2      	lsls	r2, r2, #31
 80073e2:	d501      	bpl.n	80073e8 <_printf_float+0x154>
 80073e4:	3301      	adds	r3, #1
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0a2      	beq.n	8007336 <_printf_float+0xa2>
 80073f0:	232d      	movs	r3, #45	@ 0x2d
 80073f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f6:	e79e      	b.n	8007336 <_printf_float+0xa2>
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	2a47      	cmp	r2, #71	@ 0x47
 80073fc:	d1c2      	bne.n	8007384 <_printf_float+0xf0>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1c0      	bne.n	8007384 <_printf_float+0xf0>
 8007402:	2301      	movs	r3, #1
 8007404:	e7bd      	b.n	8007382 <_printf_float+0xee>
 8007406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800740a:	d9db      	bls.n	80073c4 <_printf_float+0x130>
 800740c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007410:	d118      	bne.n	8007444 <_printf_float+0x1b0>
 8007412:	2900      	cmp	r1, #0
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	dd0b      	ble.n	8007430 <_printf_float+0x19c>
 8007418:	6121      	str	r1, [r4, #16]
 800741a:	b913      	cbnz	r3, 8007422 <_printf_float+0x18e>
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	07d0      	lsls	r0, r2, #31
 8007420:	d502      	bpl.n	8007428 <_printf_float+0x194>
 8007422:	3301      	adds	r3, #1
 8007424:	440b      	add	r3, r1
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	f04f 0900 	mov.w	r9, #0
 800742c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800742e:	e7db      	b.n	80073e8 <_printf_float+0x154>
 8007430:	b913      	cbnz	r3, 8007438 <_printf_float+0x1a4>
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	07d2      	lsls	r2, r2, #31
 8007436:	d501      	bpl.n	800743c <_printf_float+0x1a8>
 8007438:	3302      	adds	r3, #2
 800743a:	e7f4      	b.n	8007426 <_printf_float+0x192>
 800743c:	2301      	movs	r3, #1
 800743e:	e7f2      	b.n	8007426 <_printf_float+0x192>
 8007440:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007446:	4299      	cmp	r1, r3
 8007448:	db05      	blt.n	8007456 <_printf_float+0x1c2>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	6121      	str	r1, [r4, #16]
 800744e:	07d8      	lsls	r0, r3, #31
 8007450:	d5ea      	bpl.n	8007428 <_printf_float+0x194>
 8007452:	1c4b      	adds	r3, r1, #1
 8007454:	e7e7      	b.n	8007426 <_printf_float+0x192>
 8007456:	2900      	cmp	r1, #0
 8007458:	bfd4      	ite	le
 800745a:	f1c1 0202 	rsble	r2, r1, #2
 800745e:	2201      	movgt	r2, #1
 8007460:	4413      	add	r3, r2
 8007462:	e7e0      	b.n	8007426 <_printf_float+0x192>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	055a      	lsls	r2, r3, #21
 8007468:	d407      	bmi.n	800747a <_printf_float+0x1e6>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	4642      	mov	r2, r8
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	d12b      	bne.n	80074d0 <_printf_float+0x23c>
 8007478:	e767      	b.n	800734a <_printf_float+0xb6>
 800747a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800747e:	f240 80dd 	bls.w	800763c <_printf_float+0x3a8>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800748a:	f7f9 fb21 	bl	8000ad0 <__aeabi_dcmpeq>
 800748e:	2800      	cmp	r0, #0
 8007490:	d033      	beq.n	80074fa <_printf_float+0x266>
 8007492:	2301      	movs	r3, #1
 8007494:	4a36      	ldr	r2, [pc, #216]	@ (8007570 <_printf_float+0x2dc>)
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f af54 	beq.w	800734a <_printf_float+0xb6>
 80074a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074a6:	4543      	cmp	r3, r8
 80074a8:	db02      	blt.n	80074b0 <_printf_float+0x21c>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	07d8      	lsls	r0, r3, #31
 80074ae:	d50f      	bpl.n	80074d0 <_printf_float+0x23c>
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b8:	47b8      	blx	r7
 80074ba:	3001      	adds	r0, #1
 80074bc:	f43f af45 	beq.w	800734a <_printf_float+0xb6>
 80074c0:	f04f 0900 	mov.w	r9, #0
 80074c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80074c8:	f104 0a1a 	add.w	sl, r4, #26
 80074cc:	45c8      	cmp	r8, r9
 80074ce:	dc09      	bgt.n	80074e4 <_printf_float+0x250>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	f100 8103 	bmi.w	80076de <_printf_float+0x44a>
 80074d8:	68e0      	ldr	r0, [r4, #12]
 80074da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074dc:	4298      	cmp	r0, r3
 80074de:	bfb8      	it	lt
 80074e0:	4618      	movlt	r0, r3
 80074e2:	e734      	b.n	800734e <_printf_float+0xba>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4652      	mov	r2, sl
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f af2b 	beq.w	800734a <_printf_float+0xb6>
 80074f4:	f109 0901 	add.w	r9, r9, #1
 80074f8:	e7e8      	b.n	80074cc <_printf_float+0x238>
 80074fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dc39      	bgt.n	8007574 <_printf_float+0x2e0>
 8007500:	2301      	movs	r3, #1
 8007502:	4a1b      	ldr	r2, [pc, #108]	@ (8007570 <_printf_float+0x2dc>)
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af1d 	beq.w	800734a <_printf_float+0xb6>
 8007510:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007514:	ea59 0303 	orrs.w	r3, r9, r3
 8007518:	d102      	bne.n	8007520 <_printf_float+0x28c>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d5d7      	bpl.n	80074d0 <_printf_float+0x23c>
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af0d 	beq.w	800734a <_printf_float+0xb6>
 8007530:	f04f 0a00 	mov.w	sl, #0
 8007534:	f104 0b1a 	add.w	fp, r4, #26
 8007538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753a:	425b      	negs	r3, r3
 800753c:	4553      	cmp	r3, sl
 800753e:	dc01      	bgt.n	8007544 <_printf_float+0x2b0>
 8007540:	464b      	mov	r3, r9
 8007542:	e793      	b.n	800746c <_printf_float+0x1d8>
 8007544:	2301      	movs	r3, #1
 8007546:	465a      	mov	r2, fp
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f aefb 	beq.w	800734a <_printf_float+0xb6>
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	e7ee      	b.n	8007538 <_printf_float+0x2a4>
 800755a:	bf00      	nop
 800755c:	7fefffff 	.word	0x7fefffff
 8007560:	08009f44 	.word	0x08009f44
 8007564:	08009f48 	.word	0x08009f48
 8007568:	08009f4c 	.word	0x08009f4c
 800756c:	08009f50 	.word	0x08009f50
 8007570:	08009f54 	.word	0x08009f54
 8007574:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800757a:	4553      	cmp	r3, sl
 800757c:	bfa8      	it	ge
 800757e:	4653      	movge	r3, sl
 8007580:	2b00      	cmp	r3, #0
 8007582:	4699      	mov	r9, r3
 8007584:	dc36      	bgt.n	80075f4 <_printf_float+0x360>
 8007586:	f04f 0b00 	mov.w	fp, #0
 800758a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800758e:	f104 021a 	add.w	r2, r4, #26
 8007592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	eba3 0309 	sub.w	r3, r3, r9
 800759a:	455b      	cmp	r3, fp
 800759c:	dc31      	bgt.n	8007602 <_printf_float+0x36e>
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	459a      	cmp	sl, r3
 80075a2:	dc3a      	bgt.n	800761a <_printf_float+0x386>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	07da      	lsls	r2, r3, #31
 80075a8:	d437      	bmi.n	800761a <_printf_float+0x386>
 80075aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ac:	ebaa 0903 	sub.w	r9, sl, r3
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	ebaa 0303 	sub.w	r3, sl, r3
 80075b6:	4599      	cmp	r9, r3
 80075b8:	bfa8      	it	ge
 80075ba:	4699      	movge	r9, r3
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	dc33      	bgt.n	800762a <_printf_float+0x396>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ca:	f104 0b1a 	add.w	fp, r4, #26
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	ebaa 0303 	sub.w	r3, sl, r3
 80075d4:	eba3 0309 	sub.w	r3, r3, r9
 80075d8:	4543      	cmp	r3, r8
 80075da:	f77f af79 	ble.w	80074d0 <_printf_float+0x23c>
 80075de:	2301      	movs	r3, #1
 80075e0:	465a      	mov	r2, fp
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f aeae 	beq.w	800734a <_printf_float+0xb6>
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	e7ec      	b.n	80075ce <_printf_float+0x33a>
 80075f4:	4642      	mov	r2, r8
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d1c2      	bne.n	8007586 <_printf_float+0x2f2>
 8007600:	e6a3      	b.n	800734a <_printf_float+0xb6>
 8007602:	2301      	movs	r3, #1
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	9206      	str	r2, [sp, #24]
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae9c 	beq.w	800734a <_printf_float+0xb6>
 8007612:	f10b 0b01 	add.w	fp, fp, #1
 8007616:	9a06      	ldr	r2, [sp, #24]
 8007618:	e7bb      	b.n	8007592 <_printf_float+0x2fe>
 800761a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d1c0      	bne.n	80075aa <_printf_float+0x316>
 8007628:	e68f      	b.n	800734a <_printf_float+0xb6>
 800762a:	9a06      	ldr	r2, [sp, #24]
 800762c:	464b      	mov	r3, r9
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	4442      	add	r2, r8
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	d1c3      	bne.n	80075c2 <_printf_float+0x32e>
 800763a:	e686      	b.n	800734a <_printf_float+0xb6>
 800763c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007640:	f1ba 0f01 	cmp.w	sl, #1
 8007644:	dc01      	bgt.n	800764a <_printf_float+0x3b6>
 8007646:	07db      	lsls	r3, r3, #31
 8007648:	d536      	bpl.n	80076b8 <_printf_float+0x424>
 800764a:	2301      	movs	r3, #1
 800764c:	4642      	mov	r2, r8
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae78 	beq.w	800734a <_printf_float+0xb6>
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f ae70 	beq.w	800734a <_printf_float+0xb6>
 800766a:	2200      	movs	r2, #0
 800766c:	2300      	movs	r3, #0
 800766e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007672:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007676:	f7f9 fa2b 	bl	8000ad0 <__aeabi_dcmpeq>
 800767a:	b9c0      	cbnz	r0, 80076ae <_printf_float+0x41a>
 800767c:	4653      	mov	r3, sl
 800767e:	f108 0201 	add.w	r2, r8, #1
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	d10c      	bne.n	80076a6 <_printf_float+0x412>
 800768c:	e65d      	b.n	800734a <_printf_float+0xb6>
 800768e:	2301      	movs	r3, #1
 8007690:	465a      	mov	r2, fp
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f ae56 	beq.w	800734a <_printf_float+0xb6>
 800769e:	f108 0801 	add.w	r8, r8, #1
 80076a2:	45d0      	cmp	r8, sl
 80076a4:	dbf3      	blt.n	800768e <_printf_float+0x3fa>
 80076a6:	464b      	mov	r3, r9
 80076a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076ac:	e6df      	b.n	800746e <_printf_float+0x1da>
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	f104 0b1a 	add.w	fp, r4, #26
 80076b6:	e7f4      	b.n	80076a2 <_printf_float+0x40e>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4642      	mov	r2, r8
 80076bc:	e7e1      	b.n	8007682 <_printf_float+0x3ee>
 80076be:	2301      	movs	r3, #1
 80076c0:	464a      	mov	r2, r9
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f ae3e 	beq.w	800734a <_printf_float+0xb6>
 80076ce:	f108 0801 	add.w	r8, r8, #1
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076d6:	1a5b      	subs	r3, r3, r1
 80076d8:	4543      	cmp	r3, r8
 80076da:	dcf0      	bgt.n	80076be <_printf_float+0x42a>
 80076dc:	e6fc      	b.n	80074d8 <_printf_float+0x244>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	f104 0919 	add.w	r9, r4, #25
 80076e6:	e7f4      	b.n	80076d2 <_printf_float+0x43e>

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	4607      	mov	r7, r0
 80076f4:	690b      	ldr	r3, [r1, #16]
 80076f6:	460c      	mov	r4, r1
 80076f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	bfb8      	it	lt
 8007700:	4613      	movlt	r3, r2
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc2b      	bgt.n	8007788 <_printf_common+0xa0>
 8007730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	3b00      	subs	r3, #0
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d430      	bmi.n	80077a2 <_printf_common+0xba>
 8007740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007744:	4641      	mov	r1, r8
 8007746:	4638      	mov	r0, r7
 8007748:	47c8      	blx	r9
 800774a:	3001      	adds	r0, #1
 800774c:	d023      	beq.n	8007796 <_printf_common+0xae>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	341a      	adds	r4, #26
 8007752:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007756:	f003 0306 	and.w	r3, r3, #6
 800775a:	2b04      	cmp	r3, #4
 800775c:	bf0a      	itet	eq
 800775e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007762:	2500      	movne	r5, #0
 8007764:	6833      	ldreq	r3, [r6, #0]
 8007766:	f04f 0600 	mov.w	r6, #0
 800776a:	bf08      	it	eq
 800776c:	1aed      	subeq	r5, r5, r3
 800776e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007772:	bf08      	it	eq
 8007774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007778:	4293      	cmp	r3, r2
 800777a:	bfc4      	itt	gt
 800777c:	1a9b      	subgt	r3, r3, r2
 800777e:	18ed      	addgt	r5, r5, r3
 8007780:	42b5      	cmp	r5, r6
 8007782:	d11a      	bne.n	80077ba <_printf_common+0xd2>
 8007784:	2000      	movs	r0, #0
 8007786:	e008      	b.n	800779a <_printf_common+0xb2>
 8007788:	2301      	movs	r3, #1
 800778a:	4652      	mov	r2, sl
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d103      	bne.n	800779e <_printf_common+0xb6>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	3501      	adds	r5, #1
 80077a0:	e7c1      	b.n	8007726 <_printf_common+0x3e>
 80077a2:	18e1      	adds	r1, r4, r3
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	2030      	movs	r0, #48	@ 0x30
 80077a8:	3302      	adds	r3, #2
 80077aa:	4422      	add	r2, r4
 80077ac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077b8:	e7c2      	b.n	8007740 <_printf_common+0x58>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4622      	mov	r2, r4
 80077be:	4641      	mov	r1, r8
 80077c0:	4638      	mov	r0, r7
 80077c2:	47c8      	blx	r9
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0e6      	beq.n	8007796 <_printf_common+0xae>
 80077c8:	3601      	adds	r6, #1
 80077ca:	e7d9      	b.n	8007780 <_printf_common+0x98>

080077cc <_printf_i>:
 80077cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	7e0f      	ldrb	r7, [r1, #24]
 80077d2:	4691      	mov	r9, r2
 80077d4:	4680      	mov	r8, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	2f78      	cmp	r7, #120	@ 0x78
 80077da:	469a      	mov	sl, r3
 80077dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077e2:	d807      	bhi.n	80077f4 <_printf_i+0x28>
 80077e4:	2f62      	cmp	r7, #98	@ 0x62
 80077e6:	d80a      	bhi.n	80077fe <_printf_i+0x32>
 80077e8:	2f00      	cmp	r7, #0
 80077ea:	f000 80d2 	beq.w	8007992 <_printf_i+0x1c6>
 80077ee:	2f58      	cmp	r7, #88	@ 0x58
 80077f0:	f000 80b9 	beq.w	8007966 <_printf_i+0x19a>
 80077f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077fc:	e03a      	b.n	8007874 <_printf_i+0xa8>
 80077fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007802:	2b15      	cmp	r3, #21
 8007804:	d8f6      	bhi.n	80077f4 <_printf_i+0x28>
 8007806:	a101      	add	r1, pc, #4	@ (adr r1, 800780c <_printf_i+0x40>)
 8007808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800780c:	08007865 	.word	0x08007865
 8007810:	08007879 	.word	0x08007879
 8007814:	080077f5 	.word	0x080077f5
 8007818:	080077f5 	.word	0x080077f5
 800781c:	080077f5 	.word	0x080077f5
 8007820:	080077f5 	.word	0x080077f5
 8007824:	08007879 	.word	0x08007879
 8007828:	080077f5 	.word	0x080077f5
 800782c:	080077f5 	.word	0x080077f5
 8007830:	080077f5 	.word	0x080077f5
 8007834:	080077f5 	.word	0x080077f5
 8007838:	08007979 	.word	0x08007979
 800783c:	080078a3 	.word	0x080078a3
 8007840:	08007933 	.word	0x08007933
 8007844:	080077f5 	.word	0x080077f5
 8007848:	080077f5 	.word	0x080077f5
 800784c:	0800799b 	.word	0x0800799b
 8007850:	080077f5 	.word	0x080077f5
 8007854:	080078a3 	.word	0x080078a3
 8007858:	080077f5 	.word	0x080077f5
 800785c:	080077f5 	.word	0x080077f5
 8007860:	0800793b 	.word	0x0800793b
 8007864:	6833      	ldr	r3, [r6, #0]
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6032      	str	r2, [r6, #0]
 800786c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007870:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007874:	2301      	movs	r3, #1
 8007876:	e09d      	b.n	80079b4 <_printf_i+0x1e8>
 8007878:	6833      	ldr	r3, [r6, #0]
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	1d19      	adds	r1, r3, #4
 800787e:	6031      	str	r1, [r6, #0]
 8007880:	0606      	lsls	r6, r0, #24
 8007882:	d501      	bpl.n	8007888 <_printf_i+0xbc>
 8007884:	681d      	ldr	r5, [r3, #0]
 8007886:	e003      	b.n	8007890 <_printf_i+0xc4>
 8007888:	0645      	lsls	r5, r0, #25
 800788a:	d5fb      	bpl.n	8007884 <_printf_i+0xb8>
 800788c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007890:	2d00      	cmp	r5, #0
 8007892:	da03      	bge.n	800789c <_printf_i+0xd0>
 8007894:	232d      	movs	r3, #45	@ 0x2d
 8007896:	426d      	negs	r5, r5
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800789c:	4859      	ldr	r0, [pc, #356]	@ (8007a04 <_printf_i+0x238>)
 800789e:	230a      	movs	r3, #10
 80078a0:	e011      	b.n	80078c6 <_printf_i+0xfa>
 80078a2:	6821      	ldr	r1, [r4, #0]
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	0608      	lsls	r0, r1, #24
 80078a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078ac:	d402      	bmi.n	80078b4 <_printf_i+0xe8>
 80078ae:	0649      	lsls	r1, r1, #25
 80078b0:	bf48      	it	mi
 80078b2:	b2ad      	uxthmi	r5, r5
 80078b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078b6:	6033      	str	r3, [r6, #0]
 80078b8:	4852      	ldr	r0, [pc, #328]	@ (8007a04 <_printf_i+0x238>)
 80078ba:	bf14      	ite	ne
 80078bc:	230a      	movne	r3, #10
 80078be:	2308      	moveq	r3, #8
 80078c0:	2100      	movs	r1, #0
 80078c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078c6:	6866      	ldr	r6, [r4, #4]
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	60a6      	str	r6, [r4, #8]
 80078cc:	bfa2      	ittt	ge
 80078ce:	6821      	ldrge	r1, [r4, #0]
 80078d0:	f021 0104 	bicge.w	r1, r1, #4
 80078d4:	6021      	strge	r1, [r4, #0]
 80078d6:	b90d      	cbnz	r5, 80078dc <_printf_i+0x110>
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d04b      	beq.n	8007974 <_printf_i+0x1a8>
 80078dc:	4616      	mov	r6, r2
 80078de:	fbb5 f1f3 	udiv	r1, r5, r3
 80078e2:	fb03 5711 	mls	r7, r3, r1, r5
 80078e6:	5dc7      	ldrb	r7, [r0, r7]
 80078e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078ec:	462f      	mov	r7, r5
 80078ee:	460d      	mov	r5, r1
 80078f0:	42bb      	cmp	r3, r7
 80078f2:	d9f4      	bls.n	80078de <_printf_i+0x112>
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10b      	bne.n	8007910 <_printf_i+0x144>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	07df      	lsls	r7, r3, #31
 80078fc:	d508      	bpl.n	8007910 <_printf_i+0x144>
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	4299      	cmp	r1, r3
 8007904:	bfde      	ittt	le
 8007906:	2330      	movle	r3, #48	@ 0x30
 8007908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800790c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007910:	1b92      	subs	r2, r2, r6
 8007912:	6122      	str	r2, [r4, #16]
 8007914:	464b      	mov	r3, r9
 8007916:	aa03      	add	r2, sp, #12
 8007918:	4621      	mov	r1, r4
 800791a:	4640      	mov	r0, r8
 800791c:	f8cd a000 	str.w	sl, [sp]
 8007920:	f7ff fee2 	bl	80076e8 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	d14a      	bne.n	80079be <_printf_i+0x1f2>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	b004      	add	sp, #16
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	f043 0320 	orr.w	r3, r3, #32
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	2778      	movs	r7, #120	@ 0x78
 800793c:	4832      	ldr	r0, [pc, #200]	@ (8007a08 <_printf_i+0x23c>)
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007944:	061f      	lsls	r7, r3, #24
 8007946:	6831      	ldr	r1, [r6, #0]
 8007948:	f851 5b04 	ldr.w	r5, [r1], #4
 800794c:	d402      	bmi.n	8007954 <_printf_i+0x188>
 800794e:	065f      	lsls	r7, r3, #25
 8007950:	bf48      	it	mi
 8007952:	b2ad      	uxthmi	r5, r5
 8007954:	6031      	str	r1, [r6, #0]
 8007956:	07d9      	lsls	r1, r3, #31
 8007958:	bf44      	itt	mi
 800795a:	f043 0320 	orrmi.w	r3, r3, #32
 800795e:	6023      	strmi	r3, [r4, #0]
 8007960:	b11d      	cbz	r5, 800796a <_printf_i+0x19e>
 8007962:	2310      	movs	r3, #16
 8007964:	e7ac      	b.n	80078c0 <_printf_i+0xf4>
 8007966:	4827      	ldr	r0, [pc, #156]	@ (8007a04 <_printf_i+0x238>)
 8007968:	e7e9      	b.n	800793e <_printf_i+0x172>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f023 0320 	bic.w	r3, r3, #32
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	e7f6      	b.n	8007962 <_printf_i+0x196>
 8007974:	4616      	mov	r6, r2
 8007976:	e7bd      	b.n	80078f4 <_printf_i+0x128>
 8007978:	6833      	ldr	r3, [r6, #0]
 800797a:	6825      	ldr	r5, [r4, #0]
 800797c:	1d18      	adds	r0, r3, #4
 800797e:	6961      	ldr	r1, [r4, #20]
 8007980:	6030      	str	r0, [r6, #0]
 8007982:	062e      	lsls	r6, r5, #24
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	d501      	bpl.n	800798c <_printf_i+0x1c0>
 8007988:	6019      	str	r1, [r3, #0]
 800798a:	e002      	b.n	8007992 <_printf_i+0x1c6>
 800798c:	0668      	lsls	r0, r5, #25
 800798e:	d5fb      	bpl.n	8007988 <_printf_i+0x1bc>
 8007990:	8019      	strh	r1, [r3, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	4616      	mov	r6, r2
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	e7bc      	b.n	8007914 <_printf_i+0x148>
 800799a:	6833      	ldr	r3, [r6, #0]
 800799c:	2100      	movs	r1, #0
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	6032      	str	r2, [r6, #0]
 80079a2:	681e      	ldr	r6, [r3, #0]
 80079a4:	6862      	ldr	r2, [r4, #4]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f9d5 	bl	8007d56 <memchr>
 80079ac:	b108      	cbz	r0, 80079b2 <_printf_i+0x1e6>
 80079ae:	1b80      	subs	r0, r0, r6
 80079b0:	6060      	str	r0, [r4, #4]
 80079b2:	6863      	ldr	r3, [r4, #4]
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	2300      	movs	r3, #0
 80079b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079bc:	e7aa      	b.n	8007914 <_printf_i+0x148>
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	4632      	mov	r2, r6
 80079c2:	4649      	mov	r1, r9
 80079c4:	4640      	mov	r0, r8
 80079c6:	47d0      	blx	sl
 80079c8:	3001      	adds	r0, #1
 80079ca:	d0ad      	beq.n	8007928 <_printf_i+0x15c>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	079b      	lsls	r3, r3, #30
 80079d0:	d413      	bmi.n	80079fa <_printf_i+0x22e>
 80079d2:	68e0      	ldr	r0, [r4, #12]
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	4298      	cmp	r0, r3
 80079d8:	bfb8      	it	lt
 80079da:	4618      	movlt	r0, r3
 80079dc:	e7a6      	b.n	800792c <_printf_i+0x160>
 80079de:	2301      	movs	r3, #1
 80079e0:	4632      	mov	r2, r6
 80079e2:	4649      	mov	r1, r9
 80079e4:	4640      	mov	r0, r8
 80079e6:	47d0      	blx	sl
 80079e8:	3001      	adds	r0, #1
 80079ea:	d09d      	beq.n	8007928 <_printf_i+0x15c>
 80079ec:	3501      	adds	r5, #1
 80079ee:	68e3      	ldr	r3, [r4, #12]
 80079f0:	9903      	ldr	r1, [sp, #12]
 80079f2:	1a5b      	subs	r3, r3, r1
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	dcf2      	bgt.n	80079de <_printf_i+0x212>
 80079f8:	e7eb      	b.n	80079d2 <_printf_i+0x206>
 80079fa:	2500      	movs	r5, #0
 80079fc:	f104 0619 	add.w	r6, r4, #25
 8007a00:	e7f5      	b.n	80079ee <_printf_i+0x222>
 8007a02:	bf00      	nop
 8007a04:	08009f56 	.word	0x08009f56
 8007a08:	08009f67 	.word	0x08009f67

08007a0c <std>:
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	4604      	mov	r4, r0
 8007a12:	6083      	str	r3, [r0, #8]
 8007a14:	8181      	strh	r1, [r0, #12]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a1a:	81c2      	strh	r2, [r0, #14]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	6183      	str	r3, [r0, #24]
 8007a20:	e9c0 3300 	strd	r3, r3, [r0]
 8007a24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a28:	305c      	adds	r0, #92	@ 0x5c
 8007a2a:	f000 f914 	bl	8007c56 <memset>
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <std+0x58>)
 8007a30:	6224      	str	r4, [r4, #32]
 8007a32:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a34:	4b0c      	ldr	r3, [pc, #48]	@ (8007a68 <std+0x5c>)
 8007a36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a38:	4b0c      	ldr	r3, [pc, #48]	@ (8007a6c <std+0x60>)
 8007a3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <std+0x64>)
 8007a3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a40:	4b0c      	ldr	r3, [pc, #48]	@ (8007a74 <std+0x68>)
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d006      	beq.n	8007a54 <std+0x48>
 8007a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a4a:	4294      	cmp	r4, r2
 8007a4c:	d002      	beq.n	8007a54 <std+0x48>
 8007a4e:	33d0      	adds	r3, #208	@ 0xd0
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d105      	bne.n	8007a60 <std+0x54>
 8007a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5c:	f000 b978 	b.w	8007d50 <__retarget_lock_init_recursive>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	bf00      	nop
 8007a64:	08007bd1 	.word	0x08007bd1
 8007a68:	08007bf3 	.word	0x08007bf3
 8007a6c:	08007c2b 	.word	0x08007c2b
 8007a70:	08007c4f 	.word	0x08007c4f
 8007a74:	200002b0 	.word	0x200002b0

08007a78 <stdio_exit_handler>:
 8007a78:	4a02      	ldr	r2, [pc, #8]	@ (8007a84 <stdio_exit_handler+0xc>)
 8007a7a:	4903      	ldr	r1, [pc, #12]	@ (8007a88 <stdio_exit_handler+0x10>)
 8007a7c:	4803      	ldr	r0, [pc, #12]	@ (8007a8c <stdio_exit_handler+0x14>)
 8007a7e:	f000 b869 	b.w	8007b54 <_fwalk_sglue>
 8007a82:	bf00      	nop
 8007a84:	2000002c 	.word	0x2000002c
 8007a88:	080096e1 	.word	0x080096e1
 8007a8c:	2000003c 	.word	0x2000003c

08007a90 <cleanup_stdio>:
 8007a90:	6841      	ldr	r1, [r0, #4]
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <cleanup_stdio+0x34>)
 8007a94:	4299      	cmp	r1, r3
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d001      	beq.n	8007aa0 <cleanup_stdio+0x10>
 8007a9c:	f001 fe20 	bl	80096e0 <_fflush_r>
 8007aa0:	68a1      	ldr	r1, [r4, #8]
 8007aa2:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <cleanup_stdio+0x38>)
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	d002      	beq.n	8007aae <cleanup_stdio+0x1e>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f001 fe19 	bl	80096e0 <_fflush_r>
 8007aae:	68e1      	ldr	r1, [r4, #12]
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <cleanup_stdio+0x3c>)
 8007ab2:	4299      	cmp	r1, r3
 8007ab4:	d004      	beq.n	8007ac0 <cleanup_stdio+0x30>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abc:	f001 be10 	b.w	80096e0 <_fflush_r>
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200002b0 	.word	0x200002b0
 8007ac8:	20000318 	.word	0x20000318
 8007acc:	20000380 	.word	0x20000380

08007ad0 <global_stdio_init.part.0>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <global_stdio_init.part.0+0x30>)
 8007ad4:	2104      	movs	r1, #4
 8007ad6:	4c0b      	ldr	r4, [pc, #44]	@ (8007b04 <global_stdio_init.part.0+0x34>)
 8007ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8007b08 <global_stdio_init.part.0+0x38>)
 8007ada:	4620      	mov	r0, r4
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f7ff ff94 	bl	8007a0c <std>
 8007ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2109      	movs	r1, #9
 8007aec:	f7ff ff8e 	bl	8007a0c <std>
 8007af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007af4:	2202      	movs	r2, #2
 8007af6:	2112      	movs	r1, #18
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f7ff bf86 	b.w	8007a0c <std>
 8007b00:	200003e8 	.word	0x200003e8
 8007b04:	200002b0 	.word	0x200002b0
 8007b08:	08007a79 	.word	0x08007a79

08007b0c <__sfp_lock_acquire>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__sfp_lock_acquire+0x8>)
 8007b0e:	f000 b920 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	200003f1 	.word	0x200003f1

08007b18 <__sfp_lock_release>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__sfp_lock_release+0x8>)
 8007b1a:	f000 b91b 	b.w	8007d54 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	200003f1 	.word	0x200003f1

08007b24 <__sinit>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	f7ff fff0 	bl	8007b0c <__sfp_lock_acquire>
 8007b2c:	6a23      	ldr	r3, [r4, #32]
 8007b2e:	b11b      	cbz	r3, 8007b38 <__sinit+0x14>
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f7ff bff0 	b.w	8007b18 <__sfp_lock_release>
 8007b38:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <__sinit+0x28>)
 8007b3a:	6223      	str	r3, [r4, #32]
 8007b3c:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <__sinit+0x2c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f5      	bne.n	8007b30 <__sinit+0xc>
 8007b44:	f7ff ffc4 	bl	8007ad0 <global_stdio_init.part.0>
 8007b48:	e7f2      	b.n	8007b30 <__sinit+0xc>
 8007b4a:	bf00      	nop
 8007b4c:	08007a91 	.word	0x08007a91
 8007b50:	200003e8 	.word	0x200003e8

08007b54 <_fwalk_sglue>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4607      	mov	r7, r0
 8007b5a:	4688      	mov	r8, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	2600      	movs	r6, #0
 8007b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b64:	f1b9 0901 	subs.w	r9, r9, #1
 8007b68:	d505      	bpl.n	8007b76 <_fwalk_sglue+0x22>
 8007b6a:	6824      	ldr	r4, [r4, #0]
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	d1f7      	bne.n	8007b60 <_fwalk_sglue+0xc>
 8007b70:	4630      	mov	r0, r6
 8007b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d907      	bls.n	8007b8c <_fwalk_sglue+0x38>
 8007b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b80:	3301      	adds	r3, #1
 8007b82:	d003      	beq.n	8007b8c <_fwalk_sglue+0x38>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c0      	blx	r8
 8007b8a:	4306      	orrs	r6, r0
 8007b8c:	3568      	adds	r5, #104	@ 0x68
 8007b8e:	e7e9      	b.n	8007b64 <_fwalk_sglue+0x10>

08007b90 <siprintf>:
 8007b90:	b40e      	push	{r1, r2, r3}
 8007b92:	b500      	push	{lr}
 8007b94:	b09c      	sub	sp, #112	@ 0x70
 8007b96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b9c:	9002      	str	r0, [sp, #8]
 8007b9e:	9006      	str	r0, [sp, #24]
 8007ba0:	9107      	str	r1, [sp, #28]
 8007ba2:	9104      	str	r1, [sp, #16]
 8007ba4:	4808      	ldr	r0, [pc, #32]	@ (8007bc8 <siprintf+0x38>)
 8007ba6:	4909      	ldr	r1, [pc, #36]	@ (8007bcc <siprintf+0x3c>)
 8007ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bac:	9105      	str	r1, [sp, #20]
 8007bae:	a902      	add	r1, sp, #8
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f001 fc14 	bl	80093e0 <_svfiprintf_r>
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	b01c      	add	sp, #112	@ 0x70
 8007bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc4:	b003      	add	sp, #12
 8007bc6:	4770      	bx	lr
 8007bc8:	20000038 	.word	0x20000038
 8007bcc:	ffff0208 	.word	0xffff0208

08007bd0 <__sread>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd8:	f000 f86c 	bl	8007cb4 <_read_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	bfab      	itete	ge
 8007be0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007be2:	89a3      	ldrhlt	r3, [r4, #12]
 8007be4:	181b      	addge	r3, r3, r0
 8007be6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bea:	bfac      	ite	ge
 8007bec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bee:	81a3      	strhlt	r3, [r4, #12]
 8007bf0:	bd10      	pop	{r4, pc}

08007bf2 <__swrite>:
 8007bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	05db      	lsls	r3, r3, #23
 8007c00:	4616      	mov	r6, r2
 8007c02:	d505      	bpl.n	8007c10 <__swrite+0x1e>
 8007c04:	2302      	movs	r3, #2
 8007c06:	2200      	movs	r2, #0
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	f000 f840 	bl	8007c90 <_lseek_r>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	4632      	mov	r2, r6
 8007c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	463b      	mov	r3, r7
 8007c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c26:	f000 b857 	b.w	8007cd8 <_write_r>

08007c2a <__sseek>:
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 f82d 	bl	8007c90 <_lseek_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	bf15      	itete	ne
 8007c3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c46:	81a3      	strheq	r3, [r4, #12]
 8007c48:	bf18      	it	ne
 8007c4a:	81a3      	strhne	r3, [r4, #12]
 8007c4c:	bd10      	pop	{r4, pc}

08007c4e <__sclose>:
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 b80d 	b.w	8007c70 <_close_r>

08007c56 <memset>:
 8007c56:	4402      	add	r2, r0
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d100      	bne.n	8007c60 <memset+0xa>
 8007c5e:	4770      	bx	lr
 8007c60:	f803 1b01 	strb.w	r1, [r3], #1
 8007c64:	e7f9      	b.n	8007c5a <memset+0x4>
	...

08007c68 <_localeconv_r>:
 8007c68:	4800      	ldr	r0, [pc, #0]	@ (8007c6c <_localeconv_r+0x4>)
 8007c6a:	4770      	bx	lr
 8007c6c:	20000178 	.word	0x20000178

08007c70 <_close_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	2300      	movs	r3, #0
 8007c74:	4d05      	ldr	r5, [pc, #20]	@ (8007c8c <_close_r+0x1c>)
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	f7f9 fbee 	bl	800145c <_close>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_close_r+0x1a>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_close_r+0x1a>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	200003ec 	.word	0x200003ec

08007c90 <_lseek_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	4d06      	ldr	r5, [pc, #24]	@ (8007cb0 <_lseek_r+0x20>)
 8007c96:	4608      	mov	r0, r1
 8007c98:	4611      	mov	r1, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	602a      	str	r2, [r5, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f7f9 fc03 	bl	80014aa <_lseek>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_lseek_r+0x1e>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_lseek_r+0x1e>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	200003ec 	.word	0x200003ec

08007cb4 <_read_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4d06      	ldr	r5, [pc, #24]	@ (8007cd4 <_read_r+0x20>)
 8007cba:	4608      	mov	r0, r1
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	602a      	str	r2, [r5, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f7f9 fb91 	bl	80013ea <_read>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_read_r+0x1e>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_read_r+0x1e>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	200003ec 	.word	0x200003ec

08007cd8 <_write_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4d06      	ldr	r5, [pc, #24]	@ (8007cf8 <_write_r+0x20>)
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	602a      	str	r2, [r5, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7f9 fb9c 	bl	8001424 <_write>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_write_r+0x1e>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_write_r+0x1e>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	200003ec 	.word	0x200003ec

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	@ (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000038 	.word	0x20000038

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d40 <__libc_init_array+0x38>)
 8007d0c:	2600      	movs	r6, #0
 8007d0e:	4c0d      	ldr	r4, [pc, #52]	@ (8007d44 <__libc_init_array+0x3c>)
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	@ (8007d48 <__libc_init_array+0x40>)
 8007d1a:	2600      	movs	r6, #0
 8007d1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d4c <__libc_init_array+0x44>)
 8007d1e:	f002 f87d 	bl	8009e1c <_init>
 8007d22:	1b64      	subs	r4, r4, r5
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	3601      	adds	r6, #1
 8007d32:	4798      	blx	r3
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	4798      	blx	r3
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0800a2c0 	.word	0x0800a2c0
 8007d44:	0800a2c0 	.word	0x0800a2c0
 8007d48:	0800a2c0 	.word	0x0800a2c0
 8007d4c:	0800a2c4 	.word	0x0800a2c4

08007d50 <__retarget_lock_init_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_acquire_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__retarget_lock_release_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <memchr>:
 8007d56:	b2c9      	uxtb	r1, r1
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4402      	add	r2, r0
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	d101      	bne.n	8007d68 <memchr+0x12>
 8007d64:	2000      	movs	r0, #0
 8007d66:	e003      	b.n	8007d70 <memchr+0x1a>
 8007d68:	7804      	ldrb	r4, [r0, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	428c      	cmp	r4, r1
 8007d6e:	d1f6      	bne.n	8007d5e <memchr+0x8>
 8007d70:	bd10      	pop	{r4, pc}

08007d72 <quorem>:
 8007d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d76:	6903      	ldr	r3, [r0, #16]
 8007d78:	4607      	mov	r7, r0
 8007d7a:	690c      	ldr	r4, [r1, #16]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	f2c0 8083 	blt.w	8007e88 <quorem+0x116>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	f100 0514 	add.w	r5, r0, #20
 8007d88:	f101 0814 	add.w	r8, r1, #20
 8007d8c:	00a3      	lsls	r3, r4, #2
 8007d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007da2:	3301      	adds	r3, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007daa:	d331      	bcc.n	8007e10 <quorem+0x9e>
 8007dac:	f04f 0a00 	mov.w	sl, #0
 8007db0:	46c4      	mov	ip, r8
 8007db2:	46ae      	mov	lr, r5
 8007db4:	46d3      	mov	fp, sl
 8007db6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dba:	b298      	uxth	r0, r3
 8007dbc:	45e1      	cmp	r9, ip
 8007dbe:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007dc2:	fb06 a000 	mla	r0, r6, r0, sl
 8007dc6:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8007dca:	b280      	uxth	r0, r0
 8007dcc:	fb06 2303 	mla	r3, r6, r3, r2
 8007dd0:	f8de 2000 	ldr.w	r2, [lr]
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dda:	eba2 0200 	sub.w	r2, r2, r0
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f8de 0000 	ldr.w	r0, [lr]
 8007de4:	445a      	add	r2, fp
 8007de6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dea:	b292      	uxth	r2, r2
 8007dec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007df0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007df4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007df8:	f84e 2b04 	str.w	r2, [lr], #4
 8007dfc:	d2db      	bcs.n	8007db6 <quorem+0x44>
 8007dfe:	9b00      	ldr	r3, [sp, #0]
 8007e00:	58eb      	ldr	r3, [r5, r3]
 8007e02:	b92b      	cbnz	r3, 8007e10 <quorem+0x9e>
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	3b04      	subs	r3, #4
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	d330      	bcc.n	8007e70 <quorem+0xfe>
 8007e0e:	613c      	str	r4, [r7, #16]
 8007e10:	4638      	mov	r0, r7
 8007e12:	f001 f97d 	bl	8009110 <__mcmp>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	db26      	blt.n	8007e68 <quorem+0xf6>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e22:	f8d1 c000 	ldr.w	ip, [r1]
 8007e26:	fa1f fe82 	uxth.w	lr, r2
 8007e2a:	45c1      	cmp	r9, r8
 8007e2c:	fa1f f38c 	uxth.w	r3, ip
 8007e30:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007e34:	eba3 030e 	sub.w	r3, r3, lr
 8007e38:	4403      	add	r3, r0
 8007e3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e4c:	f841 3b04 	str.w	r3, [r1], #4
 8007e50:	d2e5      	bcs.n	8007e1e <quorem+0xac>
 8007e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5a:	b922      	cbnz	r2, 8007e66 <quorem+0xf4>
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	d30b      	bcc.n	8007e7c <quorem+0x10a>
 8007e64:	613c      	str	r4, [r7, #16]
 8007e66:	3601      	adds	r6, #1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	b003      	add	sp, #12
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	d1ca      	bne.n	8007e0e <quorem+0x9c>
 8007e78:	3c01      	subs	r4, #1
 8007e7a:	e7c5      	b.n	8007e08 <quorem+0x96>
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d1ef      	bne.n	8007e64 <quorem+0xf2>
 8007e84:	3c01      	subs	r4, #1
 8007e86:	e7ea      	b.n	8007e5e <quorem+0xec>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e7ee      	b.n	8007e6a <quorem+0xf8>
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <_dtoa_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	69c7      	ldr	r7, [r0, #28]
 8007e96:	b099      	sub	sp, #100	@ 0x64
 8007e98:	4683      	mov	fp, r0
 8007e9a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ea2:	ec55 4b10 	vmov	r4, r5, d0
 8007ea6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007eaa:	b97f      	cbnz	r7, 8007ecc <_dtoa_r+0x3c>
 8007eac:	2010      	movs	r0, #16
 8007eae:	f000 fdfd 	bl	8008aac <malloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007eb8:	b920      	cbnz	r0, 8007ec4 <_dtoa_r+0x34>
 8007eba:	4ba7      	ldr	r3, [pc, #668]	@ (8008158 <_dtoa_r+0x2c8>)
 8007ebc:	21ef      	movs	r1, #239	@ 0xef
 8007ebe:	48a7      	ldr	r0, [pc, #668]	@ (800815c <_dtoa_r+0x2cc>)
 8007ec0:	f001 fc6e 	bl	80097a0 <__assert_func>
 8007ec4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ec8:	6007      	str	r7, [r0, #0]
 8007eca:	60c7      	str	r7, [r0, #12]
 8007ecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ed0:	6819      	ldr	r1, [r3, #0]
 8007ed2:	b159      	cbz	r1, 8007eec <_dtoa_r+0x5c>
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4658      	mov	r0, fp
 8007eda:	4093      	lsls	r3, r2
 8007edc:	604a      	str	r2, [r1, #4]
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	f000 feda 	bl	8008c98 <_Bfree>
 8007ee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	1e2b      	subs	r3, r5, #0
 8007eee:	bfb7      	itett	lt
 8007ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ef4:	2300      	movge	r3, #0
 8007ef6:	2201      	movlt	r2, #1
 8007ef8:	9303      	strlt	r3, [sp, #12]
 8007efa:	bfa8      	it	ge
 8007efc:	6033      	strge	r3, [r6, #0]
 8007efe:	9f03      	ldr	r7, [sp, #12]
 8007f00:	4b97      	ldr	r3, [pc, #604]	@ (8008160 <_dtoa_r+0x2d0>)
 8007f02:	bfb8      	it	lt
 8007f04:	6032      	strlt	r2, [r6, #0]
 8007f06:	43bb      	bics	r3, r7
 8007f08:	d112      	bne.n	8007f30 <_dtoa_r+0xa0>
 8007f0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f16:	4323      	orrs	r3, r4
 8007f18:	f000 854c 	beq.w	80089b4 <_dtoa_r+0xb24>
 8007f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f1e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008174 <_dtoa_r+0x2e4>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 854e 	beq.w	80089c4 <_dtoa_r+0xb34>
 8007f28:	f10a 0303 	add.w	r3, sl, #3
 8007f2c:	f000 bd48 	b.w	80089c0 <_dtoa_r+0xb30>
 8007f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	ec51 0b17 	vmov	r0, r1, d7
 8007f3c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f40:	f7f8 fdc6 	bl	8000ad0 <__aeabi_dcmpeq>
 8007f44:	4680      	mov	r8, r0
 8007f46:	b158      	cbz	r0, 8007f60 <_dtoa_r+0xd0>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f50:	b113      	cbz	r3, 8007f58 <_dtoa_r+0xc8>
 8007f52:	4b84      	ldr	r3, [pc, #528]	@ (8008164 <_dtoa_r+0x2d4>)
 8007f54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008178 <_dtoa_r+0x2e8>
 8007f5c:	f000 bd32 	b.w	80089c4 <_dtoa_r+0xb34>
 8007f60:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f64:	aa16      	add	r2, sp, #88	@ 0x58
 8007f66:	a917      	add	r1, sp, #92	@ 0x5c
 8007f68:	4658      	mov	r0, fp
 8007f6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f6e:	f001 f983 	bl	8009278 <__d2b>
 8007f72:	4681      	mov	r9, r0
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	d075      	beq.n	8008064 <_dtoa_r+0x1d4>
 8007f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f7a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f7e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f86:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f8e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f92:	4619      	mov	r1, r3
 8007f94:	2200      	movs	r2, #0
 8007f96:	4b74      	ldr	r3, [pc, #464]	@ (8008168 <_dtoa_r+0x2d8>)
 8007f98:	f7f8 f97a 	bl	8000290 <__aeabi_dsub>
 8007f9c:	a368      	add	r3, pc, #416	@ (adr r3, 8008140 <_dtoa_r+0x2b0>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 fb2d 	bl	8000600 <__aeabi_dmul>
 8007fa6:	a368      	add	r3, pc, #416	@ (adr r3, 8008148 <_dtoa_r+0x2b8>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f972 	bl	8000294 <__adddf3>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7f8 fab9 	bl	800052c <__aeabi_i2d>
 8007fba:	a365      	add	r3, pc, #404	@ (adr r3, 8008150 <_dtoa_r+0x2c0>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 fb1e 	bl	8000600 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 f962 	bl	8000294 <__adddf3>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	f7f8 fdc4 	bl	8000b60 <__aeabi_d2iz>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4607      	mov	r7, r0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fd7f 	bl	8000ae4 <__aeabi_dcmplt>
 8007fe6:	b140      	cbz	r0, 8007ffa <_dtoa_r+0x16a>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7f8 fa9f 	bl	800052c <__aeabi_i2d>
 8007fee:	4622      	mov	r2, r4
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	f7f8 fd6d 	bl	8000ad0 <__aeabi_dcmpeq>
 8007ff6:	b900      	cbnz	r0, 8007ffa <_dtoa_r+0x16a>
 8007ff8:	3f01      	subs	r7, #1
 8007ffa:	2f16      	cmp	r7, #22
 8007ffc:	d851      	bhi.n	80080a2 <_dtoa_r+0x212>
 8007ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800816c <_dtoa_r+0x2dc>)
 8008000:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f7f8 fd6a 	bl	8000ae4 <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d048      	beq.n	80080a6 <_dtoa_r+0x216>
 8008014:	3f01      	subs	r7, #1
 8008016:	2300      	movs	r3, #0
 8008018:	9312      	str	r3, [sp, #72]	@ 0x48
 800801a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800801c:	1b9b      	subs	r3, r3, r6
 800801e:	1e5a      	subs	r2, r3, #1
 8008020:	bf46      	itte	mi
 8008022:	f1c3 0801 	rsbmi	r8, r3, #1
 8008026:	2300      	movmi	r3, #0
 8008028:	f04f 0800 	movpl.w	r8, #0
 800802c:	9208      	str	r2, [sp, #32]
 800802e:	bf48      	it	mi
 8008030:	9308      	strmi	r3, [sp, #32]
 8008032:	2f00      	cmp	r7, #0
 8008034:	db39      	blt.n	80080aa <_dtoa_r+0x21a>
 8008036:	9b08      	ldr	r3, [sp, #32]
 8008038:	970f      	str	r7, [sp, #60]	@ 0x3c
 800803a:	443b      	add	r3, r7
 800803c:	9308      	str	r3, [sp, #32]
 800803e:	2300      	movs	r3, #0
 8008040:	930a      	str	r3, [sp, #40]	@ 0x28
 8008042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008044:	2b09      	cmp	r3, #9
 8008046:	d864      	bhi.n	8008112 <_dtoa_r+0x282>
 8008048:	2b05      	cmp	r3, #5
 800804a:	bfc5      	ittet	gt
 800804c:	3b04      	subgt	r3, #4
 800804e:	2400      	movgt	r4, #0
 8008050:	2401      	movle	r4, #1
 8008052:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008056:	3b02      	subs	r3, #2
 8008058:	2b03      	cmp	r3, #3
 800805a:	d865      	bhi.n	8008128 <_dtoa_r+0x298>
 800805c:	e8df f003 	tbb	[pc, r3]
 8008060:	5737392c 	.word	0x5737392c
 8008064:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008068:	441e      	add	r6, r3
 800806a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800806e:	2b20      	cmp	r3, #32
 8008070:	bfc9      	itett	gt
 8008072:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008076:	f1c3 0320 	rsble	r3, r3, #32
 800807a:	409f      	lslgt	r7, r3
 800807c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008080:	bfd8      	it	le
 8008082:	fa04 f003 	lslle.w	r0, r4, r3
 8008086:	f106 36ff 	add.w	r6, r6, #4294967295
 800808a:	bfc4      	itt	gt
 800808c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008090:	ea47 0003 	orrgt.w	r0, r7, r3
 8008094:	f7f8 fa3a 	bl	800050c <__aeabi_ui2d>
 8008098:	2201      	movs	r2, #1
 800809a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800809e:	9214      	str	r2, [sp, #80]	@ 0x50
 80080a0:	e777      	b.n	8007f92 <_dtoa_r+0x102>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7b8      	b.n	8008018 <_dtoa_r+0x188>
 80080a6:	9012      	str	r0, [sp, #72]	@ 0x48
 80080a8:	e7b7      	b.n	800801a <_dtoa_r+0x18a>
 80080aa:	427b      	negs	r3, r7
 80080ac:	eba8 0807 	sub.w	r8, r8, r7
 80080b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b2:	2300      	movs	r3, #0
 80080b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080b6:	e7c4      	b.n	8008042 <_dtoa_r+0x1b2>
 80080b8:	2300      	movs	r3, #0
 80080ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dc35      	bgt.n	800812e <_dtoa_r+0x29e>
 80080c2:	2301      	movs	r3, #1
 80080c4:	461a      	mov	r2, r3
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80080cc:	e00b      	b.n	80080e6 <_dtoa_r+0x256>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e7f3      	b.n	80080ba <_dtoa_r+0x22a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	2b01      	cmp	r3, #1
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	bfb8      	it	lt
 80080e4:	2301      	movlt	r3, #1
 80080e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080ea:	2100      	movs	r1, #0
 80080ec:	2204      	movs	r2, #4
 80080ee:	f102 0514 	add.w	r5, r2, #20
 80080f2:	429d      	cmp	r5, r3
 80080f4:	d91f      	bls.n	8008136 <_dtoa_r+0x2a6>
 80080f6:	6041      	str	r1, [r0, #4]
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 fd8d 	bl	8008c18 <_Balloc>
 80080fe:	4682      	mov	sl, r0
 8008100:	2800      	cmp	r0, #0
 8008102:	d13b      	bne.n	800817c <_dtoa_r+0x2ec>
 8008104:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <_dtoa_r+0x2e0>)
 8008106:	4602      	mov	r2, r0
 8008108:	f240 11af 	movw	r1, #431	@ 0x1af
 800810c:	e6d7      	b.n	8007ebe <_dtoa_r+0x2e>
 800810e:	2301      	movs	r3, #1
 8008110:	e7e0      	b.n	80080d4 <_dtoa_r+0x244>
 8008112:	2401      	movs	r4, #1
 8008114:	2300      	movs	r3, #0
 8008116:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008118:	9309      	str	r3, [sp, #36]	@ 0x24
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	2200      	movs	r2, #0
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	2312      	movs	r3, #18
 8008126:	e7d0      	b.n	80080ca <_dtoa_r+0x23a>
 8008128:	2301      	movs	r3, #1
 800812a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812c:	e7f5      	b.n	800811a <_dtoa_r+0x28a>
 800812e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	9307      	str	r3, [sp, #28]
 8008134:	e7d7      	b.n	80080e6 <_dtoa_r+0x256>
 8008136:	3101      	adds	r1, #1
 8008138:	0052      	lsls	r2, r2, #1
 800813a:	e7d8      	b.n	80080ee <_dtoa_r+0x25e>
 800813c:	f3af 8000 	nop.w
 8008140:	636f4361 	.word	0x636f4361
 8008144:	3fd287a7 	.word	0x3fd287a7
 8008148:	8b60c8b3 	.word	0x8b60c8b3
 800814c:	3fc68a28 	.word	0x3fc68a28
 8008150:	509f79fb 	.word	0x509f79fb
 8008154:	3fd34413 	.word	0x3fd34413
 8008158:	08009f85 	.word	0x08009f85
 800815c:	08009f9c 	.word	0x08009f9c
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	08009f55 	.word	0x08009f55
 8008168:	3ff80000 	.word	0x3ff80000
 800816c:	0800a098 	.word	0x0800a098
 8008170:	08009ff4 	.word	0x08009ff4
 8008174:	08009f81 	.word	0x08009f81
 8008178:	08009f54 	.word	0x08009f54
 800817c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008180:	6018      	str	r0, [r3, #0]
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	2b0e      	cmp	r3, #14
 8008186:	f200 80a4 	bhi.w	80082d2 <_dtoa_r+0x442>
 800818a:	2c00      	cmp	r4, #0
 800818c:	f000 80a1 	beq.w	80082d2 <_dtoa_r+0x442>
 8008190:	2f00      	cmp	r7, #0
 8008192:	dd33      	ble.n	80081fc <_dtoa_r+0x36c>
 8008194:	f007 020f 	and.w	r2, r7, #15
 8008198:	4bac      	ldr	r3, [pc, #688]	@ (800844c <_dtoa_r+0x5bc>)
 800819a:	05f8      	lsls	r0, r7, #23
 800819c:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a4:	ed93 7b00 	vldr	d7, [r3]
 80081a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80081ac:	d516      	bpl.n	80081dc <_dtoa_r+0x34c>
 80081ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008450 <_dtoa_r+0x5c0>)
 80081b0:	f004 040f 	and.w	r4, r4, #15
 80081b4:	2603      	movs	r6, #3
 80081b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081be:	f7f8 fb49 	bl	8000854 <__aeabi_ddiv>
 80081c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c6:	4da2      	ldr	r5, [pc, #648]	@ (8008450 <_dtoa_r+0x5c0>)
 80081c8:	b954      	cbnz	r4, 80081e0 <_dtoa_r+0x350>
 80081ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d2:	f7f8 fb3f 	bl	8000854 <__aeabi_ddiv>
 80081d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081da:	e028      	b.n	800822e <_dtoa_r+0x39e>
 80081dc:	2602      	movs	r6, #2
 80081de:	e7f2      	b.n	80081c6 <_dtoa_r+0x336>
 80081e0:	07e1      	lsls	r1, r4, #31
 80081e2:	d508      	bpl.n	80081f6 <_dtoa_r+0x366>
 80081e4:	3601      	adds	r6, #1
 80081e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ee:	f7f8 fa07 	bl	8000600 <__aeabi_dmul>
 80081f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081f6:	1064      	asrs	r4, r4, #1
 80081f8:	3508      	adds	r5, #8
 80081fa:	e7e5      	b.n	80081c8 <_dtoa_r+0x338>
 80081fc:	f000 80d2 	beq.w	80083a4 <_dtoa_r+0x514>
 8008200:	427c      	negs	r4, r7
 8008202:	4b92      	ldr	r3, [pc, #584]	@ (800844c <_dtoa_r+0x5bc>)
 8008204:	4d92      	ldr	r5, [pc, #584]	@ (8008450 <_dtoa_r+0x5c0>)
 8008206:	2602      	movs	r6, #2
 8008208:	f004 020f 	and.w	r2, r4, #15
 800820c:	1124      	asrs	r4, r4, #4
 800820e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f9f1 	bl	8000600 <__aeabi_dmul>
 800821e:	2300      	movs	r3, #0
 8008220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008224:	2c00      	cmp	r4, #0
 8008226:	f040 80b2 	bne.w	800838e <_dtoa_r+0x4fe>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1d3      	bne.n	80081d6 <_dtoa_r+0x346>
 800822e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008230:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80b7 	beq.w	80083a8 <_dtoa_r+0x518>
 800823a:	2200      	movs	r2, #0
 800823c:	4b85      	ldr	r3, [pc, #532]	@ (8008454 <_dtoa_r+0x5c4>)
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fc4f 	bl	8000ae4 <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f000 80ae 	beq.w	80083a8 <_dtoa_r+0x518>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80aa 	beq.w	80083a8 <_dtoa_r+0x518>
 8008254:	9b00      	ldr	r3, [sp, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd37      	ble.n	80082ca <_dtoa_r+0x43a>
 800825a:	1e7b      	subs	r3, r7, #1
 800825c:	4620      	mov	r0, r4
 800825e:	2200      	movs	r2, #0
 8008260:	4629      	mov	r1, r5
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	3601      	adds	r6, #1
 8008266:	4b7c      	ldr	r3, [pc, #496]	@ (8008458 <_dtoa_r+0x5c8>)
 8008268:	f7f8 f9ca 	bl	8000600 <__aeabi_dmul>
 800826c:	9c00      	ldr	r4, [sp, #0]
 800826e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008272:	4630      	mov	r0, r6
 8008274:	f7f8 f95a 	bl	800052c <__aeabi_i2d>
 8008278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800827c:	f7f8 f9c0 	bl	8000600 <__aeabi_dmul>
 8008280:	2200      	movs	r2, #0
 8008282:	4b76      	ldr	r3, [pc, #472]	@ (800845c <_dtoa_r+0x5cc>)
 8008284:	f7f8 f806 	bl	8000294 <__adddf3>
 8008288:	4605      	mov	r5, r0
 800828a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800828e:	2c00      	cmp	r4, #0
 8008290:	f040 808d 	bne.w	80083ae <_dtoa_r+0x51e>
 8008294:	2200      	movs	r2, #0
 8008296:	4b72      	ldr	r3, [pc, #456]	@ (8008460 <_dtoa_r+0x5d0>)
 8008298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829c:	f7f7 fff8 	bl	8000290 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4633      	mov	r3, r6
 80082ac:	f7f8 fc38 	bl	8000b20 <__aeabi_dcmpgt>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	f040 828b 	bne.w	80087cc <_dtoa_r+0x93c>
 80082b6:	462a      	mov	r2, r5
 80082b8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c0:	f7f8 fc10 	bl	8000ae4 <__aeabi_dcmplt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f040 8128 	bne.w	800851a <_dtoa_r+0x68a>
 80082ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f2c0 815a 	blt.w	800858e <_dtoa_r+0x6fe>
 80082da:	2f0e      	cmp	r7, #14
 80082dc:	f300 8157 	bgt.w	800858e <_dtoa_r+0x6fe>
 80082e0:	4b5a      	ldr	r3, [pc, #360]	@ (800844c <_dtoa_r+0x5bc>)
 80082e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082e6:	ed93 7b00 	vldr	d7, [r3]
 80082ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	ed8d 7b00 	vstr	d7, [sp]
 80082f2:	da03      	bge.n	80082fc <_dtoa_r+0x46c>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f340 8101 	ble.w	80084fe <_dtoa_r+0x66e>
 80082fc:	4656      	mov	r6, sl
 80082fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 faa3 	bl	8000854 <__aeabi_ddiv>
 800830e:	f7f8 fc27 	bl	8000b60 <__aeabi_d2iz>
 8008312:	4680      	mov	r8, r0
 8008314:	f7f8 f90a 	bl	800052c <__aeabi_i2d>
 8008318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800831c:	f7f8 f970 	bl	8000600 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	4620      	mov	r0, r4
 8008324:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008328:	460b      	mov	r3, r1
 800832a:	4629      	mov	r1, r5
 800832c:	f7f7 ffb0 	bl	8000290 <__aeabi_dsub>
 8008330:	9d07      	ldr	r5, [sp, #28]
 8008332:	f806 4b01 	strb.w	r4, [r6], #1
 8008336:	eba6 040a 	sub.w	r4, r6, sl
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	42a5      	cmp	r5, r4
 8008340:	f040 8117 	bne.w	8008572 <_dtoa_r+0x6e2>
 8008344:	f7f7 ffa6 	bl	8000294 <__adddf3>
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008350:	f7f8 fbe6 	bl	8000b20 <__aeabi_dcmpgt>
 8008354:	2800      	cmp	r0, #0
 8008356:	f040 80f9 	bne.w	800854c <_dtoa_r+0x6bc>
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008362:	f7f8 fbb5 	bl	8000ad0 <__aeabi_dcmpeq>
 8008366:	b118      	cbz	r0, 8008370 <_dtoa_r+0x4e0>
 8008368:	f018 0f01 	tst.w	r8, #1
 800836c:	f040 80ee 	bne.w	800854c <_dtoa_r+0x6bc>
 8008370:	4649      	mov	r1, r9
 8008372:	4658      	mov	r0, fp
 8008374:	f000 fc90 	bl	8008c98 <_Bfree>
 8008378:	2300      	movs	r3, #0
 800837a:	3701      	adds	r7, #1
 800837c:	7033      	strb	r3, [r6, #0]
 800837e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008380:	601f      	str	r7, [r3, #0]
 8008382:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 831d 	beq.w	80089c4 <_dtoa_r+0xb34>
 800838a:	601e      	str	r6, [r3, #0]
 800838c:	e31a      	b.n	80089c4 <_dtoa_r+0xb34>
 800838e:	07e2      	lsls	r2, r4, #31
 8008390:	d505      	bpl.n	800839e <_dtoa_r+0x50e>
 8008392:	3601      	adds	r6, #1
 8008394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008398:	f7f8 f932 	bl	8000600 <__aeabi_dmul>
 800839c:	2301      	movs	r3, #1
 800839e:	1064      	asrs	r4, r4, #1
 80083a0:	3508      	adds	r5, #8
 80083a2:	e73f      	b.n	8008224 <_dtoa_r+0x394>
 80083a4:	2602      	movs	r6, #2
 80083a6:	e742      	b.n	800822e <_dtoa_r+0x39e>
 80083a8:	9c07      	ldr	r4, [sp, #28]
 80083aa:	9704      	str	r7, [sp, #16]
 80083ac:	e761      	b.n	8008272 <_dtoa_r+0x3e2>
 80083ae:	4b27      	ldr	r3, [pc, #156]	@ (800844c <_dtoa_r+0x5bc>)
 80083b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083b6:	4454      	add	r4, sl
 80083b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083bc:	2900      	cmp	r1, #0
 80083be:	d053      	beq.n	8008468 <_dtoa_r+0x5d8>
 80083c0:	2000      	movs	r0, #0
 80083c2:	4928      	ldr	r1, [pc, #160]	@ (8008464 <_dtoa_r+0x5d4>)
 80083c4:	f7f8 fa46 	bl	8000854 <__aeabi_ddiv>
 80083c8:	4633      	mov	r3, r6
 80083ca:	4656      	mov	r6, sl
 80083cc:	462a      	mov	r2, r5
 80083ce:	f7f7 ff5f 	bl	8000290 <__aeabi_dsub>
 80083d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083da:	f7f8 fbc1 	bl	8000b60 <__aeabi_d2iz>
 80083de:	4605      	mov	r5, r0
 80083e0:	f7f8 f8a4 	bl	800052c <__aeabi_i2d>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	3530      	adds	r5, #48	@ 0x30
 80083ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ee:	f7f7 ff4f 	bl	8000290 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	f806 5b01 	strb.w	r5, [r6], #1
 80083fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008402:	f7f8 fb6f 	bl	8000ae4 <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	d171      	bne.n	80084ee <_dtoa_r+0x65e>
 800840a:	2000      	movs	r0, #0
 800840c:	4911      	ldr	r1, [pc, #68]	@ (8008454 <_dtoa_r+0x5c4>)
 800840e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008412:	f7f7 ff3d 	bl	8000290 <__aeabi_dsub>
 8008416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800841a:	f7f8 fb63 	bl	8000ae4 <__aeabi_dcmplt>
 800841e:	2800      	cmp	r0, #0
 8008420:	f040 8095 	bne.w	800854e <_dtoa_r+0x6be>
 8008424:	42a6      	cmp	r6, r4
 8008426:	f43f af50 	beq.w	80082ca <_dtoa_r+0x43a>
 800842a:	2200      	movs	r2, #0
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <_dtoa_r+0x5c8>)
 800842e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008432:	f7f8 f8e5 	bl	8000600 <__aeabi_dmul>
 8008436:	2200      	movs	r2, #0
 8008438:	4b07      	ldr	r3, [pc, #28]	@ (8008458 <_dtoa_r+0x5c8>)
 800843a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800843e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008442:	f7f8 f8dd 	bl	8000600 <__aeabi_dmul>
 8008446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800844a:	e7c4      	b.n	80083d6 <_dtoa_r+0x546>
 800844c:	0800a098 	.word	0x0800a098
 8008450:	0800a070 	.word	0x0800a070
 8008454:	3ff00000 	.word	0x3ff00000
 8008458:	40240000 	.word	0x40240000
 800845c:	401c0000 	.word	0x401c0000
 8008460:	40140000 	.word	0x40140000
 8008464:	3fe00000 	.word	0x3fe00000
 8008468:	4631      	mov	r1, r6
 800846a:	4656      	mov	r6, sl
 800846c:	4628      	mov	r0, r5
 800846e:	f7f8 f8c7 	bl	8000600 <__aeabi_dmul>
 8008472:	9415      	str	r4, [sp, #84]	@ 0x54
 8008474:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800847c:	f7f8 fb70 	bl	8000b60 <__aeabi_d2iz>
 8008480:	4605      	mov	r5, r0
 8008482:	f7f8 f853 	bl	800052c <__aeabi_i2d>
 8008486:	4602      	mov	r2, r0
 8008488:	3530      	adds	r5, #48	@ 0x30
 800848a:	460b      	mov	r3, r1
 800848c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008490:	f7f7 fefe 	bl	8000290 <__aeabi_dsub>
 8008494:	f806 5b01 	strb.w	r5, [r6], #1
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	42a6      	cmp	r6, r4
 800849e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	d124      	bne.n	80084f2 <_dtoa_r+0x662>
 80084a8:	4bac      	ldr	r3, [pc, #688]	@ (800875c <_dtoa_r+0x8cc>)
 80084aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084ae:	f7f7 fef1 	bl	8000294 <__adddf3>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ba:	f7f8 fb31 	bl	8000b20 <__aeabi_dcmpgt>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d145      	bne.n	800854e <_dtoa_r+0x6be>
 80084c2:	2000      	movs	r0, #0
 80084c4:	49a5      	ldr	r1, [pc, #660]	@ (800875c <_dtoa_r+0x8cc>)
 80084c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084ca:	f7f7 fee1 	bl	8000290 <__aeabi_dsub>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d6:	f7f8 fb05 	bl	8000ae4 <__aeabi_dcmplt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f43f aef5 	beq.w	80082ca <_dtoa_r+0x43a>
 80084e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80084e2:	1e73      	subs	r3, r6, #1
 80084e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80084e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084ea:	2b30      	cmp	r3, #48	@ 0x30
 80084ec:	d0f8      	beq.n	80084e0 <_dtoa_r+0x650>
 80084ee:	9f04      	ldr	r7, [sp, #16]
 80084f0:	e73e      	b.n	8008370 <_dtoa_r+0x4e0>
 80084f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008760 <_dtoa_r+0x8d0>)
 80084f4:	f7f8 f884 	bl	8000600 <__aeabi_dmul>
 80084f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084fc:	e7bc      	b.n	8008478 <_dtoa_r+0x5e8>
 80084fe:	d10c      	bne.n	800851a <_dtoa_r+0x68a>
 8008500:	2200      	movs	r2, #0
 8008502:	4b98      	ldr	r3, [pc, #608]	@ (8008764 <_dtoa_r+0x8d4>)
 8008504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008508:	f7f8 f87a 	bl	8000600 <__aeabi_dmul>
 800850c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008510:	f7f8 fafc 	bl	8000b0c <__aeabi_dcmpge>
 8008514:	2800      	cmp	r0, #0
 8008516:	f000 8157 	beq.w	80087c8 <_dtoa_r+0x938>
 800851a:	2400      	movs	r4, #0
 800851c:	4625      	mov	r5, r4
 800851e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008520:	4656      	mov	r6, sl
 8008522:	43db      	mvns	r3, r3
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	2700      	movs	r7, #0
 8008528:	4621      	mov	r1, r4
 800852a:	4658      	mov	r0, fp
 800852c:	f000 fbb4 	bl	8008c98 <_Bfree>
 8008530:	2d00      	cmp	r5, #0
 8008532:	d0dc      	beq.n	80084ee <_dtoa_r+0x65e>
 8008534:	b12f      	cbz	r7, 8008542 <_dtoa_r+0x6b2>
 8008536:	42af      	cmp	r7, r5
 8008538:	d003      	beq.n	8008542 <_dtoa_r+0x6b2>
 800853a:	4639      	mov	r1, r7
 800853c:	4658      	mov	r0, fp
 800853e:	f000 fbab 	bl	8008c98 <_Bfree>
 8008542:	4629      	mov	r1, r5
 8008544:	4658      	mov	r0, fp
 8008546:	f000 fba7 	bl	8008c98 <_Bfree>
 800854a:	e7d0      	b.n	80084ee <_dtoa_r+0x65e>
 800854c:	9704      	str	r7, [sp, #16]
 800854e:	4633      	mov	r3, r6
 8008550:	461e      	mov	r6, r3
 8008552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008556:	2a39      	cmp	r2, #57	@ 0x39
 8008558:	d107      	bne.n	800856a <_dtoa_r+0x6da>
 800855a:	459a      	cmp	sl, r3
 800855c:	d1f8      	bne.n	8008550 <_dtoa_r+0x6c0>
 800855e:	9a04      	ldr	r2, [sp, #16]
 8008560:	3201      	adds	r2, #1
 8008562:	9204      	str	r2, [sp, #16]
 8008564:	2230      	movs	r2, #48	@ 0x30
 8008566:	f88a 2000 	strb.w	r2, [sl]
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	3201      	adds	r2, #1
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	e7bd      	b.n	80084ee <_dtoa_r+0x65e>
 8008572:	2200      	movs	r2, #0
 8008574:	4b7a      	ldr	r3, [pc, #488]	@ (8008760 <_dtoa_r+0x8d0>)
 8008576:	f7f8 f843 	bl	8000600 <__aeabi_dmul>
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
 8008582:	f7f8 faa5 	bl	8000ad0 <__aeabi_dcmpeq>
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f aebb 	beq.w	8008302 <_dtoa_r+0x472>
 800858c:	e6f0      	b.n	8008370 <_dtoa_r+0x4e0>
 800858e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008590:	2a00      	cmp	r2, #0
 8008592:	f000 80db 	beq.w	800874c <_dtoa_r+0x8bc>
 8008596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008598:	2a01      	cmp	r2, #1
 800859a:	f300 80bf 	bgt.w	800871c <_dtoa_r+0x88c>
 800859e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	f000 80b7 	beq.w	8008714 <_dtoa_r+0x884>
 80085a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085ac:	4646      	mov	r6, r8
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	2101      	movs	r1, #1
 80085b2:	4658      	mov	r0, fp
 80085b4:	4498      	add	r8, r3
 80085b6:	441a      	add	r2, r3
 80085b8:	9208      	str	r2, [sp, #32]
 80085ba:	f000 fc23 	bl	8008e04 <__i2b>
 80085be:	4605      	mov	r5, r0
 80085c0:	b15e      	cbz	r6, 80085da <_dtoa_r+0x74a>
 80085c2:	9b08      	ldr	r3, [sp, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dd08      	ble.n	80085da <_dtoa_r+0x74a>
 80085c8:	42b3      	cmp	r3, r6
 80085ca:	9a08      	ldr	r2, [sp, #32]
 80085cc:	bfa8      	it	ge
 80085ce:	4633      	movge	r3, r6
 80085d0:	eba8 0803 	sub.w	r8, r8, r3
 80085d4:	1af6      	subs	r6, r6, r3
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	9308      	str	r3, [sp, #32]
 80085da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085dc:	b1f3      	cbz	r3, 800861c <_dtoa_r+0x78c>
 80085de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80b7 	beq.w	8008754 <_dtoa_r+0x8c4>
 80085e6:	b18c      	cbz	r4, 800860c <_dtoa_r+0x77c>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4622      	mov	r2, r4
 80085ec:	4658      	mov	r0, fp
 80085ee:	f000 fcc9 	bl	8008f84 <__pow5mult>
 80085f2:	464a      	mov	r2, r9
 80085f4:	4601      	mov	r1, r0
 80085f6:	4605      	mov	r5, r0
 80085f8:	4658      	mov	r0, fp
 80085fa:	f000 fc19 	bl	8008e30 <__multiply>
 80085fe:	4649      	mov	r1, r9
 8008600:	9004      	str	r0, [sp, #16]
 8008602:	4658      	mov	r0, fp
 8008604:	f000 fb48 	bl	8008c98 <_Bfree>
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	4699      	mov	r9, r3
 800860c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860e:	1b1a      	subs	r2, r3, r4
 8008610:	d004      	beq.n	800861c <_dtoa_r+0x78c>
 8008612:	4649      	mov	r1, r9
 8008614:	4658      	mov	r0, fp
 8008616:	f000 fcb5 	bl	8008f84 <__pow5mult>
 800861a:	4681      	mov	r9, r0
 800861c:	2101      	movs	r1, #1
 800861e:	4658      	mov	r0, fp
 8008620:	f000 fbf0 	bl	8008e04 <__i2b>
 8008624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008626:	4604      	mov	r4, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 81cf 	beq.w	80089cc <_dtoa_r+0xb3c>
 800862e:	461a      	mov	r2, r3
 8008630:	4601      	mov	r1, r0
 8008632:	4658      	mov	r0, fp
 8008634:	f000 fca6 	bl	8008f84 <__pow5mult>
 8008638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800863a:	4604      	mov	r4, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	f300 8095 	bgt.w	800876c <_dtoa_r+0x8dc>
 8008642:	9b02      	ldr	r3, [sp, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 8087 	bne.w	8008758 <_dtoa_r+0x8c8>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008650:	2b00      	cmp	r3, #0
 8008652:	f040 8089 	bne.w	8008768 <_dtoa_r+0x8d8>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800865c:	0d1b      	lsrs	r3, r3, #20
 800865e:	051b      	lsls	r3, r3, #20
 8008660:	b12b      	cbz	r3, 800866e <_dtoa_r+0x7de>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	f108 0801 	add.w	r8, r8, #1
 8008668:	3301      	adds	r3, #1
 800866a:	9308      	str	r3, [sp, #32]
 800866c:	2301      	movs	r3, #1
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 81b0 	beq.w	80089d8 <_dtoa_r+0xb48>
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800867e:	6918      	ldr	r0, [r3, #16]
 8008680:	f000 fb74 	bl	8008d6c <__hi0bits>
 8008684:	f1c0 0020 	rsb	r0, r0, #32
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	4418      	add	r0, r3
 800868c:	f010 001f 	ands.w	r0, r0, #31
 8008690:	d077      	beq.n	8008782 <_dtoa_r+0x8f2>
 8008692:	f1c0 0320 	rsb	r3, r0, #32
 8008696:	2b04      	cmp	r3, #4
 8008698:	dd6b      	ble.n	8008772 <_dtoa_r+0x8e2>
 800869a:	f1c0 001c 	rsb	r0, r0, #28
 800869e:	9b08      	ldr	r3, [sp, #32]
 80086a0:	4480      	add	r8, r0
 80086a2:	4403      	add	r3, r0
 80086a4:	4406      	add	r6, r0
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	f1b8 0f00 	cmp.w	r8, #0
 80086ac:	dd05      	ble.n	80086ba <_dtoa_r+0x82a>
 80086ae:	4649      	mov	r1, r9
 80086b0:	4642      	mov	r2, r8
 80086b2:	4658      	mov	r0, fp
 80086b4:	f000 fcc0 	bl	8009038 <__lshift>
 80086b8:	4681      	mov	r9, r0
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd05      	ble.n	80086cc <_dtoa_r+0x83c>
 80086c0:	4621      	mov	r1, r4
 80086c2:	461a      	mov	r2, r3
 80086c4:	4658      	mov	r0, fp
 80086c6:	f000 fcb7 	bl	8009038 <__lshift>
 80086ca:	4604      	mov	r4, r0
 80086cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d059      	beq.n	8008786 <_dtoa_r+0x8f6>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4648      	mov	r0, r9
 80086d6:	f000 fd1b 	bl	8009110 <__mcmp>
 80086da:	2800      	cmp	r0, #0
 80086dc:	da53      	bge.n	8008786 <_dtoa_r+0x8f6>
 80086de:	1e7b      	subs	r3, r7, #1
 80086e0:	4649      	mov	r1, r9
 80086e2:	220a      	movs	r2, #10
 80086e4:	4658      	mov	r0, fp
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	2300      	movs	r3, #0
 80086ea:	f000 faf7 	bl	8008cdc <__multadd>
 80086ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f0:	4681      	mov	r9, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 8172 	beq.w	80089dc <_dtoa_r+0xb4c>
 80086f8:	2300      	movs	r3, #0
 80086fa:	4629      	mov	r1, r5
 80086fc:	220a      	movs	r2, #10
 80086fe:	4658      	mov	r0, fp
 8008700:	f000 faec 	bl	8008cdc <__multadd>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	4605      	mov	r5, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	dc67      	bgt.n	80087dc <_dtoa_r+0x94c>
 800870c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870e:	2b02      	cmp	r3, #2
 8008710:	dc41      	bgt.n	8008796 <_dtoa_r+0x906>
 8008712:	e063      	b.n	80087dc <_dtoa_r+0x94c>
 8008714:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008716:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800871a:	e746      	b.n	80085aa <_dtoa_r+0x71a>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	1e5c      	subs	r4, r3, #1
 8008720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008722:	42a3      	cmp	r3, r4
 8008724:	bfb7      	itett	lt
 8008726:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008728:	1b1c      	subge	r4, r3, r4
 800872a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800872c:	1ae3      	sublt	r3, r4, r3
 800872e:	bfbe      	ittt	lt
 8008730:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008732:	2400      	movlt	r4, #0
 8008734:	18d2      	addlt	r2, r2, r3
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	bfb8      	it	lt
 800873a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfb5      	itete	lt
 8008740:	eba8 0603 	sublt.w	r6, r8, r3
 8008744:	4646      	movge	r6, r8
 8008746:	2300      	movlt	r3, #0
 8008748:	9b07      	ldrge	r3, [sp, #28]
 800874a:	e730      	b.n	80085ae <_dtoa_r+0x71e>
 800874c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800874e:	4646      	mov	r6, r8
 8008750:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008752:	e735      	b.n	80085c0 <_dtoa_r+0x730>
 8008754:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008756:	e75c      	b.n	8008612 <_dtoa_r+0x782>
 8008758:	2300      	movs	r3, #0
 800875a:	e788      	b.n	800866e <_dtoa_r+0x7de>
 800875c:	3fe00000 	.word	0x3fe00000
 8008760:	40240000 	.word	0x40240000
 8008764:	40140000 	.word	0x40140000
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	e780      	b.n	800866e <_dtoa_r+0x7de>
 800876c:	2300      	movs	r3, #0
 800876e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008770:	e782      	b.n	8008678 <_dtoa_r+0x7e8>
 8008772:	d099      	beq.n	80086a8 <_dtoa_r+0x818>
 8008774:	331c      	adds	r3, #28
 8008776:	9a08      	ldr	r2, [sp, #32]
 8008778:	441a      	add	r2, r3
 800877a:	4498      	add	r8, r3
 800877c:	441e      	add	r6, r3
 800877e:	9208      	str	r2, [sp, #32]
 8008780:	e792      	b.n	80086a8 <_dtoa_r+0x818>
 8008782:	4603      	mov	r3, r0
 8008784:	e7f6      	b.n	8008774 <_dtoa_r+0x8e4>
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	9704      	str	r7, [sp, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	dc20      	bgt.n	80087d0 <_dtoa_r+0x940>
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008792:	2b02      	cmp	r3, #2
 8008794:	dd1e      	ble.n	80087d4 <_dtoa_r+0x944>
 8008796:	9b00      	ldr	r3, [sp, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f47f aec0 	bne.w	800851e <_dtoa_r+0x68e>
 800879e:	4621      	mov	r1, r4
 80087a0:	2205      	movs	r2, #5
 80087a2:	4658      	mov	r0, fp
 80087a4:	f000 fa9a 	bl	8008cdc <__multadd>
 80087a8:	4601      	mov	r1, r0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4648      	mov	r0, r9
 80087ae:	f000 fcaf 	bl	8009110 <__mcmp>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f77f aeb3 	ble.w	800851e <_dtoa_r+0x68e>
 80087b8:	2331      	movs	r3, #49	@ 0x31
 80087ba:	4656      	mov	r6, sl
 80087bc:	f806 3b01 	strb.w	r3, [r6], #1
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	3301      	adds	r3, #1
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	e6ae      	b.n	8008526 <_dtoa_r+0x696>
 80087c8:	9c07      	ldr	r4, [sp, #28]
 80087ca:	9704      	str	r7, [sp, #16]
 80087cc:	4625      	mov	r5, r4
 80087ce:	e7f3      	b.n	80087b8 <_dtoa_r+0x928>
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8104 	beq.w	80089e4 <_dtoa_r+0xb54>
 80087dc:	2e00      	cmp	r6, #0
 80087de:	dd05      	ble.n	80087ec <_dtoa_r+0x95c>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4632      	mov	r2, r6
 80087e4:	4658      	mov	r0, fp
 80087e6:	f000 fc27 	bl	8009038 <__lshift>
 80087ea:	4605      	mov	r5, r0
 80087ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d05a      	beq.n	80088a8 <_dtoa_r+0xa18>
 80087f2:	6869      	ldr	r1, [r5, #4]
 80087f4:	4658      	mov	r0, fp
 80087f6:	f000 fa0f 	bl	8008c18 <_Balloc>
 80087fa:	4606      	mov	r6, r0
 80087fc:	b928      	cbnz	r0, 800880a <_dtoa_r+0x97a>
 80087fe:	4b84      	ldr	r3, [pc, #528]	@ (8008a10 <_dtoa_r+0xb80>)
 8008800:	4602      	mov	r2, r0
 8008802:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008806:	f7ff bb5a 	b.w	8007ebe <_dtoa_r+0x2e>
 800880a:	692a      	ldr	r2, [r5, #16]
 800880c:	f105 010c 	add.w	r1, r5, #12
 8008810:	300c      	adds	r0, #12
 8008812:	3202      	adds	r2, #2
 8008814:	0092      	lsls	r2, r2, #2
 8008816:	f000 ffb5 	bl	8009784 <memcpy>
 800881a:	2201      	movs	r2, #1
 800881c:	4631      	mov	r1, r6
 800881e:	4658      	mov	r0, fp
 8008820:	f000 fc0a 	bl	8009038 <__lshift>
 8008824:	f10a 0301 	add.w	r3, sl, #1
 8008828:	462f      	mov	r7, r5
 800882a:	4605      	mov	r5, r0
 800882c:	9307      	str	r3, [sp, #28]
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	4453      	add	r3, sl
 8008832:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	930a      	str	r3, [sp, #40]	@ 0x28
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	4621      	mov	r1, r4
 8008840:	4648      	mov	r0, r9
 8008842:	3b01      	subs	r3, #1
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	f7ff fa94 	bl	8007d72 <quorem>
 800884a:	4639      	mov	r1, r7
 800884c:	9002      	str	r0, [sp, #8]
 800884e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008852:	4648      	mov	r0, r9
 8008854:	f000 fc5c 	bl	8009110 <__mcmp>
 8008858:	462a      	mov	r2, r5
 800885a:	9008      	str	r0, [sp, #32]
 800885c:	4621      	mov	r1, r4
 800885e:	4658      	mov	r0, fp
 8008860:	f000 fc72 	bl	8009148 <__mdiff>
 8008864:	68c2      	ldr	r2, [r0, #12]
 8008866:	4606      	mov	r6, r0
 8008868:	bb02      	cbnz	r2, 80088ac <_dtoa_r+0xa1c>
 800886a:	4601      	mov	r1, r0
 800886c:	4648      	mov	r0, r9
 800886e:	f000 fc4f 	bl	8009110 <__mcmp>
 8008872:	4602      	mov	r2, r0
 8008874:	4631      	mov	r1, r6
 8008876:	4658      	mov	r0, fp
 8008878:	920e      	str	r2, [sp, #56]	@ 0x38
 800887a:	f000 fa0d 	bl	8008c98 <_Bfree>
 800887e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008882:	9e07      	ldr	r6, [sp, #28]
 8008884:	ea43 0102 	orr.w	r1, r3, r2
 8008888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888a:	4319      	orrs	r1, r3
 800888c:	d110      	bne.n	80088b0 <_dtoa_r+0xa20>
 800888e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008892:	d029      	beq.n	80088e8 <_dtoa_r+0xa58>
 8008894:	9b08      	ldr	r3, [sp, #32]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd02      	ble.n	80088a0 <_dtoa_r+0xa10>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	f883 8000 	strb.w	r8, [r3]
 80088a6:	e63f      	b.n	8008528 <_dtoa_r+0x698>
 80088a8:	4628      	mov	r0, r5
 80088aa:	e7bb      	b.n	8008824 <_dtoa_r+0x994>
 80088ac:	2201      	movs	r2, #1
 80088ae:	e7e1      	b.n	8008874 <_dtoa_r+0x9e4>
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	db04      	blt.n	80088c0 <_dtoa_r+0xa30>
 80088b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088b8:	430b      	orrs	r3, r1
 80088ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088bc:	430b      	orrs	r3, r1
 80088be:	d120      	bne.n	8008902 <_dtoa_r+0xa72>
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	dded      	ble.n	80088a0 <_dtoa_r+0xa10>
 80088c4:	4649      	mov	r1, r9
 80088c6:	2201      	movs	r2, #1
 80088c8:	4658      	mov	r0, fp
 80088ca:	f000 fbb5 	bl	8009038 <__lshift>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4681      	mov	r9, r0
 80088d2:	f000 fc1d 	bl	8009110 <__mcmp>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	dc03      	bgt.n	80088e2 <_dtoa_r+0xa52>
 80088da:	d1e1      	bne.n	80088a0 <_dtoa_r+0xa10>
 80088dc:	f018 0f01 	tst.w	r8, #1
 80088e0:	d0de      	beq.n	80088a0 <_dtoa_r+0xa10>
 80088e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088e6:	d1d8      	bne.n	800889a <_dtoa_r+0xa0a>
 80088e8:	2339      	movs	r3, #57	@ 0x39
 80088ea:	9a00      	ldr	r2, [sp, #0]
 80088ec:	7013      	strb	r3, [r2, #0]
 80088ee:	4633      	mov	r3, r6
 80088f0:	461e      	mov	r6, r3
 80088f2:	3b01      	subs	r3, #1
 80088f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088f8:	2a39      	cmp	r2, #57	@ 0x39
 80088fa:	d052      	beq.n	80089a2 <_dtoa_r+0xb12>
 80088fc:	3201      	adds	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e612      	b.n	8008528 <_dtoa_r+0x698>
 8008902:	2a00      	cmp	r2, #0
 8008904:	dd07      	ble.n	8008916 <_dtoa_r+0xa86>
 8008906:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800890a:	d0ed      	beq.n	80088e8 <_dtoa_r+0xa58>
 800890c:	f108 0301 	add.w	r3, r8, #1
 8008910:	9a00      	ldr	r2, [sp, #0]
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	e608      	b.n	8008528 <_dtoa_r+0x698>
 8008916:	9b07      	ldr	r3, [sp, #28]
 8008918:	9a07      	ldr	r2, [sp, #28]
 800891a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800891e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008920:	4293      	cmp	r3, r2
 8008922:	d028      	beq.n	8008976 <_dtoa_r+0xae6>
 8008924:	4649      	mov	r1, r9
 8008926:	2300      	movs	r3, #0
 8008928:	220a      	movs	r2, #10
 800892a:	4658      	mov	r0, fp
 800892c:	f000 f9d6 	bl	8008cdc <__multadd>
 8008930:	42af      	cmp	r7, r5
 8008932:	4681      	mov	r9, r0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f04f 020a 	mov.w	r2, #10
 800893c:	4639      	mov	r1, r7
 800893e:	4658      	mov	r0, fp
 8008940:	d107      	bne.n	8008952 <_dtoa_r+0xac2>
 8008942:	f000 f9cb 	bl	8008cdc <__multadd>
 8008946:	4607      	mov	r7, r0
 8008948:	4605      	mov	r5, r0
 800894a:	9b07      	ldr	r3, [sp, #28]
 800894c:	3301      	adds	r3, #1
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	e774      	b.n	800883c <_dtoa_r+0x9ac>
 8008952:	f000 f9c3 	bl	8008cdc <__multadd>
 8008956:	4629      	mov	r1, r5
 8008958:	4607      	mov	r7, r0
 800895a:	2300      	movs	r3, #0
 800895c:	220a      	movs	r2, #10
 800895e:	4658      	mov	r0, fp
 8008960:	f000 f9bc 	bl	8008cdc <__multadd>
 8008964:	4605      	mov	r5, r0
 8008966:	e7f0      	b.n	800894a <_dtoa_r+0xaba>
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	2700      	movs	r7, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfcc      	ite	gt
 8008970:	461e      	movgt	r6, r3
 8008972:	2601      	movle	r6, #1
 8008974:	4456      	add	r6, sl
 8008976:	4649      	mov	r1, r9
 8008978:	2201      	movs	r2, #1
 800897a:	4658      	mov	r0, fp
 800897c:	f000 fb5c 	bl	8009038 <__lshift>
 8008980:	4621      	mov	r1, r4
 8008982:	4681      	mov	r9, r0
 8008984:	f000 fbc4 	bl	8009110 <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	dcb0      	bgt.n	80088ee <_dtoa_r+0xa5e>
 800898c:	d102      	bne.n	8008994 <_dtoa_r+0xb04>
 800898e:	f018 0f01 	tst.w	r8, #1
 8008992:	d1ac      	bne.n	80088ee <_dtoa_r+0xa5e>
 8008994:	4633      	mov	r3, r6
 8008996:	461e      	mov	r6, r3
 8008998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800899c:	2a30      	cmp	r2, #48	@ 0x30
 800899e:	d0fa      	beq.n	8008996 <_dtoa_r+0xb06>
 80089a0:	e5c2      	b.n	8008528 <_dtoa_r+0x698>
 80089a2:	459a      	cmp	sl, r3
 80089a4:	d1a4      	bne.n	80088f0 <_dtoa_r+0xa60>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	3301      	adds	r3, #1
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	2331      	movs	r3, #49	@ 0x31
 80089ae:	f88a 3000 	strb.w	r3, [sl]
 80089b2:	e5b9      	b.n	8008528 <_dtoa_r+0x698>
 80089b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a14 <_dtoa_r+0xb84>
 80089ba:	b11b      	cbz	r3, 80089c4 <_dtoa_r+0xb34>
 80089bc:	f10a 0308 	add.w	r3, sl, #8
 80089c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	4650      	mov	r0, sl
 80089c6:	b019      	add	sp, #100	@ 0x64
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	f77f ae37 	ble.w	8008642 <_dtoa_r+0x7b2>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d8:	2001      	movs	r0, #1
 80089da:	e655      	b.n	8008688 <_dtoa_r+0x7f8>
 80089dc:	9b00      	ldr	r3, [sp, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f77f aed6 	ble.w	8008790 <_dtoa_r+0x900>
 80089e4:	4656      	mov	r6, sl
 80089e6:	4621      	mov	r1, r4
 80089e8:	4648      	mov	r0, r9
 80089ea:	f7ff f9c2 	bl	8007d72 <quorem>
 80089ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	f806 8b01 	strb.w	r8, [r6], #1
 80089f8:	eba6 020a 	sub.w	r2, r6, sl
 80089fc:	4293      	cmp	r3, r2
 80089fe:	ddb3      	ble.n	8008968 <_dtoa_r+0xad8>
 8008a00:	4649      	mov	r1, r9
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	4658      	mov	r0, fp
 8008a08:	f000 f968 	bl	8008cdc <__multadd>
 8008a0c:	4681      	mov	r9, r0
 8008a0e:	e7ea      	b.n	80089e6 <_dtoa_r+0xb56>
 8008a10:	08009ff4 	.word	0x08009ff4
 8008a14:	08009f78 	.word	0x08009f78

08008a18 <_free_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d041      	beq.n	8008aa4 <_free_r+0x8c>
 8008a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a24:	1f0c      	subs	r4, r1, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfb8      	it	lt
 8008a2a:	18e4      	addlt	r4, r4, r3
 8008a2c:	f000 f8e8 	bl	8008c00 <__malloc_lock>
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <_free_r+0x90>)
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b933      	cbnz	r3, 8008a44 <_free_r+0x2c>
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a40:	f000 b8e4 	b.w	8008c0c <__malloc_unlock>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d908      	bls.n	8008a5a <_free_r+0x42>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	1821      	adds	r1, r4, r0
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf01      	itttt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	1809      	addeq	r1, r1, r0
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	e7ed      	b.n	8008a36 <_free_r+0x1e>
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b10b      	cbz	r3, 8008a64 <_free_r+0x4c>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d9fa      	bls.n	8008a5a <_free_r+0x42>
 8008a64:	6811      	ldr	r1, [r2, #0]
 8008a66:	1850      	adds	r0, r2, r1
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d10b      	bne.n	8008a84 <_free_r+0x6c>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	4401      	add	r1, r0
 8008a70:	1850      	adds	r0, r2, r1
 8008a72:	6011      	str	r1, [r2, #0]
 8008a74:	4283      	cmp	r3, r0
 8008a76:	d1e0      	bne.n	8008a3a <_free_r+0x22>
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	4408      	add	r0, r1
 8008a7e:	6053      	str	r3, [r2, #4]
 8008a80:	6010      	str	r0, [r2, #0]
 8008a82:	e7da      	b.n	8008a3a <_free_r+0x22>
 8008a84:	d902      	bls.n	8008a8c <_free_r+0x74>
 8008a86:	230c      	movs	r3, #12
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	e7d6      	b.n	8008a3a <_free_r+0x22>
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	1821      	adds	r1, r4, r0
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf02      	ittt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	1809      	addeq	r1, r1, r0
 8008a9a:	6063      	str	r3, [r4, #4]
 8008a9c:	bf08      	it	eq
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	6054      	str	r4, [r2, #4]
 8008aa2:	e7ca      	b.n	8008a3a <_free_r+0x22>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200003f8 	.word	0x200003f8

08008aac <malloc>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	@ (8008ab8 <malloc+0xc>)
 8008aae:	4601      	mov	r1, r0
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	f000 b825 	b.w	8008b00 <_malloc_r>
 8008ab6:	bf00      	nop
 8008ab8:	20000038 	.word	0x20000038

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0f      	ldr	r6, [pc, #60]	@ (8008afc <sbrk_aligned+0x40>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	6831      	ldr	r1, [r6, #0]
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f000 fe4c 	bl	8009764 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 fe47 	bl	8009764 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d103      	bne.n	8008ae2 <sbrk_aligned+0x26>
 8008ada:	f04f 34ff 	mov.w	r4, #4294967295
 8008ade:	4620      	mov	r0, r4
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	1cc4      	adds	r4, r0, #3
 8008ae4:	f024 0403 	bic.w	r4, r4, #3
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d0f8      	beq.n	8008ade <sbrk_aligned+0x22>
 8008aec:	1a21      	subs	r1, r4, r0
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 fe38 	bl	8009764 <_sbrk_r>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d1f2      	bne.n	8008ade <sbrk_aligned+0x22>
 8008af8:	e7ef      	b.n	8008ada <sbrk_aligned+0x1e>
 8008afa:	bf00      	nop
 8008afc:	200003f4 	.word	0x200003f4

08008b00 <_malloc_r>:
 8008b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b04:	1ccd      	adds	r5, r1, #3
 8008b06:	4606      	mov	r6, r0
 8008b08:	f025 0503 	bic.w	r5, r5, #3
 8008b0c:	3508      	adds	r5, #8
 8008b0e:	2d0c      	cmp	r5, #12
 8008b10:	bf38      	it	cc
 8008b12:	250c      	movcc	r5, #12
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	db01      	blt.n	8008b1c <_malloc_r+0x1c>
 8008b18:	42a9      	cmp	r1, r5
 8008b1a:	d904      	bls.n	8008b26 <_malloc_r+0x26>
 8008b1c:	230c      	movs	r3, #12
 8008b1e:	6033      	str	r3, [r6, #0]
 8008b20:	2000      	movs	r0, #0
 8008b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bfc <_malloc_r+0xfc>
 8008b2a:	f000 f869 	bl	8008c00 <__malloc_lock>
 8008b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b32:	461c      	mov	r4, r3
 8008b34:	bb44      	cbnz	r4, 8008b88 <_malloc_r+0x88>
 8008b36:	4629      	mov	r1, r5
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff ffbf 	bl	8008abc <sbrk_aligned>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	4604      	mov	r4, r0
 8008b42:	d158      	bne.n	8008bf6 <_malloc_r+0xf6>
 8008b44:	f8d8 4000 	ldr.w	r4, [r8]
 8008b48:	4627      	mov	r7, r4
 8008b4a:	2f00      	cmp	r7, #0
 8008b4c:	d143      	bne.n	8008bd6 <_malloc_r+0xd6>
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	d04b      	beq.n	8008bea <_malloc_r+0xea>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	4639      	mov	r1, r7
 8008b56:	4630      	mov	r0, r6
 8008b58:	eb04 0903 	add.w	r9, r4, r3
 8008b5c:	f000 fe02 	bl	8009764 <_sbrk_r>
 8008b60:	4581      	cmp	r9, r0
 8008b62:	d142      	bne.n	8008bea <_malloc_r+0xea>
 8008b64:	6821      	ldr	r1, [r4, #0]
 8008b66:	4630      	mov	r0, r6
 8008b68:	1a6d      	subs	r5, r5, r1
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	f7ff ffa6 	bl	8008abc <sbrk_aligned>
 8008b70:	3001      	adds	r0, #1
 8008b72:	d03a      	beq.n	8008bea <_malloc_r+0xea>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	442b      	add	r3, r5
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	bb62      	cbnz	r2, 8008bdc <_malloc_r+0xdc>
 8008b82:	f8c8 7000 	str.w	r7, [r8]
 8008b86:	e00f      	b.n	8008ba8 <_malloc_r+0xa8>
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	1b52      	subs	r2, r2, r5
 8008b8c:	d420      	bmi.n	8008bd0 <_malloc_r+0xd0>
 8008b8e:	2a0b      	cmp	r2, #11
 8008b90:	d917      	bls.n	8008bc2 <_malloc_r+0xc2>
 8008b92:	1961      	adds	r1, r4, r5
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	6025      	str	r5, [r4, #0]
 8008b98:	bf18      	it	ne
 8008b9a:	6059      	strne	r1, [r3, #4]
 8008b9c:	6863      	ldr	r3, [r4, #4]
 8008b9e:	bf08      	it	eq
 8008ba0:	f8c8 1000 	streq.w	r1, [r8]
 8008ba4:	5162      	str	r2, [r4, r5]
 8008ba6:	604b      	str	r3, [r1, #4]
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f000 f82f 	bl	8008c0c <__malloc_unlock>
 8008bae:	f104 000b 	add.w	r0, r4, #11
 8008bb2:	1d23      	adds	r3, r4, #4
 8008bb4:	f020 0007 	bic.w	r0, r0, #7
 8008bb8:	1ac2      	subs	r2, r0, r3
 8008bba:	bf1c      	itt	ne
 8008bbc:	1a1b      	subne	r3, r3, r0
 8008bbe:	50a3      	strne	r3, [r4, r2]
 8008bc0:	e7af      	b.n	8008b22 <_malloc_r+0x22>
 8008bc2:	6862      	ldr	r2, [r4, #4]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	bf0c      	ite	eq
 8008bc8:	f8c8 2000 	streq.w	r2, [r8]
 8008bcc:	605a      	strne	r2, [r3, #4]
 8008bce:	e7eb      	b.n	8008ba8 <_malloc_r+0xa8>
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	6864      	ldr	r4, [r4, #4]
 8008bd4:	e7ae      	b.n	8008b34 <_malloc_r+0x34>
 8008bd6:	463c      	mov	r4, r7
 8008bd8:	687f      	ldr	r7, [r7, #4]
 8008bda:	e7b6      	b.n	8008b4a <_malloc_r+0x4a>
 8008bdc:	461a      	mov	r2, r3
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d1fb      	bne.n	8008bdc <_malloc_r+0xdc>
 8008be4:	2300      	movs	r3, #0
 8008be6:	6053      	str	r3, [r2, #4]
 8008be8:	e7de      	b.n	8008ba8 <_malloc_r+0xa8>
 8008bea:	230c      	movs	r3, #12
 8008bec:	4630      	mov	r0, r6
 8008bee:	6033      	str	r3, [r6, #0]
 8008bf0:	f000 f80c 	bl	8008c0c <__malloc_unlock>
 8008bf4:	e794      	b.n	8008b20 <_malloc_r+0x20>
 8008bf6:	6005      	str	r5, [r0, #0]
 8008bf8:	e7d6      	b.n	8008ba8 <_malloc_r+0xa8>
 8008bfa:	bf00      	nop
 8008bfc:	200003f8 	.word	0x200003f8

08008c00 <__malloc_lock>:
 8008c00:	4801      	ldr	r0, [pc, #4]	@ (8008c08 <__malloc_lock+0x8>)
 8008c02:	f7ff b8a6 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8008c06:	bf00      	nop
 8008c08:	200003f0 	.word	0x200003f0

08008c0c <__malloc_unlock>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	@ (8008c14 <__malloc_unlock+0x8>)
 8008c0e:	f7ff b8a1 	b.w	8007d54 <__retarget_lock_release_recursive>
 8008c12:	bf00      	nop
 8008c14:	200003f0 	.word	0x200003f0

08008c18 <_Balloc>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	69c6      	ldr	r6, [r0, #28]
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	b976      	cbnz	r6, 8008c40 <_Balloc+0x28>
 8008c22:	2010      	movs	r0, #16
 8008c24:	f7ff ff42 	bl	8008aac <malloc>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	61e0      	str	r0, [r4, #28]
 8008c2c:	b920      	cbnz	r0, 8008c38 <_Balloc+0x20>
 8008c2e:	4b18      	ldr	r3, [pc, #96]	@ (8008c90 <_Balloc+0x78>)
 8008c30:	216b      	movs	r1, #107	@ 0x6b
 8008c32:	4818      	ldr	r0, [pc, #96]	@ (8008c94 <_Balloc+0x7c>)
 8008c34:	f000 fdb4 	bl	80097a0 <__assert_func>
 8008c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c3c:	6006      	str	r6, [r0, #0]
 8008c3e:	60c6      	str	r6, [r0, #12]
 8008c40:	69e6      	ldr	r6, [r4, #28]
 8008c42:	68f3      	ldr	r3, [r6, #12]
 8008c44:	b183      	cbz	r3, 8008c68 <_Balloc+0x50>
 8008c46:	69e3      	ldr	r3, [r4, #28]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c4e:	b9b8      	cbnz	r0, 8008c80 <_Balloc+0x68>
 8008c50:	2101      	movs	r1, #1
 8008c52:	4620      	mov	r0, r4
 8008c54:	fa01 f605 	lsl.w	r6, r1, r5
 8008c58:	1d72      	adds	r2, r6, #5
 8008c5a:	0092      	lsls	r2, r2, #2
 8008c5c:	f000 fdbe 	bl	80097dc <_calloc_r>
 8008c60:	b160      	cbz	r0, 8008c7c <_Balloc+0x64>
 8008c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c66:	e00e      	b.n	8008c86 <_Balloc+0x6e>
 8008c68:	2221      	movs	r2, #33	@ 0x21
 8008c6a:	2104      	movs	r1, #4
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 fdb5 	bl	80097dc <_calloc_r>
 8008c72:	69e3      	ldr	r3, [r4, #28]
 8008c74:	60f0      	str	r0, [r6, #12]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e4      	bne.n	8008c46 <_Balloc+0x2e>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	6802      	ldr	r2, [r0, #0]
 8008c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c86:	2300      	movs	r3, #0
 8008c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c8c:	e7f7      	b.n	8008c7e <_Balloc+0x66>
 8008c8e:	bf00      	nop
 8008c90:	08009f85 	.word	0x08009f85
 8008c94:	0800a005 	.word	0x0800a005

08008c98 <_Bfree>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	69c6      	ldr	r6, [r0, #28]
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b976      	cbnz	r6, 8008cc0 <_Bfree+0x28>
 8008ca2:	2010      	movs	r0, #16
 8008ca4:	f7ff ff02 	bl	8008aac <malloc>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	61e8      	str	r0, [r5, #28]
 8008cac:	b920      	cbnz	r0, 8008cb8 <_Bfree+0x20>
 8008cae:	4b09      	ldr	r3, [pc, #36]	@ (8008cd4 <_Bfree+0x3c>)
 8008cb0:	218f      	movs	r1, #143	@ 0x8f
 8008cb2:	4809      	ldr	r0, [pc, #36]	@ (8008cd8 <_Bfree+0x40>)
 8008cb4:	f000 fd74 	bl	80097a0 <__assert_func>
 8008cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cbc:	6006      	str	r6, [r0, #0]
 8008cbe:	60c6      	str	r6, [r0, #12]
 8008cc0:	b13c      	cbz	r4, 8008cd2 <_Bfree+0x3a>
 8008cc2:	69eb      	ldr	r3, [r5, #28]
 8008cc4:	6862      	ldr	r2, [r4, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ccc:	6021      	str	r1, [r4, #0]
 8008cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	08009f85 	.word	0x08009f85
 8008cd8:	0800a005 	.word	0x0800a005

08008cdc <__multadd>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	f101 0c14 	add.w	ip, r1, #20
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	461e      	mov	r6, r3
 8008cea:	690d      	ldr	r5, [r1, #16]
 8008cec:	2000      	movs	r0, #0
 8008cee:	f8dc 3000 	ldr.w	r3, [ip]
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	b299      	uxth	r1, r3
 8008cf6:	4285      	cmp	r5, r0
 8008cf8:	fb02 6101 	mla	r1, r2, r1, r6
 8008cfc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d00:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8008d04:	b289      	uxth	r1, r1
 8008d06:	fb02 3306 	mla	r3, r2, r6, r3
 8008d0a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d12:	f84c 1b04 	str.w	r1, [ip], #4
 8008d16:	dcea      	bgt.n	8008cee <__multadd+0x12>
 8008d18:	b30e      	cbz	r6, 8008d5e <__multadd+0x82>
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	dc19      	bgt.n	8008d54 <__multadd+0x78>
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	4638      	mov	r0, r7
 8008d24:	3101      	adds	r1, #1
 8008d26:	f7ff ff77 	bl	8008c18 <_Balloc>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	b928      	cbnz	r0, 8008d3a <__multadd+0x5e>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <__multadd+0x88>)
 8008d32:	21ba      	movs	r1, #186	@ 0xba
 8008d34:	480c      	ldr	r0, [pc, #48]	@ (8008d68 <__multadd+0x8c>)
 8008d36:	f000 fd33 	bl	80097a0 <__assert_func>
 8008d3a:	6922      	ldr	r2, [r4, #16]
 8008d3c:	f104 010c 	add.w	r1, r4, #12
 8008d40:	300c      	adds	r0, #12
 8008d42:	3202      	adds	r2, #2
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	f000 fd1d 	bl	8009784 <memcpy>
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4644      	mov	r4, r8
 8008d4e:	4638      	mov	r0, r7
 8008d50:	f7ff ffa2 	bl	8008c98 <_Bfree>
 8008d54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d58:	3501      	adds	r5, #1
 8008d5a:	615e      	str	r6, [r3, #20]
 8008d5c:	6125      	str	r5, [r4, #16]
 8008d5e:	4620      	mov	r0, r4
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	08009ff4 	.word	0x08009ff4
 8008d68:	0800a005 	.word	0x0800a005

08008d6c <__hi0bits>:
 8008d6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d70:	4603      	mov	r3, r0
 8008d72:	bf36      	itet	cc
 8008d74:	0403      	lslcc	r3, r0, #16
 8008d76:	2000      	movcs	r0, #0
 8008d78:	2010      	movcc	r0, #16
 8008d7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d7e:	bf3c      	itt	cc
 8008d80:	021b      	lslcc	r3, r3, #8
 8008d82:	3008      	addcc	r0, #8
 8008d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d88:	bf3c      	itt	cc
 8008d8a:	011b      	lslcc	r3, r3, #4
 8008d8c:	3004      	addcc	r0, #4
 8008d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d92:	bf3c      	itt	cc
 8008d94:	009b      	lslcc	r3, r3, #2
 8008d96:	3002      	addcc	r0, #2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	db05      	blt.n	8008da8 <__hi0bits+0x3c>
 8008d9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008da0:	f100 0001 	add.w	r0, r0, #1
 8008da4:	bf08      	it	eq
 8008da6:	2020      	moveq	r0, #32
 8008da8:	4770      	bx	lr

08008daa <__lo0bits>:
 8008daa:	6803      	ldr	r3, [r0, #0]
 8008dac:	4602      	mov	r2, r0
 8008dae:	f013 0007 	ands.w	r0, r3, #7
 8008db2:	d00b      	beq.n	8008dcc <__lo0bits+0x22>
 8008db4:	07d9      	lsls	r1, r3, #31
 8008db6:	d421      	bmi.n	8008dfc <__lo0bits+0x52>
 8008db8:	0798      	lsls	r0, r3, #30
 8008dba:	bf47      	ittee	mi
 8008dbc:	085b      	lsrmi	r3, r3, #1
 8008dbe:	2001      	movmi	r0, #1
 8008dc0:	089b      	lsrpl	r3, r3, #2
 8008dc2:	2002      	movpl	r0, #2
 8008dc4:	bf4c      	ite	mi
 8008dc6:	6013      	strmi	r3, [r2, #0]
 8008dc8:	6013      	strpl	r3, [r2, #0]
 8008dca:	4770      	bx	lr
 8008dcc:	b299      	uxth	r1, r3
 8008dce:	b909      	cbnz	r1, 8008dd4 <__lo0bits+0x2a>
 8008dd0:	0c1b      	lsrs	r3, r3, #16
 8008dd2:	2010      	movs	r0, #16
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	b909      	cbnz	r1, 8008ddc <__lo0bits+0x32>
 8008dd8:	3008      	adds	r0, #8
 8008dda:	0a1b      	lsrs	r3, r3, #8
 8008ddc:	0719      	lsls	r1, r3, #28
 8008dde:	bf04      	itt	eq
 8008de0:	091b      	lsreq	r3, r3, #4
 8008de2:	3004      	addeq	r0, #4
 8008de4:	0799      	lsls	r1, r3, #30
 8008de6:	bf04      	itt	eq
 8008de8:	089b      	lsreq	r3, r3, #2
 8008dea:	3002      	addeq	r0, #2
 8008dec:	07d9      	lsls	r1, r3, #31
 8008dee:	d403      	bmi.n	8008df8 <__lo0bits+0x4e>
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	f100 0001 	add.w	r0, r0, #1
 8008df6:	d003      	beq.n	8008e00 <__lo0bits+0x56>
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	4770      	bx	lr
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4770      	bx	lr
 8008e00:	2020      	movs	r0, #32
 8008e02:	4770      	bx	lr

08008e04 <__i2b>:
 8008e04:	b510      	push	{r4, lr}
 8008e06:	460c      	mov	r4, r1
 8008e08:	2101      	movs	r1, #1
 8008e0a:	f7ff ff05 	bl	8008c18 <_Balloc>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <__i2b+0x1a>
 8008e12:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <__i2b+0x24>)
 8008e14:	f240 1145 	movw	r1, #325	@ 0x145
 8008e18:	4804      	ldr	r0, [pc, #16]	@ (8008e2c <__i2b+0x28>)
 8008e1a:	f000 fcc1 	bl	80097a0 <__assert_func>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	6144      	str	r4, [r0, #20]
 8008e22:	6103      	str	r3, [r0, #16]
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	bf00      	nop
 8008e28:	08009ff4 	.word	0x08009ff4
 8008e2c:	0800a005 	.word	0x0800a005

08008e30 <__multiply>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	4614      	mov	r4, r2
 8008e36:	690a      	ldr	r2, [r1, #16]
 8008e38:	460f      	mov	r7, r1
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	bfa2      	ittt	ge
 8008e42:	4623      	movge	r3, r4
 8008e44:	460c      	movge	r4, r1
 8008e46:	461f      	movge	r7, r3
 8008e48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e52:	6861      	ldr	r1, [r4, #4]
 8008e54:	eb0a 0609 	add.w	r6, sl, r9
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	bfb8      	it	lt
 8008e5c:	3101      	addlt	r1, #1
 8008e5e:	f7ff fedb 	bl	8008c18 <_Balloc>
 8008e62:	b930      	cbnz	r0, 8008e72 <__multiply+0x42>
 8008e64:	4602      	mov	r2, r0
 8008e66:	4b45      	ldr	r3, [pc, #276]	@ (8008f7c <__multiply+0x14c>)
 8008e68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e6c:	4844      	ldr	r0, [pc, #272]	@ (8008f80 <__multiply+0x150>)
 8008e6e:	f000 fc97 	bl	80097a0 <__assert_func>
 8008e72:	f100 0514 	add.w	r5, r0, #20
 8008e76:	2200      	movs	r2, #0
 8008e78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	4543      	cmp	r3, r8
 8008e80:	d321      	bcc.n	8008ec6 <__multiply+0x96>
 8008e82:	f107 0114 	add.w	r1, r7, #20
 8008e86:	f104 0214 	add.w	r2, r4, #20
 8008e8a:	f104 0715 	add.w	r7, r4, #21
 8008e8e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e92:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	1b13      	subs	r3, r2, r4
 8008e9a:	3b15      	subs	r3, #21
 8008e9c:	f023 0303 	bic.w	r3, r3, #3
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	42ba      	cmp	r2, r7
 8008ea4:	bf38      	it	cc
 8008ea6:	2304      	movcc	r3, #4
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	9103      	str	r1, [sp, #12]
 8008eae:	428b      	cmp	r3, r1
 8008eb0:	d80c      	bhi.n	8008ecc <__multiply+0x9c>
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	dd03      	ble.n	8008ebe <__multiply+0x8e>
 8008eb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d05b      	beq.n	8008f76 <__multiply+0x146>
 8008ebe:	6106      	str	r6, [r0, #16]
 8008ec0:	b005      	add	sp, #20
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	f843 2b04 	str.w	r2, [r3], #4
 8008eca:	e7d8      	b.n	8008e7e <__multiply+0x4e>
 8008ecc:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ed0:	f1ba 0f00 	cmp.w	sl, #0
 8008ed4:	d024      	beq.n	8008f20 <__multiply+0xf0>
 8008ed6:	f104 0e14 	add.w	lr, r4, #20
 8008eda:	46a9      	mov	r9, r5
 8008edc:	f04f 0c00 	mov.w	ip, #0
 8008ee0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ee4:	f8d9 3000 	ldr.w	r3, [r9]
 8008ee8:	fa1f fb87 	uxth.w	fp, r7
 8008eec:	4572      	cmp	r2, lr
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ef4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ef8:	f8d9 7000 	ldr.w	r7, [r9]
 8008efc:	4463      	add	r3, ip
 8008efe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f02:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f14:	f849 3b04 	str.w	r3, [r9], #4
 8008f18:	d8e2      	bhi.n	8008ee0 <__multiply+0xb0>
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	f845 c003 	str.w	ip, [r5, r3]
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	3104      	adds	r1, #4
 8008f24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d021      	beq.n	8008f72 <__multiply+0x142>
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	f104 0c14 	add.w	ip, r4, #20
 8008f34:	46ae      	mov	lr, r5
 8008f36:	f04f 0a00 	mov.w	sl, #0
 8008f3a:	f8bc b000 	ldrh.w	fp, [ip]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f44:	fb09 770b 	mla	r7, r9, fp, r7
 8008f48:	4457      	add	r7, sl
 8008f4a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f4e:	f84e 3b04 	str.w	r3, [lr], #4
 8008f52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f5a:	f8be 3000 	ldrh.w	r3, [lr]
 8008f5e:	4562      	cmp	r2, ip
 8008f60:	fb09 330a 	mla	r3, r9, sl, r3
 8008f64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f6c:	d8e5      	bhi.n	8008f3a <__multiply+0x10a>
 8008f6e:	9f01      	ldr	r7, [sp, #4]
 8008f70:	51eb      	str	r3, [r5, r7]
 8008f72:	3504      	adds	r5, #4
 8008f74:	e799      	b.n	8008eaa <__multiply+0x7a>
 8008f76:	3e01      	subs	r6, #1
 8008f78:	e79b      	b.n	8008eb2 <__multiply+0x82>
 8008f7a:	bf00      	nop
 8008f7c:	08009ff4 	.word	0x08009ff4
 8008f80:	0800a005 	.word	0x0800a005

08008f84 <__pow5mult>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4615      	mov	r5, r2
 8008f8a:	f012 0203 	ands.w	r2, r2, #3
 8008f8e:	4607      	mov	r7, r0
 8008f90:	460e      	mov	r6, r1
 8008f92:	d007      	beq.n	8008fa4 <__pow5mult+0x20>
 8008f94:	3a01      	subs	r2, #1
 8008f96:	4c25      	ldr	r4, [pc, #148]	@ (800902c <__pow5mult+0xa8>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f9e:	f7ff fe9d 	bl	8008cdc <__multadd>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	10ad      	asrs	r5, r5, #2
 8008fa6:	d03d      	beq.n	8009024 <__pow5mult+0xa0>
 8008fa8:	69fc      	ldr	r4, [r7, #28]
 8008faa:	b97c      	cbnz	r4, 8008fcc <__pow5mult+0x48>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f7ff fd7d 	bl	8008aac <malloc>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	61f8      	str	r0, [r7, #28]
 8008fb6:	b928      	cbnz	r0, 8008fc4 <__pow5mult+0x40>
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009030 <__pow5mult+0xac>)
 8008fba:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fbe:	481d      	ldr	r0, [pc, #116]	@ (8009034 <__pow5mult+0xb0>)
 8008fc0:	f000 fbee 	bl	80097a0 <__assert_func>
 8008fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc8:	6004      	str	r4, [r0, #0]
 8008fca:	60c4      	str	r4, [r0, #12]
 8008fcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd4:	b94c      	cbnz	r4, 8008fea <__pow5mult+0x66>
 8008fd6:	f240 2171 	movw	r1, #625	@ 0x271
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff ff12 	bl	8008e04 <__i2b>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	f04f 0900 	mov.w	r9, #0
 8008fee:	07eb      	lsls	r3, r5, #31
 8008ff0:	d50a      	bpl.n	8009008 <__pow5mult+0x84>
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ff1a 	bl	8008e30 <__multiply>
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	4631      	mov	r1, r6
 8009000:	4638      	mov	r0, r7
 8009002:	4646      	mov	r6, r8
 8009004:	f7ff fe48 	bl	8008c98 <_Bfree>
 8009008:	106d      	asrs	r5, r5, #1
 800900a:	d00b      	beq.n	8009024 <__pow5mult+0xa0>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	b938      	cbnz	r0, 8009020 <__pow5mult+0x9c>
 8009010:	4622      	mov	r2, r4
 8009012:	4621      	mov	r1, r4
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff ff0b 	bl	8008e30 <__multiply>
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	f8c0 9000 	str.w	r9, [r0]
 8009020:	4604      	mov	r4, r0
 8009022:	e7e4      	b.n	8008fee <__pow5mult+0x6a>
 8009024:	4630      	mov	r0, r6
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	bf00      	nop
 800902c:	0800a060 	.word	0x0800a060
 8009030:	08009f85 	.word	0x08009f85
 8009034:	0800a005 	.word	0x0800a005

08009038 <__lshift>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	460c      	mov	r4, r1
 800903e:	4607      	mov	r7, r0
 8009040:	4691      	mov	r9, r2
 8009042:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6849      	ldr	r1, [r1, #4]
 800904a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800904e:	68a3      	ldr	r3, [r4, #8]
 8009050:	f108 0601 	add.w	r6, r8, #1
 8009054:	42b3      	cmp	r3, r6
 8009056:	db0b      	blt.n	8009070 <__lshift+0x38>
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff fddd 	bl	8008c18 <_Balloc>
 800905e:	4605      	mov	r5, r0
 8009060:	b948      	cbnz	r0, 8009076 <__lshift+0x3e>
 8009062:	4602      	mov	r2, r0
 8009064:	4b28      	ldr	r3, [pc, #160]	@ (8009108 <__lshift+0xd0>)
 8009066:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800906a:	4828      	ldr	r0, [pc, #160]	@ (800910c <__lshift+0xd4>)
 800906c:	f000 fb98 	bl	80097a0 <__assert_func>
 8009070:	3101      	adds	r1, #1
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	e7ee      	b.n	8009054 <__lshift+0x1c>
 8009076:	2300      	movs	r3, #0
 8009078:	f100 0114 	add.w	r1, r0, #20
 800907c:	f100 0210 	add.w	r2, r0, #16
 8009080:	4618      	mov	r0, r3
 8009082:	4553      	cmp	r3, sl
 8009084:	db33      	blt.n	80090ee <__lshift+0xb6>
 8009086:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800908a:	f104 0314 	add.w	r3, r4, #20
 800908e:	6920      	ldr	r0, [r4, #16]
 8009090:	f019 091f 	ands.w	r9, r9, #31
 8009094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800909c:	d02b      	beq.n	80090f6 <__lshift+0xbe>
 800909e:	f1c9 0e20 	rsb	lr, r9, #32
 80090a2:	468a      	mov	sl, r1
 80090a4:	2200      	movs	r2, #0
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	fa00 f009 	lsl.w	r0, r0, r9
 80090ac:	4310      	orrs	r0, r2
 80090ae:	f84a 0b04 	str.w	r0, [sl], #4
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	459c      	cmp	ip, r3
 80090b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090bc:	d8f3      	bhi.n	80090a6 <__lshift+0x6e>
 80090be:	ebac 0304 	sub.w	r3, ip, r4
 80090c2:	f104 0015 	add.w	r0, r4, #21
 80090c6:	3b15      	subs	r3, #21
 80090c8:	f023 0303 	bic.w	r3, r3, #3
 80090cc:	3304      	adds	r3, #4
 80090ce:	4584      	cmp	ip, r0
 80090d0:	bf38      	it	cc
 80090d2:	2304      	movcc	r3, #4
 80090d4:	50ca      	str	r2, [r1, r3]
 80090d6:	b10a      	cbz	r2, 80090dc <__lshift+0xa4>
 80090d8:	f108 0602 	add.w	r6, r8, #2
 80090dc:	3e01      	subs	r6, #1
 80090de:	4638      	mov	r0, r7
 80090e0:	4621      	mov	r1, r4
 80090e2:	612e      	str	r6, [r5, #16]
 80090e4:	f7ff fdd8 	bl	8008c98 <_Bfree>
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	3301      	adds	r3, #1
 80090f0:	f842 0f04 	str.w	r0, [r2, #4]!
 80090f4:	e7c5      	b.n	8009082 <__lshift+0x4a>
 80090f6:	3904      	subs	r1, #4
 80090f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fc:	459c      	cmp	ip, r3
 80090fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009102:	d8f9      	bhi.n	80090f8 <__lshift+0xc0>
 8009104:	e7ea      	b.n	80090dc <__lshift+0xa4>
 8009106:	bf00      	nop
 8009108:	08009ff4 	.word	0x08009ff4
 800910c:	0800a005 	.word	0x0800a005

08009110 <__mcmp>:
 8009110:	4603      	mov	r3, r0
 8009112:	690a      	ldr	r2, [r1, #16]
 8009114:	6900      	ldr	r0, [r0, #16]
 8009116:	1a80      	subs	r0, r0, r2
 8009118:	b530      	push	{r4, r5, lr}
 800911a:	d10e      	bne.n	800913a <__mcmp+0x2a>
 800911c:	3314      	adds	r3, #20
 800911e:	3114      	adds	r1, #20
 8009120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800912c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009130:	4295      	cmp	r5, r2
 8009132:	d003      	beq.n	800913c <__mcmp+0x2c>
 8009134:	d205      	bcs.n	8009142 <__mcmp+0x32>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	bd30      	pop	{r4, r5, pc}
 800913c:	42a3      	cmp	r3, r4
 800913e:	d3f3      	bcc.n	8009128 <__mcmp+0x18>
 8009140:	e7fb      	b.n	800913a <__mcmp+0x2a>
 8009142:	2001      	movs	r0, #1
 8009144:	e7f9      	b.n	800913a <__mcmp+0x2a>
	...

08009148 <__mdiff>:
 8009148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4689      	mov	r9, r1
 800914e:	4606      	mov	r6, r0
 8009150:	4611      	mov	r1, r2
 8009152:	4614      	mov	r4, r2
 8009154:	4648      	mov	r0, r9
 8009156:	f7ff ffdb 	bl	8009110 <__mcmp>
 800915a:	1e05      	subs	r5, r0, #0
 800915c:	d112      	bne.n	8009184 <__mdiff+0x3c>
 800915e:	4629      	mov	r1, r5
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff fd59 	bl	8008c18 <_Balloc>
 8009166:	4602      	mov	r2, r0
 8009168:	b928      	cbnz	r0, 8009176 <__mdiff+0x2e>
 800916a:	4b41      	ldr	r3, [pc, #260]	@ (8009270 <__mdiff+0x128>)
 800916c:	f240 2137 	movw	r1, #567	@ 0x237
 8009170:	4840      	ldr	r0, [pc, #256]	@ (8009274 <__mdiff+0x12c>)
 8009172:	f000 fb15 	bl	80097a0 <__assert_func>
 8009176:	2301      	movs	r3, #1
 8009178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800917c:	4610      	mov	r0, r2
 800917e:	b003      	add	sp, #12
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	bfbc      	itt	lt
 8009186:	464b      	movlt	r3, r9
 8009188:	46a1      	movlt	r9, r4
 800918a:	4630      	mov	r0, r6
 800918c:	bfb8      	it	lt
 800918e:	2501      	movlt	r5, #1
 8009190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009194:	bfb4      	ite	lt
 8009196:	461c      	movlt	r4, r3
 8009198:	2500      	movge	r5, #0
 800919a:	f7ff fd3d 	bl	8008c18 <_Balloc>
 800919e:	4602      	mov	r2, r0
 80091a0:	b918      	cbnz	r0, 80091aa <__mdiff+0x62>
 80091a2:	4b33      	ldr	r3, [pc, #204]	@ (8009270 <__mdiff+0x128>)
 80091a4:	f240 2145 	movw	r1, #581	@ 0x245
 80091a8:	e7e2      	b.n	8009170 <__mdiff+0x28>
 80091aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091ae:	f104 0e14 	add.w	lr, r4, #20
 80091b2:	6926      	ldr	r6, [r4, #16]
 80091b4:	f100 0b14 	add.w	fp, r0, #20
 80091b8:	60c5      	str	r5, [r0, #12]
 80091ba:	f109 0514 	add.w	r5, r9, #20
 80091be:	f109 0310 	add.w	r3, r9, #16
 80091c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091ca:	46d9      	mov	r9, fp
 80091cc:	f04f 0c00 	mov.w	ip, #0
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091d8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091dc:	4576      	cmp	r6, lr
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	fa1f f38a 	uxth.w	r3, sl
 80091e4:	4619      	mov	r1, r3
 80091e6:	b283      	uxth	r3, r0
 80091e8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80091ec:	eba1 0303 	sub.w	r3, r1, r3
 80091f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091f4:	4463      	add	r3, ip
 80091f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009204:	f849 3b04 	str.w	r3, [r9], #4
 8009208:	d8e3      	bhi.n	80091d2 <__mdiff+0x8a>
 800920a:	1b33      	subs	r3, r6, r4
 800920c:	3415      	adds	r4, #21
 800920e:	3b15      	subs	r3, #21
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	3304      	adds	r3, #4
 8009216:	42a6      	cmp	r6, r4
 8009218:	bf38      	it	cc
 800921a:	2304      	movcc	r3, #4
 800921c:	441d      	add	r5, r3
 800921e:	445b      	add	r3, fp
 8009220:	462c      	mov	r4, r5
 8009222:	461e      	mov	r6, r3
 8009224:	4544      	cmp	r4, r8
 8009226:	d30e      	bcc.n	8009246 <__mdiff+0xfe>
 8009228:	f108 0103 	add.w	r1, r8, #3
 800922c:	1b49      	subs	r1, r1, r5
 800922e:	3d03      	subs	r5, #3
 8009230:	f021 0103 	bic.w	r1, r1, #3
 8009234:	45a8      	cmp	r8, r5
 8009236:	bf38      	it	cc
 8009238:	2100      	movcc	r1, #0
 800923a:	440b      	add	r3, r1
 800923c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009240:	b199      	cbz	r1, 800926a <__mdiff+0x122>
 8009242:	6117      	str	r7, [r2, #16]
 8009244:	e79a      	b.n	800917c <__mdiff+0x34>
 8009246:	f854 1b04 	ldr.w	r1, [r4], #4
 800924a:	46e6      	mov	lr, ip
 800924c:	fa1f fc81 	uxth.w	ip, r1
 8009250:	0c08      	lsrs	r0, r1, #16
 8009252:	4471      	add	r1, lr
 8009254:	44f4      	add	ip, lr
 8009256:	b289      	uxth	r1, r1
 8009258:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800925c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009264:	f846 1b04 	str.w	r1, [r6], #4
 8009268:	e7dc      	b.n	8009224 <__mdiff+0xdc>
 800926a:	3f01      	subs	r7, #1
 800926c:	e7e6      	b.n	800923c <__mdiff+0xf4>
 800926e:	bf00      	nop
 8009270:	08009ff4 	.word	0x08009ff4
 8009274:	0800a005 	.word	0x0800a005

08009278 <__d2b>:
 8009278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800927c:	460f      	mov	r7, r1
 800927e:	2101      	movs	r1, #1
 8009280:	4616      	mov	r6, r2
 8009282:	ec59 8b10 	vmov	r8, r9, d0
 8009286:	f7ff fcc7 	bl	8008c18 <_Balloc>
 800928a:	4604      	mov	r4, r0
 800928c:	b930      	cbnz	r0, 800929c <__d2b+0x24>
 800928e:	4602      	mov	r2, r0
 8009290:	4b23      	ldr	r3, [pc, #140]	@ (8009320 <__d2b+0xa8>)
 8009292:	f240 310f 	movw	r1, #783	@ 0x30f
 8009296:	4823      	ldr	r0, [pc, #140]	@ (8009324 <__d2b+0xac>)
 8009298:	f000 fa82 	bl	80097a0 <__assert_func>
 800929c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a4:	b10d      	cbz	r5, 80092aa <__d2b+0x32>
 80092a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	f1b8 0300 	subs.w	r3, r8, #0
 80092b0:	d023      	beq.n	80092fa <__d2b+0x82>
 80092b2:	4668      	mov	r0, sp
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	f7ff fd78 	bl	8008daa <__lo0bits>
 80092ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092be:	b1d0      	cbz	r0, 80092f6 <__d2b+0x7e>
 80092c0:	f1c0 0320 	rsb	r3, r0, #32
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	40c2      	lsrs	r2, r0
 80092ca:	430b      	orrs	r3, r1
 80092cc:	9201      	str	r2, [sp, #4]
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	61a3      	str	r3, [r4, #24]
 80092d6:	bf0c      	ite	eq
 80092d8:	2201      	moveq	r2, #1
 80092da:	2202      	movne	r2, #2
 80092dc:	6122      	str	r2, [r4, #16]
 80092de:	b1a5      	cbz	r5, 800930a <__d2b+0x92>
 80092e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092e4:	4405      	add	r5, r0
 80092e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092ea:	603d      	str	r5, [r7, #0]
 80092ec:	6030      	str	r0, [r6, #0]
 80092ee:	4620      	mov	r0, r4
 80092f0:	b003      	add	sp, #12
 80092f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092f6:	6161      	str	r1, [r4, #20]
 80092f8:	e7ea      	b.n	80092d0 <__d2b+0x58>
 80092fa:	a801      	add	r0, sp, #4
 80092fc:	f7ff fd55 	bl	8008daa <__lo0bits>
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	3020      	adds	r0, #32
 8009304:	2201      	movs	r2, #1
 8009306:	6163      	str	r3, [r4, #20]
 8009308:	e7e8      	b.n	80092dc <__d2b+0x64>
 800930a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800930e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009312:	6038      	str	r0, [r7, #0]
 8009314:	6918      	ldr	r0, [r3, #16]
 8009316:	f7ff fd29 	bl	8008d6c <__hi0bits>
 800931a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800931e:	e7e5      	b.n	80092ec <__d2b+0x74>
 8009320:	08009ff4 	.word	0x08009ff4
 8009324:	0800a005 	.word	0x0800a005

08009328 <__ssputs_r>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	461f      	mov	r7, r3
 800932e:	688e      	ldr	r6, [r1, #8]
 8009330:	4682      	mov	sl, r0
 8009332:	460c      	mov	r4, r1
 8009334:	42be      	cmp	r6, r7
 8009336:	4690      	mov	r8, r2
 8009338:	680b      	ldr	r3, [r1, #0]
 800933a:	d82d      	bhi.n	8009398 <__ssputs_r+0x70>
 800933c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009344:	d026      	beq.n	8009394 <__ssputs_r+0x6c>
 8009346:	6965      	ldr	r5, [r4, #20]
 8009348:	6909      	ldr	r1, [r1, #16]
 800934a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800934e:	eba3 0901 	sub.w	r9, r3, r1
 8009352:	1c7b      	adds	r3, r7, #1
 8009354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009358:	444b      	add	r3, r9
 800935a:	106d      	asrs	r5, r5, #1
 800935c:	429d      	cmp	r5, r3
 800935e:	bf38      	it	cc
 8009360:	461d      	movcc	r5, r3
 8009362:	0553      	lsls	r3, r2, #21
 8009364:	d527      	bpl.n	80093b6 <__ssputs_r+0x8e>
 8009366:	4629      	mov	r1, r5
 8009368:	f7ff fbca 	bl	8008b00 <_malloc_r>
 800936c:	4606      	mov	r6, r0
 800936e:	b360      	cbz	r0, 80093ca <__ssputs_r+0xa2>
 8009370:	464a      	mov	r2, r9
 8009372:	6921      	ldr	r1, [r4, #16]
 8009374:	f000 fa06 	bl	8009784 <memcpy>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800937e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	6126      	str	r6, [r4, #16]
 8009386:	444e      	add	r6, r9
 8009388:	6165      	str	r5, [r4, #20]
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	6026      	str	r6, [r4, #0]
 8009390:	463e      	mov	r6, r7
 8009392:	60a5      	str	r5, [r4, #8]
 8009394:	42be      	cmp	r6, r7
 8009396:	d900      	bls.n	800939a <__ssputs_r+0x72>
 8009398:	463e      	mov	r6, r7
 800939a:	4632      	mov	r2, r6
 800939c:	4641      	mov	r1, r8
 800939e:	6820      	ldr	r0, [r4, #0]
 80093a0:	f000 f9c6 	bl	8009730 <memmove>
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	2000      	movs	r0, #0
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	4433      	add	r3, r6
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b6:	462a      	mov	r2, r5
 80093b8:	f000 fa36 	bl	8009828 <_realloc_r>
 80093bc:	4606      	mov	r6, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1e0      	bne.n	8009384 <__ssputs_r+0x5c>
 80093c2:	6921      	ldr	r1, [r4, #16]
 80093c4:	4650      	mov	r0, sl
 80093c6:	f7ff fb27 	bl	8008a18 <_free_r>
 80093ca:	230c      	movs	r3, #12
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	f8ca 3000 	str.w	r3, [sl]
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	e7e9      	b.n	80093b2 <__ssputs_r+0x8a>
	...

080093e0 <_svfiprintf_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4698      	mov	r8, r3
 80093e6:	898b      	ldrh	r3, [r1, #12]
 80093e8:	b09d      	sub	sp, #116	@ 0x74
 80093ea:	4607      	mov	r7, r0
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	460d      	mov	r5, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	d510      	bpl.n	8009416 <_svfiprintf_r+0x36>
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	b973      	cbnz	r3, 8009416 <_svfiprintf_r+0x36>
 80093f8:	2140      	movs	r1, #64	@ 0x40
 80093fa:	f7ff fb81 	bl	8008b00 <_malloc_r>
 80093fe:	6028      	str	r0, [r5, #0]
 8009400:	6128      	str	r0, [r5, #16]
 8009402:	b930      	cbnz	r0, 8009412 <_svfiprintf_r+0x32>
 8009404:	230c      	movs	r3, #12
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	b01d      	add	sp, #116	@ 0x74
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	2340      	movs	r3, #64	@ 0x40
 8009414:	616b      	str	r3, [r5, #20]
 8009416:	2300      	movs	r3, #0
 8009418:	f8cd 800c 	str.w	r8, [sp, #12]
 800941c:	f04f 0901 	mov.w	r9, #1
 8009420:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80095c4 <_svfiprintf_r+0x1e4>
 8009424:	9309      	str	r3, [sp, #36]	@ 0x24
 8009426:	2320      	movs	r3, #32
 8009428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800942c:	2330      	movs	r3, #48	@ 0x30
 800942e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009432:	4623      	mov	r3, r4
 8009434:	469a      	mov	sl, r3
 8009436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943a:	b10a      	cbz	r2, 8009440 <_svfiprintf_r+0x60>
 800943c:	2a25      	cmp	r2, #37	@ 0x25
 800943e:	d1f9      	bne.n	8009434 <_svfiprintf_r+0x54>
 8009440:	ebba 0b04 	subs.w	fp, sl, r4
 8009444:	d00b      	beq.n	800945e <_svfiprintf_r+0x7e>
 8009446:	465b      	mov	r3, fp
 8009448:	4622      	mov	r2, r4
 800944a:	4629      	mov	r1, r5
 800944c:	4638      	mov	r0, r7
 800944e:	f7ff ff6b 	bl	8009328 <__ssputs_r>
 8009452:	3001      	adds	r0, #1
 8009454:	f000 80a7 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800945a:	445a      	add	r2, fp
 800945c:	9209      	str	r2, [sp, #36]	@ 0x24
 800945e:	f89a 3000 	ldrb.w	r3, [sl]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 809f 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009468:	2300      	movs	r3, #0
 800946a:	f04f 32ff 	mov.w	r2, #4294967295
 800946e:	f10a 0a01 	add.w	sl, sl, #1
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	9307      	str	r3, [sp, #28]
 8009476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800947a:	931a      	str	r3, [sp, #104]	@ 0x68
 800947c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009480:	4654      	mov	r4, sl
 8009482:	2205      	movs	r2, #5
 8009484:	484f      	ldr	r0, [pc, #316]	@ (80095c4 <_svfiprintf_r+0x1e4>)
 8009486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948a:	f7fe fc64 	bl	8007d56 <memchr>
 800948e:	9a04      	ldr	r2, [sp, #16]
 8009490:	b9d8      	cbnz	r0, 80094ca <_svfiprintf_r+0xea>
 8009492:	06d0      	lsls	r0, r2, #27
 8009494:	bf44      	itt	mi
 8009496:	2320      	movmi	r3, #32
 8009498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800949c:	0711      	lsls	r1, r2, #28
 800949e:	bf44      	itt	mi
 80094a0:	232b      	movmi	r3, #43	@ 0x2b
 80094a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094a6:	f89a 3000 	ldrb.w	r3, [sl]
 80094aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ac:	d015      	beq.n	80094da <_svfiprintf_r+0xfa>
 80094ae:	9a07      	ldr	r2, [sp, #28]
 80094b0:	4654      	mov	r4, sl
 80094b2:	2000      	movs	r0, #0
 80094b4:	f04f 0c0a 	mov.w	ip, #10
 80094b8:	4621      	mov	r1, r4
 80094ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094be:	3b30      	subs	r3, #48	@ 0x30
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d94b      	bls.n	800955c <_svfiprintf_r+0x17c>
 80094c4:	b1b0      	cbz	r0, 80094f4 <_svfiprintf_r+0x114>
 80094c6:	9207      	str	r2, [sp, #28]
 80094c8:	e014      	b.n	80094f4 <_svfiprintf_r+0x114>
 80094ca:	eba0 0308 	sub.w	r3, r0, r8
 80094ce:	46a2      	mov	sl, r4
 80094d0:	fa09 f303 	lsl.w	r3, r9, r3
 80094d4:	4313      	orrs	r3, r2
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	e7d2      	b.n	8009480 <_svfiprintf_r+0xa0>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	1d19      	adds	r1, r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	9103      	str	r1, [sp, #12]
 80094e4:	bfbb      	ittet	lt
 80094e6:	425b      	neglt	r3, r3
 80094e8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ec:	9307      	strge	r3, [sp, #28]
 80094ee:	9307      	strlt	r3, [sp, #28]
 80094f0:	bfb8      	it	lt
 80094f2:	9204      	strlt	r2, [sp, #16]
 80094f4:	7823      	ldrb	r3, [r4, #0]
 80094f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094f8:	d10a      	bne.n	8009510 <_svfiprintf_r+0x130>
 80094fa:	7863      	ldrb	r3, [r4, #1]
 80094fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80094fe:	d132      	bne.n	8009566 <_svfiprintf_r+0x186>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	3402      	adds	r4, #2
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800950c:	9203      	str	r2, [sp, #12]
 800950e:	9305      	str	r3, [sp, #20]
 8009510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095d4 <_svfiprintf_r+0x1f4>
 8009514:	2203      	movs	r2, #3
 8009516:	7821      	ldrb	r1, [r4, #0]
 8009518:	4650      	mov	r0, sl
 800951a:	f7fe fc1c 	bl	8007d56 <memchr>
 800951e:	b138      	cbz	r0, 8009530 <_svfiprintf_r+0x150>
 8009520:	eba0 000a 	sub.w	r0, r0, sl
 8009524:	2240      	movs	r2, #64	@ 0x40
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3401      	adds	r4, #1
 800952a:	4082      	lsls	r2, r0
 800952c:	4313      	orrs	r3, r2
 800952e:	9304      	str	r3, [sp, #16]
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	2206      	movs	r2, #6
 8009536:	4824      	ldr	r0, [pc, #144]	@ (80095c8 <_svfiprintf_r+0x1e8>)
 8009538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800953c:	f7fe fc0b 	bl	8007d56 <memchr>
 8009540:	2800      	cmp	r0, #0
 8009542:	d036      	beq.n	80095b2 <_svfiprintf_r+0x1d2>
 8009544:	4b21      	ldr	r3, [pc, #132]	@ (80095cc <_svfiprintf_r+0x1ec>)
 8009546:	bb1b      	cbnz	r3, 8009590 <_svfiprintf_r+0x1b0>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	3307      	adds	r3, #7
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	3308      	adds	r3, #8
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009556:	4433      	add	r3, r6
 8009558:	9309      	str	r3, [sp, #36]	@ 0x24
 800955a:	e76a      	b.n	8009432 <_svfiprintf_r+0x52>
 800955c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009560:	460c      	mov	r4, r1
 8009562:	2001      	movs	r0, #1
 8009564:	e7a8      	b.n	80094b8 <_svfiprintf_r+0xd8>
 8009566:	2300      	movs	r3, #0
 8009568:	3401      	adds	r4, #1
 800956a:	f04f 0c0a 	mov.w	ip, #10
 800956e:	4619      	mov	r1, r3
 8009570:	9305      	str	r3, [sp, #20]
 8009572:	4620      	mov	r0, r4
 8009574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009578:	3a30      	subs	r2, #48	@ 0x30
 800957a:	2a09      	cmp	r2, #9
 800957c:	d903      	bls.n	8009586 <_svfiprintf_r+0x1a6>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0c6      	beq.n	8009510 <_svfiprintf_r+0x130>
 8009582:	9105      	str	r1, [sp, #20]
 8009584:	e7c4      	b.n	8009510 <_svfiprintf_r+0x130>
 8009586:	fb0c 2101 	mla	r1, ip, r1, r2
 800958a:	4604      	mov	r4, r0
 800958c:	2301      	movs	r3, #1
 800958e:	e7f0      	b.n	8009572 <_svfiprintf_r+0x192>
 8009590:	ab03      	add	r3, sp, #12
 8009592:	462a      	mov	r2, r5
 8009594:	a904      	add	r1, sp, #16
 8009596:	4638      	mov	r0, r7
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <_svfiprintf_r+0x1f0>)
 800959c:	f7fd fe7a 	bl	8007294 <_printf_float>
 80095a0:	1c42      	adds	r2, r0, #1
 80095a2:	4606      	mov	r6, r0
 80095a4:	d1d6      	bne.n	8009554 <_svfiprintf_r+0x174>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	065b      	lsls	r3, r3, #25
 80095aa:	f53f af2d 	bmi.w	8009408 <_svfiprintf_r+0x28>
 80095ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095b0:	e72c      	b.n	800940c <_svfiprintf_r+0x2c>
 80095b2:	ab03      	add	r3, sp, #12
 80095b4:	462a      	mov	r2, r5
 80095b6:	a904      	add	r1, sp, #16
 80095b8:	4638      	mov	r0, r7
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <_svfiprintf_r+0x1f0>)
 80095be:	f7fe f905 	bl	80077cc <_printf_i>
 80095c2:	e7ed      	b.n	80095a0 <_svfiprintf_r+0x1c0>
 80095c4:	0800a160 	.word	0x0800a160
 80095c8:	0800a16a 	.word	0x0800a16a
 80095cc:	08007295 	.word	0x08007295
 80095d0:	08009329 	.word	0x08009329
 80095d4:	0800a166 	.word	0x0800a166

080095d8 <__sflush_r>:
 80095d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	0716      	lsls	r6, r2, #28
 80095e2:	4605      	mov	r5, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	d454      	bmi.n	8009692 <__sflush_r+0xba>
 80095e8:	684b      	ldr	r3, [r1, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dc02      	bgt.n	80095f4 <__sflush_r+0x1c>
 80095ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dd48      	ble.n	8009686 <__sflush_r+0xae>
 80095f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	d045      	beq.n	8009686 <__sflush_r+0xae>
 80095fa:	2300      	movs	r3, #0
 80095fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009600:	682f      	ldr	r7, [r5, #0]
 8009602:	6a21      	ldr	r1, [r4, #32]
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	d030      	beq.n	800966a <__sflush_r+0x92>
 8009608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	0759      	lsls	r1, r3, #29
 800960e:	d505      	bpl.n	800961c <__sflush_r+0x44>
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	1ad2      	subs	r2, r2, r3
 8009614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009616:	b10b      	cbz	r3, 800961c <__sflush_r+0x44>
 8009618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800961a:	1ad2      	subs	r2, r2, r3
 800961c:	2300      	movs	r3, #0
 800961e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009620:	6a21      	ldr	r1, [r4, #32]
 8009622:	4628      	mov	r0, r5
 8009624:	47b0      	blx	r6
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	d106      	bne.n	800963a <__sflush_r+0x62>
 800962c:	6829      	ldr	r1, [r5, #0]
 800962e:	291d      	cmp	r1, #29
 8009630:	d82b      	bhi.n	800968a <__sflush_r+0xb2>
 8009632:	4a2a      	ldr	r2, [pc, #168]	@ (80096dc <__sflush_r+0x104>)
 8009634:	410a      	asrs	r2, r1
 8009636:	07d6      	lsls	r6, r2, #31
 8009638:	d427      	bmi.n	800968a <__sflush_r+0xb2>
 800963a:	2200      	movs	r2, #0
 800963c:	04d9      	lsls	r1, r3, #19
 800963e:	6062      	str	r2, [r4, #4]
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	6022      	str	r2, [r4, #0]
 8009644:	d504      	bpl.n	8009650 <__sflush_r+0x78>
 8009646:	1c42      	adds	r2, r0, #1
 8009648:	d101      	bne.n	800964e <__sflush_r+0x76>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	b903      	cbnz	r3, 8009650 <__sflush_r+0x78>
 800964e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009652:	602f      	str	r7, [r5, #0]
 8009654:	b1b9      	cbz	r1, 8009686 <__sflush_r+0xae>
 8009656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800965a:	4299      	cmp	r1, r3
 800965c:	d002      	beq.n	8009664 <__sflush_r+0x8c>
 800965e:	4628      	mov	r0, r5
 8009660:	f7ff f9da 	bl	8008a18 <_free_r>
 8009664:	2300      	movs	r3, #0
 8009666:	6363      	str	r3, [r4, #52]	@ 0x34
 8009668:	e00d      	b.n	8009686 <__sflush_r+0xae>
 800966a:	2301      	movs	r3, #1
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	4602      	mov	r2, r0
 8009672:	1c50      	adds	r0, r2, #1
 8009674:	d1c9      	bne.n	800960a <__sflush_r+0x32>
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0c6      	beq.n	800960a <__sflush_r+0x32>
 800967c:	2b1d      	cmp	r3, #29
 800967e:	d001      	beq.n	8009684 <__sflush_r+0xac>
 8009680:	2b16      	cmp	r3, #22
 8009682:	d11d      	bne.n	80096c0 <__sflush_r+0xe8>
 8009684:	602f      	str	r7, [r5, #0]
 8009686:	2000      	movs	r0, #0
 8009688:	e021      	b.n	80096ce <__sflush_r+0xf6>
 800968a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800968e:	b21b      	sxth	r3, r3
 8009690:	e01a      	b.n	80096c8 <__sflush_r+0xf0>
 8009692:	690f      	ldr	r7, [r1, #16]
 8009694:	2f00      	cmp	r7, #0
 8009696:	d0f6      	beq.n	8009686 <__sflush_r+0xae>
 8009698:	0793      	lsls	r3, r2, #30
 800969a:	680e      	ldr	r6, [r1, #0]
 800969c:	600f      	str	r7, [r1, #0]
 800969e:	bf0c      	ite	eq
 80096a0:	694b      	ldreq	r3, [r1, #20]
 80096a2:	2300      	movne	r3, #0
 80096a4:	eba6 0807 	sub.w	r8, r6, r7
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	ddea      	ble.n	8009686 <__sflush_r+0xae>
 80096b0:	4643      	mov	r3, r8
 80096b2:	463a      	mov	r2, r7
 80096b4:	6a21      	ldr	r1, [r4, #32]
 80096b6:	4628      	mov	r0, r5
 80096b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096ba:	47b0      	blx	r6
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc08      	bgt.n	80096d2 <__sflush_r+0xfa>
 80096c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d2:	4407      	add	r7, r0
 80096d4:	eba8 0800 	sub.w	r8, r8, r0
 80096d8:	e7e7      	b.n	80096aa <__sflush_r+0xd2>
 80096da:	bf00      	nop
 80096dc:	dfbffffe 	.word	0xdfbffffe

080096e0 <_fflush_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	690b      	ldr	r3, [r1, #16]
 80096e4:	4605      	mov	r5, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	b913      	cbnz	r3, 80096f0 <_fflush_r+0x10>
 80096ea:	2500      	movs	r5, #0
 80096ec:	4628      	mov	r0, r5
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	b118      	cbz	r0, 80096fa <_fflush_r+0x1a>
 80096f2:	6a03      	ldr	r3, [r0, #32]
 80096f4:	b90b      	cbnz	r3, 80096fa <_fflush_r+0x1a>
 80096f6:	f7fe fa15 	bl	8007b24 <__sinit>
 80096fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0f3      	beq.n	80096ea <_fflush_r+0xa>
 8009702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009704:	07d0      	lsls	r0, r2, #31
 8009706:	d404      	bmi.n	8009712 <_fflush_r+0x32>
 8009708:	0599      	lsls	r1, r3, #22
 800970a:	d402      	bmi.n	8009712 <_fflush_r+0x32>
 800970c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800970e:	f7fe fb20 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8009712:	4628      	mov	r0, r5
 8009714:	4621      	mov	r1, r4
 8009716:	f7ff ff5f 	bl	80095d8 <__sflush_r>
 800971a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800971c:	4605      	mov	r5, r0
 800971e:	07da      	lsls	r2, r3, #31
 8009720:	d4e4      	bmi.n	80096ec <_fflush_r+0xc>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	059b      	lsls	r3, r3, #22
 8009726:	d4e1      	bmi.n	80096ec <_fflush_r+0xc>
 8009728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800972a:	f7fe fb13 	bl	8007d54 <__retarget_lock_release_recursive>
 800972e:	e7dd      	b.n	80096ec <_fflush_r+0xc>

08009730 <memmove>:
 8009730:	4288      	cmp	r0, r1
 8009732:	b510      	push	{r4, lr}
 8009734:	eb01 0402 	add.w	r4, r1, r2
 8009738:	d902      	bls.n	8009740 <memmove+0x10>
 800973a:	4284      	cmp	r4, r0
 800973c:	4623      	mov	r3, r4
 800973e:	d807      	bhi.n	8009750 <memmove+0x20>
 8009740:	1e43      	subs	r3, r0, #1
 8009742:	42a1      	cmp	r1, r4
 8009744:	d008      	beq.n	8009758 <memmove+0x28>
 8009746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800974a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800974e:	e7f8      	b.n	8009742 <memmove+0x12>
 8009750:	4402      	add	r2, r0
 8009752:	4601      	mov	r1, r0
 8009754:	428a      	cmp	r2, r1
 8009756:	d100      	bne.n	800975a <memmove+0x2a>
 8009758:	bd10      	pop	{r4, pc}
 800975a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800975e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009762:	e7f7      	b.n	8009754 <memmove+0x24>

08009764 <_sbrk_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	2300      	movs	r3, #0
 8009768:	4d05      	ldr	r5, [pc, #20]	@ (8009780 <_sbrk_r+0x1c>)
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f7 fea8 	bl	80014c4 <_sbrk>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_sbrk_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_sbrk_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200003ec 	.word	0x200003ec

08009784 <memcpy>:
 8009784:	440a      	add	r2, r1
 8009786:	1e43      	subs	r3, r0, #1
 8009788:	4291      	cmp	r1, r2
 800978a:	d100      	bne.n	800978e <memcpy+0xa>
 800978c:	4770      	bx	lr
 800978e:	b510      	push	{r4, lr}
 8009790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009794:	4291      	cmp	r1, r2
 8009796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800979a:	d1f9      	bne.n	8009790 <memcpy+0xc>
 800979c:	bd10      	pop	{r4, pc}
	...

080097a0 <__assert_func>:
 80097a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097a2:	4614      	mov	r4, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	4b09      	ldr	r3, [pc, #36]	@ (80097cc <__assert_func+0x2c>)
 80097a8:	4605      	mov	r5, r0
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68d8      	ldr	r0, [r3, #12]
 80097ae:	b954      	cbnz	r4, 80097c6 <__assert_func+0x26>
 80097b0:	4b07      	ldr	r3, [pc, #28]	@ (80097d0 <__assert_func+0x30>)
 80097b2:	461c      	mov	r4, r3
 80097b4:	9100      	str	r1, [sp, #0]
 80097b6:	4907      	ldr	r1, [pc, #28]	@ (80097d4 <__assert_func+0x34>)
 80097b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097bc:	462b      	mov	r3, r5
 80097be:	f000 f86f 	bl	80098a0 <fiprintf>
 80097c2:	f000 f87f 	bl	80098c4 <abort>
 80097c6:	4b04      	ldr	r3, [pc, #16]	@ (80097d8 <__assert_func+0x38>)
 80097c8:	e7f4      	b.n	80097b4 <__assert_func+0x14>
 80097ca:	bf00      	nop
 80097cc:	20000038 	.word	0x20000038
 80097d0:	0800a1b6 	.word	0x0800a1b6
 80097d4:	0800a188 	.word	0x0800a188
 80097d8:	0800a17b 	.word	0x0800a17b

080097dc <_calloc_r>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	fba1 5402 	umull	r5, r4, r1, r2
 80097e2:	b93c      	cbnz	r4, 80097f4 <_calloc_r+0x18>
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7ff f98b 	bl	8008b00 <_malloc_r>
 80097ea:	4606      	mov	r6, r0
 80097ec:	b928      	cbnz	r0, 80097fa <_calloc_r+0x1e>
 80097ee:	2600      	movs	r6, #0
 80097f0:	4630      	mov	r0, r6
 80097f2:	bd70      	pop	{r4, r5, r6, pc}
 80097f4:	220c      	movs	r2, #12
 80097f6:	6002      	str	r2, [r0, #0]
 80097f8:	e7f9      	b.n	80097ee <_calloc_r+0x12>
 80097fa:	462a      	mov	r2, r5
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7fe fa2a 	bl	8007c56 <memset>
 8009802:	e7f5      	b.n	80097f0 <_calloc_r+0x14>

08009804 <__ascii_mbtowc>:
 8009804:	b082      	sub	sp, #8
 8009806:	b901      	cbnz	r1, 800980a <__ascii_mbtowc+0x6>
 8009808:	a901      	add	r1, sp, #4
 800980a:	b142      	cbz	r2, 800981e <__ascii_mbtowc+0x1a>
 800980c:	b14b      	cbz	r3, 8009822 <__ascii_mbtowc+0x1e>
 800980e:	7813      	ldrb	r3, [r2, #0]
 8009810:	600b      	str	r3, [r1, #0]
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	1e10      	subs	r0, r2, #0
 8009816:	bf18      	it	ne
 8009818:	2001      	movne	r0, #1
 800981a:	b002      	add	sp, #8
 800981c:	4770      	bx	lr
 800981e:	4610      	mov	r0, r2
 8009820:	e7fb      	b.n	800981a <__ascii_mbtowc+0x16>
 8009822:	f06f 0001 	mvn.w	r0, #1
 8009826:	e7f8      	b.n	800981a <__ascii_mbtowc+0x16>

08009828 <_realloc_r>:
 8009828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982c:	4680      	mov	r8, r0
 800982e:	4615      	mov	r5, r2
 8009830:	460c      	mov	r4, r1
 8009832:	b921      	cbnz	r1, 800983e <_realloc_r+0x16>
 8009834:	4611      	mov	r1, r2
 8009836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800983a:	f7ff b961 	b.w	8008b00 <_malloc_r>
 800983e:	b92a      	cbnz	r2, 800984c <_realloc_r+0x24>
 8009840:	f7ff f8ea 	bl	8008a18 <_free_r>
 8009844:	2400      	movs	r4, #0
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984c:	f000 f841 	bl	80098d2 <_malloc_usable_size_r>
 8009850:	4285      	cmp	r5, r0
 8009852:	4606      	mov	r6, r0
 8009854:	d802      	bhi.n	800985c <_realloc_r+0x34>
 8009856:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800985a:	d8f4      	bhi.n	8009846 <_realloc_r+0x1e>
 800985c:	4629      	mov	r1, r5
 800985e:	4640      	mov	r0, r8
 8009860:	f7ff f94e 	bl	8008b00 <_malloc_r>
 8009864:	4607      	mov	r7, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	d0ec      	beq.n	8009844 <_realloc_r+0x1c>
 800986a:	42b5      	cmp	r5, r6
 800986c:	462a      	mov	r2, r5
 800986e:	4621      	mov	r1, r4
 8009870:	bf28      	it	cs
 8009872:	4632      	movcs	r2, r6
 8009874:	f7ff ff86 	bl	8009784 <memcpy>
 8009878:	4621      	mov	r1, r4
 800987a:	4640      	mov	r0, r8
 800987c:	463c      	mov	r4, r7
 800987e:	f7ff f8cb 	bl	8008a18 <_free_r>
 8009882:	e7e0      	b.n	8009846 <_realloc_r+0x1e>

08009884 <__ascii_wctomb>:
 8009884:	4603      	mov	r3, r0
 8009886:	4608      	mov	r0, r1
 8009888:	b141      	cbz	r1, 800989c <__ascii_wctomb+0x18>
 800988a:	2aff      	cmp	r2, #255	@ 0xff
 800988c:	d904      	bls.n	8009898 <__ascii_wctomb+0x14>
 800988e:	228a      	movs	r2, #138	@ 0x8a
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	4770      	bx	lr
 8009898:	2001      	movs	r0, #1
 800989a:	700a      	strb	r2, [r1, #0]
 800989c:	4770      	bx	lr
	...

080098a0 <fiprintf>:
 80098a0:	b40e      	push	{r1, r2, r3}
 80098a2:	b503      	push	{r0, r1, lr}
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	4601      	mov	r1, r0
 80098a8:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <fiprintf+0x20>)
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	6800      	ldr	r0, [r0, #0]
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	f000 f83f 	bl	8009934 <_vfiprintf_r>
 80098b6:	b002      	add	sp, #8
 80098b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098bc:	b003      	add	sp, #12
 80098be:	4770      	bx	lr
 80098c0:	20000038 	.word	0x20000038

080098c4 <abort>:
 80098c4:	2006      	movs	r0, #6
 80098c6:	b508      	push	{r3, lr}
 80098c8:	f000 fa08 	bl	8009cdc <raise>
 80098cc:	2001      	movs	r0, #1
 80098ce:	f7f7 fd81 	bl	80013d4 <_exit>

080098d2 <_malloc_usable_size_r>:
 80098d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d6:	1f18      	subs	r0, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbc      	itt	lt
 80098dc:	580b      	ldrlt	r3, [r1, r0]
 80098de:	18c0      	addlt	r0, r0, r3
 80098e0:	4770      	bx	lr

080098e2 <__sfputc_r>:
 80098e2:	6893      	ldr	r3, [r2, #8]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	6093      	str	r3, [r2, #8]
 80098ea:	b410      	push	{r4}
 80098ec:	da08      	bge.n	8009900 <__sfputc_r+0x1e>
 80098ee:	6994      	ldr	r4, [r2, #24]
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	db01      	blt.n	80098f8 <__sfputc_r+0x16>
 80098f4:	290a      	cmp	r1, #10
 80098f6:	d103      	bne.n	8009900 <__sfputc_r+0x1e>
 80098f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098fc:	f000 b932 	b.w	8009b64 <__swbuf_r>
 8009900:	6813      	ldr	r3, [r2, #0]
 8009902:	1c58      	adds	r0, r3, #1
 8009904:	6010      	str	r0, [r2, #0]
 8009906:	4608      	mov	r0, r1
 8009908:	7019      	strb	r1, [r3, #0]
 800990a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990e:	4770      	bx	lr

08009910 <__sfputs_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	4614      	mov	r4, r2
 8009918:	18d5      	adds	r5, r2, r3
 800991a:	42ac      	cmp	r4, r5
 800991c:	d101      	bne.n	8009922 <__sfputs_r+0x12>
 800991e:	2000      	movs	r0, #0
 8009920:	e007      	b.n	8009932 <__sfputs_r+0x22>
 8009922:	463a      	mov	r2, r7
 8009924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff ffda 	bl	80098e2 <__sfputc_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	d1f3      	bne.n	800991a <__sfputs_r+0xa>
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009934 <_vfiprintf_r>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	460d      	mov	r5, r1
 800993a:	b09d      	sub	sp, #116	@ 0x74
 800993c:	4614      	mov	r4, r2
 800993e:	4698      	mov	r8, r3
 8009940:	4606      	mov	r6, r0
 8009942:	b118      	cbz	r0, 800994c <_vfiprintf_r+0x18>
 8009944:	6a03      	ldr	r3, [r0, #32]
 8009946:	b90b      	cbnz	r3, 800994c <_vfiprintf_r+0x18>
 8009948:	f7fe f8ec 	bl	8007b24 <__sinit>
 800994c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800994e:	07d9      	lsls	r1, r3, #31
 8009950:	d405      	bmi.n	800995e <_vfiprintf_r+0x2a>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	059a      	lsls	r2, r3, #22
 8009956:	d402      	bmi.n	800995e <_vfiprintf_r+0x2a>
 8009958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800995a:	f7fe f9fa 	bl	8007d52 <__retarget_lock_acquire_recursive>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	071b      	lsls	r3, r3, #28
 8009962:	d501      	bpl.n	8009968 <_vfiprintf_r+0x34>
 8009964:	692b      	ldr	r3, [r5, #16]
 8009966:	b99b      	cbnz	r3, 8009990 <_vfiprintf_r+0x5c>
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f000 f938 	bl	8009be0 <__swsetup_r>
 8009970:	b170      	cbz	r0, 8009990 <_vfiprintf_r+0x5c>
 8009972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009974:	07dc      	lsls	r4, r3, #31
 8009976:	d504      	bpl.n	8009982 <_vfiprintf_r+0x4e>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b01d      	add	sp, #116	@ 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	0598      	lsls	r0, r3, #22
 8009986:	d4f7      	bmi.n	8009978 <_vfiprintf_r+0x44>
 8009988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998a:	f7fe f9e3 	bl	8007d54 <__retarget_lock_release_recursive>
 800998e:	e7f3      	b.n	8009978 <_vfiprintf_r+0x44>
 8009990:	2300      	movs	r3, #0
 8009992:	f8cd 800c 	str.w	r8, [sp, #12]
 8009996:	f04f 0901 	mov.w	r9, #1
 800999a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009b50 <_vfiprintf_r+0x21c>
 800999e:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a0:	2320      	movs	r3, #32
 80099a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099a6:	2330      	movs	r3, #48	@ 0x30
 80099a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099ac:	4623      	mov	r3, r4
 80099ae:	469a      	mov	sl, r3
 80099b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b4:	b10a      	cbz	r2, 80099ba <_vfiprintf_r+0x86>
 80099b6:	2a25      	cmp	r2, #37	@ 0x25
 80099b8:	d1f9      	bne.n	80099ae <_vfiprintf_r+0x7a>
 80099ba:	ebba 0b04 	subs.w	fp, sl, r4
 80099be:	d00b      	beq.n	80099d8 <_vfiprintf_r+0xa4>
 80099c0:	465b      	mov	r3, fp
 80099c2:	4622      	mov	r2, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7ff ffa2 	bl	8009910 <__sfputs_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f000 80a7 	beq.w	8009b20 <_vfiprintf_r+0x1ec>
 80099d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d4:	445a      	add	r2, fp
 80099d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80099d8:	f89a 3000 	ldrb.w	r3, [sl]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 809f 	beq.w	8009b20 <_vfiprintf_r+0x1ec>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f04f 32ff 	mov.w	r2, #4294967295
 80099e8:	f10a 0a01 	add.w	sl, sl, #1
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	9307      	str	r3, [sp, #28]
 80099f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fa:	4654      	mov	r4, sl
 80099fc:	2205      	movs	r2, #5
 80099fe:	4854      	ldr	r0, [pc, #336]	@ (8009b50 <_vfiprintf_r+0x21c>)
 8009a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a04:	f7fe f9a7 	bl	8007d56 <memchr>
 8009a08:	9a04      	ldr	r2, [sp, #16]
 8009a0a:	b9d8      	cbnz	r0, 8009a44 <_vfiprintf_r+0x110>
 8009a0c:	06d1      	lsls	r1, r2, #27
 8009a0e:	bf44      	itt	mi
 8009a10:	2320      	movmi	r3, #32
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a16:	0713      	lsls	r3, r2, #28
 8009a18:	bf44      	itt	mi
 8009a1a:	232b      	movmi	r3, #43	@ 0x2b
 8009a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a20:	f89a 3000 	ldrb.w	r3, [sl]
 8009a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a26:	d015      	beq.n	8009a54 <_vfiprintf_r+0x120>
 8009a28:	9a07      	ldr	r2, [sp, #28]
 8009a2a:	4654      	mov	r4, sl
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f04f 0c0a 	mov.w	ip, #10
 8009a32:	4621      	mov	r1, r4
 8009a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a38:	3b30      	subs	r3, #48	@ 0x30
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d94b      	bls.n	8009ad6 <_vfiprintf_r+0x1a2>
 8009a3e:	b1b0      	cbz	r0, 8009a6e <_vfiprintf_r+0x13a>
 8009a40:	9207      	str	r2, [sp, #28]
 8009a42:	e014      	b.n	8009a6e <_vfiprintf_r+0x13a>
 8009a44:	eba0 0308 	sub.w	r3, r0, r8
 8009a48:	46a2      	mov	sl, r4
 8009a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	e7d2      	b.n	80099fa <_vfiprintf_r+0xc6>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	1d19      	adds	r1, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	9103      	str	r1, [sp, #12]
 8009a5e:	bfbb      	ittet	lt
 8009a60:	425b      	neglt	r3, r3
 8009a62:	f042 0202 	orrlt.w	r2, r2, #2
 8009a66:	9307      	strge	r3, [sp, #28]
 8009a68:	9307      	strlt	r3, [sp, #28]
 8009a6a:	bfb8      	it	lt
 8009a6c:	9204      	strlt	r2, [sp, #16]
 8009a6e:	7823      	ldrb	r3, [r4, #0]
 8009a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a72:	d10a      	bne.n	8009a8a <_vfiprintf_r+0x156>
 8009a74:	7863      	ldrb	r3, [r4, #1]
 8009a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a78:	d132      	bne.n	8009ae0 <_vfiprintf_r+0x1ac>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	3402      	adds	r4, #2
 8009a7e:	1d1a      	adds	r2, r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a86:	9203      	str	r2, [sp, #12]
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b60 <_vfiprintf_r+0x22c>
 8009a8e:	2203      	movs	r2, #3
 8009a90:	7821      	ldrb	r1, [r4, #0]
 8009a92:	4650      	mov	r0, sl
 8009a94:	f7fe f95f 	bl	8007d56 <memchr>
 8009a98:	b138      	cbz	r0, 8009aaa <_vfiprintf_r+0x176>
 8009a9a:	eba0 000a 	sub.w	r0, r0, sl
 8009a9e:	2240      	movs	r2, #64	@ 0x40
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	3401      	adds	r4, #1
 8009aa4:	4082      	lsls	r2, r0
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aae:	2206      	movs	r2, #6
 8009ab0:	4828      	ldr	r0, [pc, #160]	@ (8009b54 <_vfiprintf_r+0x220>)
 8009ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ab6:	f7fe f94e 	bl	8007d56 <memchr>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d03f      	beq.n	8009b3e <_vfiprintf_r+0x20a>
 8009abe:	4b26      	ldr	r3, [pc, #152]	@ (8009b58 <_vfiprintf_r+0x224>)
 8009ac0:	bb1b      	cbnz	r3, 8009b0a <_vfiprintf_r+0x1d6>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	3307      	adds	r3, #7
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	3308      	adds	r3, #8
 8009acc:	9303      	str	r3, [sp, #12]
 8009ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad0:	443b      	add	r3, r7
 8009ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad4:	e76a      	b.n	80099ac <_vfiprintf_r+0x78>
 8009ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ada:	460c      	mov	r4, r1
 8009adc:	2001      	movs	r0, #1
 8009ade:	e7a8      	b.n	8009a32 <_vfiprintf_r+0xfe>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	3401      	adds	r4, #1
 8009ae4:	f04f 0c0a 	mov.w	ip, #10
 8009ae8:	4619      	mov	r1, r3
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	4620      	mov	r0, r4
 8009aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af2:	3a30      	subs	r2, #48	@ 0x30
 8009af4:	2a09      	cmp	r2, #9
 8009af6:	d903      	bls.n	8009b00 <_vfiprintf_r+0x1cc>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0c6      	beq.n	8009a8a <_vfiprintf_r+0x156>
 8009afc:	9105      	str	r1, [sp, #20]
 8009afe:	e7c4      	b.n	8009a8a <_vfiprintf_r+0x156>
 8009b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b04:	4604      	mov	r4, r0
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7f0      	b.n	8009aec <_vfiprintf_r+0x1b8>
 8009b0a:	ab03      	add	r3, sp, #12
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	a904      	add	r1, sp, #16
 8009b10:	4630      	mov	r0, r6
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	4b11      	ldr	r3, [pc, #68]	@ (8009b5c <_vfiprintf_r+0x228>)
 8009b16:	f7fd fbbd 	bl	8007294 <_printf_float>
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	1c78      	adds	r0, r7, #1
 8009b1e:	d1d6      	bne.n	8009ace <_vfiprintf_r+0x19a>
 8009b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	d405      	bmi.n	8009b32 <_vfiprintf_r+0x1fe>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	059a      	lsls	r2, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_vfiprintf_r+0x1fe>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2e:	f7fe f911 	bl	8007d54 <__retarget_lock_release_recursive>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	065b      	lsls	r3, r3, #25
 8009b36:	f53f af1f 	bmi.w	8009978 <_vfiprintf_r+0x44>
 8009b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3c:	e71e      	b.n	800997c <_vfiprintf_r+0x48>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	462a      	mov	r2, r5
 8009b42:	a904      	add	r1, sp, #16
 8009b44:	4630      	mov	r0, r6
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4b04      	ldr	r3, [pc, #16]	@ (8009b5c <_vfiprintf_r+0x228>)
 8009b4a:	f7fd fe3f 	bl	80077cc <_printf_i>
 8009b4e:	e7e4      	b.n	8009b1a <_vfiprintf_r+0x1e6>
 8009b50:	0800a160 	.word	0x0800a160
 8009b54:	0800a16a 	.word	0x0800a16a
 8009b58:	08007295 	.word	0x08007295
 8009b5c:	08009911 	.word	0x08009911
 8009b60:	0800a166 	.word	0x0800a166

08009b64 <__swbuf_r>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	460e      	mov	r6, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	b118      	cbz	r0, 8009b76 <__swbuf_r+0x12>
 8009b6e:	6a03      	ldr	r3, [r0, #32]
 8009b70:	b90b      	cbnz	r3, 8009b76 <__swbuf_r+0x12>
 8009b72:	f7fd ffd7 	bl	8007b24 <__sinit>
 8009b76:	69a3      	ldr	r3, [r4, #24]
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	d501      	bpl.n	8009b84 <__swbuf_r+0x20>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	b943      	cbnz	r3, 8009b96 <__swbuf_r+0x32>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 f82a 	bl	8009be0 <__swsetup_r>
 8009b8c:	b118      	cbz	r0, 8009b96 <__swbuf_r+0x32>
 8009b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8009b92:	4638      	mov	r0, r7
 8009b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	b2f6      	uxtb	r6, r6
 8009b9a:	6922      	ldr	r2, [r4, #16]
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	1a98      	subs	r0, r3, r2
 8009ba0:	6963      	ldr	r3, [r4, #20]
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	dc05      	bgt.n	8009bb2 <__swbuf_r+0x4e>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7ff fd99 	bl	80096e0 <_fflush_r>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d1ed      	bne.n	8009b8e <__swbuf_r+0x2a>
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	701e      	strb	r6, [r3, #0]
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	6962      	ldr	r2, [r4, #20]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d004      	beq.n	8009bd2 <__swbuf_r+0x6e>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d5e1      	bpl.n	8009b92 <__swbuf_r+0x2e>
 8009bce:	2e0a      	cmp	r6, #10
 8009bd0:	d1df      	bne.n	8009b92 <__swbuf_r+0x2e>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f7ff fd83 	bl	80096e0 <_fflush_r>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d0d9      	beq.n	8009b92 <__swbuf_r+0x2e>
 8009bde:	e7d6      	b.n	8009b8e <__swbuf_r+0x2a>

08009be0 <__swsetup_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4b29      	ldr	r3, [pc, #164]	@ (8009c88 <__swsetup_r+0xa8>)
 8009be4:	4605      	mov	r5, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	b118      	cbz	r0, 8009bf4 <__swsetup_r+0x14>
 8009bec:	6a03      	ldr	r3, [r0, #32]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <__swsetup_r+0x14>
 8009bf0:	f7fd ff98 	bl	8007b24 <__sinit>
 8009bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf8:	0719      	lsls	r1, r3, #28
 8009bfa:	d422      	bmi.n	8009c42 <__swsetup_r+0x62>
 8009bfc:	06da      	lsls	r2, r3, #27
 8009bfe:	d407      	bmi.n	8009c10 <__swsetup_r+0x30>
 8009c00:	2209      	movs	r2, #9
 8009c02:	602a      	str	r2, [r5, #0]
 8009c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	e033      	b.n	8009c78 <__swsetup_r+0x98>
 8009c10:	0758      	lsls	r0, r3, #29
 8009c12:	d512      	bpl.n	8009c3a <__swsetup_r+0x5a>
 8009c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c16:	b141      	cbz	r1, 8009c2a <__swsetup_r+0x4a>
 8009c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	d002      	beq.n	8009c26 <__swsetup_r+0x46>
 8009c20:	4628      	mov	r0, r5
 8009c22:	f7fe fef9 	bl	8008a18 <_free_r>
 8009c26:	2300      	movs	r3, #0
 8009c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	2300      	movs	r3, #0
 8009c34:	6063      	str	r3, [r4, #4]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f043 0308 	orr.w	r3, r3, #8
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	b94b      	cbnz	r3, 8009c5a <__swsetup_r+0x7a>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c50:	d003      	beq.n	8009c5a <__swsetup_r+0x7a>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	f000 f882 	bl	8009d5e <__smakebuf_r>
 8009c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5e:	f013 0201 	ands.w	r2, r3, #1
 8009c62:	d00a      	beq.n	8009c7a <__swsetup_r+0x9a>
 8009c64:	2200      	movs	r2, #0
 8009c66:	60a2      	str	r2, [r4, #8]
 8009c68:	6962      	ldr	r2, [r4, #20]
 8009c6a:	4252      	negs	r2, r2
 8009c6c:	61a2      	str	r2, [r4, #24]
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	b942      	cbnz	r2, 8009c84 <__swsetup_r+0xa4>
 8009c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c76:	d1c5      	bne.n	8009c04 <__swsetup_r+0x24>
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	0799      	lsls	r1, r3, #30
 8009c7c:	bf58      	it	pl
 8009c7e:	6962      	ldrpl	r2, [r4, #20]
 8009c80:	60a2      	str	r2, [r4, #8]
 8009c82:	e7f4      	b.n	8009c6e <__swsetup_r+0x8e>
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7f7      	b.n	8009c78 <__swsetup_r+0x98>
 8009c88:	20000038 	.word	0x20000038

08009c8c <_raise_r>:
 8009c8c:	291f      	cmp	r1, #31
 8009c8e:	b538      	push	{r3, r4, r5, lr}
 8009c90:	4605      	mov	r5, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	d904      	bls.n	8009ca0 <_raise_r+0x14>
 8009c96:	2316      	movs	r3, #22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ca2:	b112      	cbz	r2, 8009caa <_raise_r+0x1e>
 8009ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca8:	b94b      	cbnz	r3, 8009cbe <_raise_r+0x32>
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 f830 	bl	8009d10 <_getpid_r>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cba:	f000 b817 	b.w	8009cec <_kill_r>
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d00a      	beq.n	8009cd8 <_raise_r+0x4c>
 8009cc2:	1c59      	adds	r1, r3, #1
 8009cc4:	d103      	bne.n	8009cce <_raise_r+0x42>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	e7e7      	b.n	8009c9e <_raise_r+0x12>
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd6:	4798      	blx	r3
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7e0      	b.n	8009c9e <_raise_r+0x12>

08009cdc <raise>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <raise+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f7ff bfd3 	b.w	8009c8c <_raise_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000038 	.word	0x20000038

08009cec <_kill_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4d06      	ldr	r5, [pc, #24]	@ (8009d0c <_kill_r+0x20>)
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f7f7 fb5b 	bl	80013b4 <_kill>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_kill_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_kill_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200003ec 	.word	0x200003ec

08009d10 <_getpid_r>:
 8009d10:	f7f7 bb48 	b.w	80013a4 <_getpid>

08009d14 <__swhatbuf_r>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	460c      	mov	r4, r1
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	b096      	sub	sp, #88	@ 0x58
 8009d1e:	4615      	mov	r5, r2
 8009d20:	2900      	cmp	r1, #0
 8009d22:	461e      	mov	r6, r3
 8009d24:	da0c      	bge.n	8009d40 <__swhatbuf_r+0x2c>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d2e:	bf14      	ite	ne
 8009d30:	2340      	movne	r3, #64	@ 0x40
 8009d32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d36:	2000      	movs	r0, #0
 8009d38:	6031      	str	r1, [r6, #0]
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	b016      	add	sp, #88	@ 0x58
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	466a      	mov	r2, sp
 8009d42:	f000 f849 	bl	8009dd8 <_fstat_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	dbed      	blt.n	8009d26 <__swhatbuf_r+0x12>
 8009d4a:	9901      	ldr	r1, [sp, #4]
 8009d4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d54:	4259      	negs	r1, r3
 8009d56:	4159      	adcs	r1, r3
 8009d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d5c:	e7eb      	b.n	8009d36 <__swhatbuf_r+0x22>

08009d5e <__smakebuf_r>:
 8009d5e:	898b      	ldrh	r3, [r1, #12]
 8009d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d62:	079d      	lsls	r5, r3, #30
 8009d64:	4606      	mov	r6, r0
 8009d66:	460c      	mov	r4, r1
 8009d68:	d507      	bpl.n	8009d7a <__smakebuf_r+0x1c>
 8009d6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	6123      	str	r3, [r4, #16]
 8009d72:	2301      	movs	r3, #1
 8009d74:	6163      	str	r3, [r4, #20]
 8009d76:	b003      	add	sp, #12
 8009d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7a:	ab01      	add	r3, sp, #4
 8009d7c:	466a      	mov	r2, sp
 8009d7e:	f7ff ffc9 	bl	8009d14 <__swhatbuf_r>
 8009d82:	9f00      	ldr	r7, [sp, #0]
 8009d84:	4605      	mov	r5, r0
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7fe feb9 	bl	8008b00 <_malloc_r>
 8009d8e:	b948      	cbnz	r0, 8009da4 <__smakebuf_r+0x46>
 8009d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d4ee      	bmi.n	8009d76 <__smakebuf_r+0x18>
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7e2      	b.n	8009d6a <__smakebuf_r+0xc>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009db4:	b15b      	cbz	r3, 8009dce <__smakebuf_r+0x70>
 8009db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f000 f81e 	bl	8009dfc <_isatty_r>
 8009dc0:	b128      	cbz	r0, 8009dce <__smakebuf_r+0x70>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	f043 0301 	orr.w	r3, r3, #1
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	431d      	orrs	r5, r3
 8009dd2:	81a5      	strh	r5, [r4, #12]
 8009dd4:	e7cf      	b.n	8009d76 <__smakebuf_r+0x18>
	...

08009dd8 <_fstat_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4d06      	ldr	r5, [pc, #24]	@ (8009df8 <_fstat_r+0x20>)
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7f7 fb45 	bl	8001474 <_fstat>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_fstat_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_fstat_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	200003ec 	.word	0x200003ec

08009dfc <_isatty_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4d05      	ldr	r5, [pc, #20]	@ (8009e18 <_isatty_r+0x1c>)
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 fb44 	bl	8001494 <_isatty>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_isatty_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_isatty_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	200003ec 	.word	0x200003ec

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
