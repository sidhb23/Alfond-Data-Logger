
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  0800bcf0  0800bcf0  0000ccf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c920  0800c920  0000d920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c928  0800c928  0000d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c92c  0800c92c  0000d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  20000000  0800c930  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008e8  200001dc  0800cb0c  0000e1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000ac4  0800cb0c  0000eac4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000172dc  00000000  00000000  0000e212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f6  00000000  00000000  000254ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012a8  00000000  00000000  000285e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e66  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f4c9  00000000  00000000  0002a6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000192b5  00000000  00000000  00059bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011f793  00000000  00000000  00072e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00192607  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f54  00000000  00000000  0019264c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001985a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001dc 	.word	0x200001dc
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bcd4 	.word	0x0800bcd4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001e0 	.word	0x200001e0
 8000274:	0800bcd4 	.word	0x0800bcd4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_frsub>:
 8000c50:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	e002      	b.n	8000c5c <__addsf3>
 8000c56:	bf00      	nop

08000c58 <__aeabi_fsub>:
 8000c58:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c5c <__addsf3>:
 8000c5c:	0042      	lsls	r2, r0, #1
 8000c5e:	bf1f      	itttt	ne
 8000c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c64:	ea92 0f03 	teqne	r2, r3
 8000c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c70:	d06a      	beq.n	8000d48 <__addsf3+0xec>
 8000c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7a:	bfc1      	itttt	gt
 8000c7c:	18d2      	addgt	r2, r2, r3
 8000c7e:	4041      	eorgt	r1, r0
 8000c80:	4048      	eorgt	r0, r1
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	bfb8      	it	lt
 8000c86:	425b      	neglt	r3, r3
 8000c88:	2b19      	cmp	r3, #25
 8000c8a:	bf88      	it	hi
 8000c8c:	4770      	bxhi	lr
 8000c8e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c96:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4240      	negne	r0, r0
 8000c9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ca6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000caa:	bf18      	it	ne
 8000cac:	4249      	negne	r1, r1
 8000cae:	ea92 0f03 	teq	r2, r3
 8000cb2:	d03f      	beq.n	8000d34 <__addsf3+0xd8>
 8000cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cbc:	eb10 000c 	adds.w	r0, r0, ip
 8000cc0:	f1c3 0320 	rsb	r3, r3, #32
 8000cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__addsf3+0x78>
 8000cce:	4249      	negs	r1, r1
 8000cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd8:	d313      	bcc.n	8000d02 <__addsf3+0xa6>
 8000cda:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cde:	d306      	bcc.n	8000cee <__addsf3+0x92>
 8000ce0:	0840      	lsrs	r0, r0, #1
 8000ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ce6:	f102 0201 	add.w	r2, r2, #1
 8000cea:	2afe      	cmp	r2, #254	@ 0xfe
 8000cec:	d251      	bcs.n	8000d92 <__addsf3+0x136>
 8000cee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf6:	bf08      	it	eq
 8000cf8:	f020 0001 	biceq.w	r0, r0, #1
 8000cfc:	ea40 0003 	orr.w	r0, r0, r3
 8000d00:	4770      	bx	lr
 8000d02:	0049      	lsls	r1, r1, #1
 8000d04:	eb40 0000 	adc.w	r0, r0, r0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d10:	d2ed      	bcs.n	8000cee <__addsf3+0x92>
 8000d12:	fab0 fc80 	clz	ip, r0
 8000d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d22:	bfaa      	itet	ge
 8000d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d28:	4252      	neglt	r2, r2
 8000d2a:	4318      	orrge	r0, r3
 8000d2c:	bfbc      	itt	lt
 8000d2e:	40d0      	lsrlt	r0, r2
 8000d30:	4318      	orrlt	r0, r3
 8000d32:	4770      	bx	lr
 8000d34:	f092 0f00 	teq	r2, #0
 8000d38:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d3c:	bf06      	itte	eq
 8000d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d42:	3201      	addeq	r2, #1
 8000d44:	3b01      	subne	r3, #1
 8000d46:	e7b5      	b.n	8000cb4 <__addsf3+0x58>
 8000d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d50:	bf18      	it	ne
 8000d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d56:	d021      	beq.n	8000d9c <__addsf3+0x140>
 8000d58:	ea92 0f03 	teq	r2, r3
 8000d5c:	d004      	beq.n	8000d68 <__addsf3+0x10c>
 8000d5e:	f092 0f00 	teq	r2, #0
 8000d62:	bf08      	it	eq
 8000d64:	4608      	moveq	r0, r1
 8000d66:	4770      	bx	lr
 8000d68:	ea90 0f01 	teq	r0, r1
 8000d6c:	bf1c      	itt	ne
 8000d6e:	2000      	movne	r0, #0
 8000d70:	4770      	bxne	lr
 8000d72:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d76:	d104      	bne.n	8000d82 <__addsf3+0x126>
 8000d78:	0040      	lsls	r0, r0, #1
 8000d7a:	bf28      	it	cs
 8000d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d80:	4770      	bx	lr
 8000d82:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d86:	bf3c      	itt	cc
 8000d88:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d8c:	4770      	bxcc	lr
 8000d8e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d92:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9a:	4770      	bx	lr
 8000d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da0:	bf16      	itet	ne
 8000da2:	4608      	movne	r0, r1
 8000da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da8:	4601      	movne	r1, r0
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	bf06      	itte	eq
 8000dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db2:	ea90 0f01 	teqeq	r0, r1
 8000db6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_ui2f>:
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e004      	b.n	8000dcc <__aeabi_i2f+0x8>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_i2f>:
 8000dc4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc8:	bf48      	it	mi
 8000dca:	4240      	negmi	r0, r0
 8000dcc:	ea5f 0c00 	movs.w	ip, r0
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd8:	4601      	mov	r1, r0
 8000dda:	f04f 0000 	mov.w	r0, #0
 8000dde:	e01c      	b.n	8000e1a <__aeabi_l2f+0x2a>

08000de0 <__aeabi_ul2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e00a      	b.n	8000e04 <__aeabi_l2f+0x14>
 8000dee:	bf00      	nop

08000df0 <__aeabi_l2f>:
 8000df0:	ea50 0201 	orrs.w	r2, r0, r1
 8000df4:	bf08      	it	eq
 8000df6:	4770      	bxeq	lr
 8000df8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dfc:	d502      	bpl.n	8000e04 <__aeabi_l2f+0x14>
 8000dfe:	4240      	negs	r0, r0
 8000e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e04:	ea5f 0c01 	movs.w	ip, r1
 8000e08:	bf02      	ittt	eq
 8000e0a:	4684      	moveq	ip, r0
 8000e0c:	4601      	moveq	r1, r0
 8000e0e:	2000      	moveq	r0, #0
 8000e10:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e14:	bf08      	it	eq
 8000e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e1e:	fabc f28c 	clz	r2, ip
 8000e22:	3a08      	subs	r2, #8
 8000e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e28:	db10      	blt.n	8000e4c <__aeabi_l2f+0x5c>
 8000e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2e:	4463      	add	r3, ip
 8000e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	f020 0001 	biceq.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	f102 0220 	add.w	r2, r2, #32
 8000e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e54:	f1c2 0220 	rsb	r2, r2, #32
 8000e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e60:	eb43 0002 	adc.w	r0, r3, r2
 8000e64:	bf08      	it	eq
 8000e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_uldivmod>:
 8000e6c:	b953      	cbnz	r3, 8000e84 <__aeabi_uldivmod+0x18>
 8000e6e:	b94a      	cbnz	r2, 8000e84 <__aeabi_uldivmod+0x18>
 8000e70:	2900      	cmp	r1, #0
 8000e72:	bf08      	it	eq
 8000e74:	2800      	cmpeq	r0, #0
 8000e76:	bf1c      	itt	ne
 8000e78:	f04f 31ff 	movne.w	r1, #4294967295
 8000e7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e80:	f000 b97e 	b.w	8001180 <__aeabi_idiv0>
 8000e84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8c:	f000 f806 	bl	8000e9c <__udivmoddi4>
 8000e90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e98:	b004      	add	sp, #16
 8000e9a:	4770      	bx	lr

08000e9c <__udivmoddi4>:
 8000e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ea0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14d      	bne.n	8000f44 <__udivmoddi4+0xa8>
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	460f      	mov	r7, r1
 8000eac:	4684      	mov	ip, r0
 8000eae:	4696      	mov	lr, r2
 8000eb0:	fab2 f382 	clz	r3, r2
 8000eb4:	d960      	bls.n	8000f78 <__udivmoddi4+0xdc>
 8000eb6:	b14b      	cbz	r3, 8000ecc <__udivmoddi4+0x30>
 8000eb8:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ebc:	f1c3 0220 	rsb	r2, r3, #32
 8000ec0:	409f      	lsls	r7, r3
 8000ec2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ec6:	fa20 f202 	lsr.w	r2, r0, r2
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ed0:	fa1f f48e 	uxth.w	r4, lr
 8000ed4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ed8:	fbb7 f1f6 	udiv	r1, r7, r6
 8000edc:	fb06 7711 	mls	r7, r6, r1, r7
 8000ee0:	fb01 f004 	mul.w	r0, r1, r4
 8000ee4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x62>
 8000eec:	eb1e 0202 	adds.w	r2, lr, r2
 8000ef0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ef4:	d202      	bcs.n	8000efc <__udivmoddi4+0x60>
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	f200 812d 	bhi.w	8001156 <__udivmoddi4+0x2ba>
 8000efc:	4639      	mov	r1, r7
 8000efe:	1a12      	subs	r2, r2, r0
 8000f00:	fa1f fc8c 	uxth.w	ip, ip
 8000f04:	fbb2 f0f6 	udiv	r0, r2, r6
 8000f08:	fb06 2210 	mls	r2, r6, r0, r2
 8000f0c:	fb00 f404 	mul.w	r4, r0, r4
 8000f10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000f14:	4564      	cmp	r4, ip
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x8e>
 8000f18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000f1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x8c>
 8000f22:	4564      	cmp	r4, ip
 8000f24:	f200 811a 	bhi.w	800115c <__udivmoddi4+0x2c0>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f2e:	ebac 0c04 	sub.w	ip, ip, r4
 8000f32:	2100      	movs	r1, #0
 8000f34:	b125      	cbz	r5, 8000f40 <__udivmoddi4+0xa4>
 8000f36:	fa2c f303 	lsr.w	r3, ip, r3
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	e9c5 3200 	strd	r3, r2, [r5]
 8000f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d905      	bls.n	8000f54 <__udivmoddi4+0xb8>
 8000f48:	b10d      	cbz	r5, 8000f4e <__udivmoddi4+0xb2>
 8000f4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4608      	mov	r0, r1
 8000f52:	e7f5      	b.n	8000f40 <__udivmoddi4+0xa4>
 8000f54:	fab3 f183 	clz	r1, r3
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	d14d      	bne.n	8000ff8 <__udivmoddi4+0x15c>
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	f0c0 80f2 	bcc.w	8001146 <__udivmoddi4+0x2aa>
 8000f62:	4290      	cmp	r0, r2
 8000f64:	f080 80ef 	bcs.w	8001146 <__udivmoddi4+0x2aa>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d0e6      	beq.n	8000f40 <__udivmoddi4+0xa4>
 8000f72:	e9c5 6300 	strd	r6, r3, [r5]
 8000f76:	e7e3      	b.n	8000f40 <__udivmoddi4+0xa4>
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f040 80a2 	bne.w	80010c2 <__udivmoddi4+0x226>
 8000f7e:	1a8a      	subs	r2, r1, r2
 8000f80:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000f8e:	fb07 2014 	mls	r0, r7, r4, r2
 8000f92:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000f96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f9a:	fb06 f004 	mul.w	r0, r6, r4
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	d90f      	bls.n	8000fc2 <__udivmoddi4+0x126>
 8000fa2:	eb1e 0202 	adds.w	r2, lr, r2
 8000fa6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000faa:	bf2c      	ite	cs
 8000fac:	f04f 0901 	movcs.w	r9, #1
 8000fb0:	f04f 0900 	movcc.w	r9, #0
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	d903      	bls.n	8000fc0 <__udivmoddi4+0x124>
 8000fb8:	f1b9 0f00 	cmp.w	r9, #0
 8000fbc:	f000 80c8 	beq.w	8001150 <__udivmoddi4+0x2b4>
 8000fc0:	4644      	mov	r4, r8
 8000fc2:	1a12      	subs	r2, r2, r0
 8000fc4:	fa1f fc8c 	uxth.w	ip, ip
 8000fc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000fd0:	fb00 f606 	mul.w	r6, r0, r6
 8000fd4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000fd8:	4566      	cmp	r6, ip
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x152>
 8000fdc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000fe0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe4:	d202      	bcs.n	8000fec <__udivmoddi4+0x150>
 8000fe6:	4566      	cmp	r6, ip
 8000fe8:	f200 80bb 	bhi.w	8001162 <__udivmoddi4+0x2c6>
 8000fec:	4610      	mov	r0, r2
 8000fee:	ebac 0c06 	sub.w	ip, ip, r6
 8000ff2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ff6:	e79d      	b.n	8000f34 <__udivmoddi4+0x98>
 8000ff8:	f1c1 0620 	rsb	r6, r1, #32
 8000ffc:	408b      	lsls	r3, r1
 8000ffe:	fa04 fe01 	lsl.w	lr, r4, r1
 8001002:	fa22 f706 	lsr.w	r7, r2, r6
 8001006:	fa20 fc06 	lsr.w	ip, r0, r6
 800100a:	40f4      	lsrs	r4, r6
 800100c:	408a      	lsls	r2, r1
 800100e:	431f      	orrs	r7, r3
 8001010:	ea4e 030c 	orr.w	r3, lr, ip
 8001014:	fa00 fe01 	lsl.w	lr, r0, r1
 8001018:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800101c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001020:	fa1f fc87 	uxth.w	ip, r7
 8001024:	fbb4 f0f8 	udiv	r0, r4, r8
 8001028:	fb08 4410 	mls	r4, r8, r0, r4
 800102c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001030:	fb00 f90c 	mul.w	r9, r0, ip
 8001034:	45a1      	cmp	r9, r4
 8001036:	d90e      	bls.n	8001056 <__udivmoddi4+0x1ba>
 8001038:	193c      	adds	r4, r7, r4
 800103a:	f100 3aff 	add.w	sl, r0, #4294967295
 800103e:	bf2c      	ite	cs
 8001040:	f04f 0b01 	movcs.w	fp, #1
 8001044:	f04f 0b00 	movcc.w	fp, #0
 8001048:	45a1      	cmp	r9, r4
 800104a:	d903      	bls.n	8001054 <__udivmoddi4+0x1b8>
 800104c:	f1bb 0f00 	cmp.w	fp, #0
 8001050:	f000 8093 	beq.w	800117a <__udivmoddi4+0x2de>
 8001054:	4650      	mov	r0, sl
 8001056:	eba4 0409 	sub.w	r4, r4, r9
 800105a:	fa1f f983 	uxth.w	r9, r3
 800105e:	fbb4 f3f8 	udiv	r3, r4, r8
 8001062:	fb08 4413 	mls	r4, r8, r3, r4
 8001066:	fb03 fc0c 	mul.w	ip, r3, ip
 800106a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800106e:	45a4      	cmp	ip, r4
 8001070:	d906      	bls.n	8001080 <__udivmoddi4+0x1e4>
 8001072:	193c      	adds	r4, r7, r4
 8001074:	f103 38ff 	add.w	r8, r3, #4294967295
 8001078:	d201      	bcs.n	800107e <__udivmoddi4+0x1e2>
 800107a:	45a4      	cmp	ip, r4
 800107c:	d87a      	bhi.n	8001174 <__udivmoddi4+0x2d8>
 800107e:	4643      	mov	r3, r8
 8001080:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001084:	eba4 040c 	sub.w	r4, r4, ip
 8001088:	fba0 9802 	umull	r9, r8, r0, r2
 800108c:	4544      	cmp	r4, r8
 800108e:	46cc      	mov	ip, r9
 8001090:	4643      	mov	r3, r8
 8001092:	d302      	bcc.n	800109a <__udivmoddi4+0x1fe>
 8001094:	d106      	bne.n	80010a4 <__udivmoddi4+0x208>
 8001096:	45ce      	cmp	lr, r9
 8001098:	d204      	bcs.n	80010a4 <__udivmoddi4+0x208>
 800109a:	3801      	subs	r0, #1
 800109c:	ebb9 0c02 	subs.w	ip, r9, r2
 80010a0:	eb68 0307 	sbc.w	r3, r8, r7
 80010a4:	b15d      	cbz	r5, 80010be <__udivmoddi4+0x222>
 80010a6:	ebbe 020c 	subs.w	r2, lr, ip
 80010aa:	eb64 0403 	sbc.w	r4, r4, r3
 80010ae:	fa04 f606 	lsl.w	r6, r4, r6
 80010b2:	fa22 f301 	lsr.w	r3, r2, r1
 80010b6:	40cc      	lsrs	r4, r1
 80010b8:	431e      	orrs	r6, r3
 80010ba:	e9c5 6400 	strd	r6, r4, [r5]
 80010be:	2100      	movs	r1, #0
 80010c0:	e73e      	b.n	8000f40 <__udivmoddi4+0xa4>
 80010c2:	fa02 fe03 	lsl.w	lr, r2, r3
 80010c6:	f1c3 0120 	rsb	r1, r3, #32
 80010ca:	fa04 f203 	lsl.w	r2, r4, r3
 80010ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80010d2:	40cc      	lsrs	r4, r1
 80010d4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80010d8:	fa20 f101 	lsr.w	r1, r0, r1
 80010dc:	fa1f f68e 	uxth.w	r6, lr
 80010e0:	fbb4 f0f7 	udiv	r0, r4, r7
 80010e4:	430a      	orrs	r2, r1
 80010e6:	fb07 4410 	mls	r4, r7, r0, r4
 80010ea:	0c11      	lsrs	r1, r2, #16
 80010ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80010f0:	fb00 f406 	mul.w	r4, r0, r6
 80010f4:	428c      	cmp	r4, r1
 80010f6:	d90e      	bls.n	8001116 <__udivmoddi4+0x27a>
 80010f8:	eb1e 0101 	adds.w	r1, lr, r1
 80010fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8001100:	bf2c      	ite	cs
 8001102:	f04f 0901 	movcs.w	r9, #1
 8001106:	f04f 0900 	movcc.w	r9, #0
 800110a:	428c      	cmp	r4, r1
 800110c:	d902      	bls.n	8001114 <__udivmoddi4+0x278>
 800110e:	f1b9 0f00 	cmp.w	r9, #0
 8001112:	d02c      	beq.n	800116e <__udivmoddi4+0x2d2>
 8001114:	4640      	mov	r0, r8
 8001116:	1b09      	subs	r1, r1, r4
 8001118:	b292      	uxth	r2, r2
 800111a:	fbb1 f4f7 	udiv	r4, r1, r7
 800111e:	fb07 1114 	mls	r1, r7, r4, r1
 8001122:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001126:	fb04 f106 	mul.w	r1, r4, r6
 800112a:	4291      	cmp	r1, r2
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x2a2>
 800112e:	eb1e 0202 	adds.w	r2, lr, r2
 8001132:	f104 38ff 	add.w	r8, r4, #4294967295
 8001136:	d201      	bcs.n	800113c <__udivmoddi4+0x2a0>
 8001138:	4291      	cmp	r1, r2
 800113a:	d815      	bhi.n	8001168 <__udivmoddi4+0x2cc>
 800113c:	4644      	mov	r4, r8
 800113e:	1a52      	subs	r2, r2, r1
 8001140:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001144:	e721      	b.n	8000f8a <__udivmoddi4+0xee>
 8001146:	1a86      	subs	r6, r0, r2
 8001148:	eb64 0303 	sbc.w	r3, r4, r3
 800114c:	2001      	movs	r0, #1
 800114e:	e70e      	b.n	8000f6e <__udivmoddi4+0xd2>
 8001150:	3c02      	subs	r4, #2
 8001152:	4472      	add	r2, lr
 8001154:	e735      	b.n	8000fc2 <__udivmoddi4+0x126>
 8001156:	3902      	subs	r1, #2
 8001158:	4472      	add	r2, lr
 800115a:	e6d0      	b.n	8000efe <__udivmoddi4+0x62>
 800115c:	44f4      	add	ip, lr
 800115e:	3802      	subs	r0, #2
 8001160:	e6e3      	b.n	8000f2a <__udivmoddi4+0x8e>
 8001162:	44f4      	add	ip, lr
 8001164:	3802      	subs	r0, #2
 8001166:	e742      	b.n	8000fee <__udivmoddi4+0x152>
 8001168:	3c02      	subs	r4, #2
 800116a:	4472      	add	r2, lr
 800116c:	e7e7      	b.n	800113e <__udivmoddi4+0x2a2>
 800116e:	3802      	subs	r0, #2
 8001170:	4471      	add	r1, lr
 8001172:	e7d0      	b.n	8001116 <__udivmoddi4+0x27a>
 8001174:	3b02      	subs	r3, #2
 8001176:	443c      	add	r4, r7
 8001178:	e782      	b.n	8001080 <__udivmoddi4+0x1e4>
 800117a:	3802      	subs	r0, #2
 800117c:	443c      	add	r4, r7
 800117e:	e76a      	b.n	8001056 <__udivmoddi4+0x1ba>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <DS18B20_start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int DS18B20_start (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
		uint8_t data = 0xF0;
 800118a:	23f0      	movs	r3, #240	@ 0xf0
 800118c:	71fb      	strb	r3, [r7, #7]
		MX_UART4_Init(9600);
 800118e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001192:	f000 fba3 	bl	80018dc <MX_UART4_Init>
		HAL_UART_Transmit(&huart4, &data, 1, 100);
 8001196:	1df9      	adds	r1, r7, #7
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	2201      	movs	r2, #1
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <DS18B20_start+0x58>)
 800119e:	f007 f913 	bl	80083c8 <HAL_UART_Transmit>
		if (HAL_UART_Receive(&huart4, &data, 1, 1000) != HAL_OK) return -1; // failed.. check connection
 80011a2:	1df9      	adds	r1, r7, #7
 80011a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a8:	2201      	movs	r2, #1
 80011aa:	480c      	ldr	r0, [pc, #48]	@ (80011dc <DS18B20_start+0x58>)
 80011ac:	f007 f99a 	bl	80084e4 <HAL_UART_Receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <DS18B20_start+0x38>
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e00a      	b.n	80011d2 <DS18B20_start+0x4e>
		MX_UART4_Init(115200);
 80011bc:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80011c0:	f000 fb8c 	bl	80018dc <MX_UART4_Init>
		if (data == 0xf0) return -2; //error no device detected
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80011c8:	d102      	bne.n	80011d0 <DS18B20_start+0x4c>
 80011ca:	f06f 0301 	mvn.w	r3, #1
 80011ce:	e000      	b.n	80011d2 <DS18B20_start+0x4e>
		return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002f4 	.word	0x200002f4

080011e0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];
	for (int i = 0; i < 8; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e017      	b.n	8001220 <DS18B20_Write+0x40>
		if ((data & (1<<i)) != 0){  // if the bit is high
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa42 f303 	asr.w	r3, r2, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <DS18B20_Write+0x2e>
			buffer[i] = 0xFF; // send a 1
 8001200:	f107 020c 	add.w	r2, r7, #12
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	22ff      	movs	r2, #255	@ 0xff
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e005      	b.n	800121a <DS18B20_Write+0x3a>
		} else {
			buffer[i] = 0x00; // send a 0
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b07      	cmp	r3, #7
 8001224:	dde4      	ble.n	80011f0 <DS18B20_Write+0x10>
		}
	}

	HAL_UART_Transmit(&huart4, buffer, 8, 1000);
 8001226:	f107 010c 	add.w	r1, r7, #12
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	2208      	movs	r2, #8
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <DS18B20_Write+0x60>)
 8001232:	f007 f8c9 	bl	80083c8 <HAL_UART_Transmit>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002f4 	.word	0x200002f4

08001244 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e027      	b.n	80012a4 <DS18B20_Read+0x60>
    {
        uint8_t tx_byte = 0xFF;  // Transmit request for a read time slot
 8001254:	23ff      	movs	r3, #255	@ 0xff
 8001256:	71fb      	strb	r3, [r7, #7]
        uint8_t rx_byte = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	71bb      	strb	r3, [r7, #6]

        // Transmit and receive each bit
        if (HAL_UART_Transmit(&huart4, &tx_byte, 1, 1000) != HAL_OK)
 800125c:	1df9      	adds	r1, r7, #7
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	2201      	movs	r2, #1
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <DS18B20_Read+0x70>)
 8001266:	f007 f8af 	bl	80083c8 <HAL_UART_Transmit>
        {
            // Handle transmission error
        }

        if (HAL_UART_Receive(&huart4, &rx_byte, 1, 1000) != HAL_OK)
 800126a:	1db9      	adds	r1, r7, #6
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	2201      	movs	r2, #1
 8001272:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <DS18B20_Read+0x70>)
 8001274:	f007 f936 	bl	80084e4 <HAL_UART_Receive>
        {
            // Handle reception error
        }

        // Store the received bit in RxData for debugging
        RxData[i] = rx_byte;
 8001278:	79b9      	ldrb	r1, [r7, #6]
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <DS18B20_Read+0x74>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]

        // Interpret received bit as 1 if rx_byte == 0xFF, otherwise 0
        if (rx_byte == 0xFF)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2bff      	cmp	r3, #255	@ 0xff
 8001288:	d109      	bne.n	800129e <DS18B20_Read+0x5a>
        {
            value |= (1 << i); // Set the bit in value
 800128a:	2201      	movs	r2, #1
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	b25a      	sxtb	r2, r3
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	4313      	orrs	r3, r2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	ddd4      	ble.n	8001254 <DS18B20_Read+0x10>
        }
    }
    return value;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002f4 	.word	0x200002f4
 80012b8:	200004b4 	.word	0x200004b4

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	@ 0x40
 80012c0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint16_t prom[6];

	  char snum[15] = "Hello world";
 80012c2:	4ad6      	ldr	r2, [pc, #856]	@ (800161c <main+0x360>)
 80012c4:	463b      	mov	r3, r7
 80012c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2100      	movs	r1, #0
 80012d2:	460a      	mov	r2, r1
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	460a      	mov	r2, r1
 80012d8:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f001 fd35 	bl	8002d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f9c1 	bl	8001664 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80012e2:	f000 fa1b 	bl	800171c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f000 fbe1 	bl	8001aac <MX_GPIO_Init>
  MX_ICACHE_Init();
 80012ea:	f000 fae3 	bl	80018b4 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80012ee:	f000 fa21 	bl	8001734 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012f2:	f000 fa5f 	bl	80017b4 <MX_I2C2_Init>
  MX_UART4_Init(9600);
 80012f6:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80012fa:	f000 faef 	bl	80018dc <MX_UART4_Init>
  MX_UART5_Init();
 80012fe:	f000 fb3d 	bl	800197c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001302:	f000 fb87 	bl	8001a14 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8001306:	f000 fa95 	bl	8001834 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800130a:	f000 fe7f 	bl	800200c <SSD1306_Init>
  INA260_Init();
 800130e:	f000 fc23 	bl	8001b58 <INA260_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  MS8607_ReadPROM(&hi2c2, prom);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	48c1      	ldr	r0, [pc, #772]	@ (8001620 <main+0x364>)
 800131a:	f000 fccf 	bl	8001cbc <MS8607_ReadPROM>
	  temperature = MS8607_ReadTemperature(&hi2c2, prom);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	48be      	ldr	r0, [pc, #760]	@ (8001620 <main+0x364>)
 8001326:	f000 fd2f 	bl	8001d88 <MS8607_ReadTemperature>
 800132a:	ee10 3a10 	vmov	r3, s0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90e 	bl	8000550 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	    	  // Convert temperature to string for display
	    	  snprintf(snum, sizeof(snum), "%.2lf C", temperature);
 800133c:	4638      	mov	r0, r7
 800133e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001342:	e9cd 2300 	strd	r2, r3, [sp]
 8001346:	4ab7      	ldr	r2, [pc, #732]	@ (8001624 <main+0x368>)
 8001348:	210f      	movs	r1, #15
 800134a:	f008 fb69 	bl	8009a20 <sniprintf>

	    	  // Update the display
	    	  SSD1306_GotoXY(0, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f000 ffc5 	bl	80022e0 <SSD1306_GotoXY>
	    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 8001356:	463b      	mov	r3, r7
 8001358:	2201      	movs	r2, #1
 800135a:	49b3      	ldr	r1, [pc, #716]	@ (8001628 <main+0x36c>)
 800135c:	4618      	mov	r0, r3
 800135e:	f001 f853 	bl	8002408 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 8001362:	f000 ff17 	bl	8002194 <SSD1306_UpdateScreen>
	    	  strcat(snum, "\n\r");
 8001366:	463b      	mov	r3, r7
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff85 	bl	8000278 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	463b      	mov	r3, r7
 8001374:	4413      	add	r3, r2
 8001376:	4aad      	ldr	r2, [pc, #692]	@ (800162c <main+0x370>)
 8001378:	8811      	ldrh	r1, [r2, #0]
 800137a:	7892      	ldrb	r2, [r2, #2]
 800137c:	8019      	strh	r1, [r3, #0]
 800137e:	709a      	strb	r2, [r3, #2]
	    	  HAL_UART_Transmit(&huart5, (uint8_t*)snum, strlen(snum), 100);
 8001380:	463b      	mov	r3, r7
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff78 	bl	8000278 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	4639      	mov	r1, r7
 800138e:	2364      	movs	r3, #100	@ 0x64
 8001390:	48a7      	ldr	r0, [pc, #668]	@ (8001630 <main+0x374>)
 8001392:	f007 f819 	bl	80083c8 <HAL_UART_Transmit>
	    	  pressure = MS8607_ReadPressure(&hi2c2, prom, temperature);
 8001396:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800139a:	f7ff fc09 	bl	8000bb0 <__aeabi_d2f>
 800139e:	4602      	mov	r2, r0
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	ee00 2a10 	vmov	s0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	489d      	ldr	r0, [pc, #628]	@ (8001620 <main+0x364>)
 80013ac:	f000 fd84 	bl	8001eb8 <MS8607_ReadPressure>
 80013b0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	    	  // Convert temperature to string for display
	    	  snprintf(snum, sizeof(snum), "%.2f HPa", pressure);
 80013b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013b6:	f7ff f8cb 	bl	8000550 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4638      	mov	r0, r7
 80013c0:	e9cd 2300 	strd	r2, r3, [sp]
 80013c4:	4a9b      	ldr	r2, [pc, #620]	@ (8001634 <main+0x378>)
 80013c6:	210f      	movs	r1, #15
 80013c8:	f008 fb2a 	bl	8009a20 <sniprintf>

	    	  // Update the display
	    	  SSD1306_GotoXY(0, 20);
 80013cc:	2114      	movs	r1, #20
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 ff86 	bl	80022e0 <SSD1306_GotoXY>
	    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 80013d4:	463b      	mov	r3, r7
 80013d6:	2201      	movs	r2, #1
 80013d8:	4993      	ldr	r1, [pc, #588]	@ (8001628 <main+0x36c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f814 	bl	8002408 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 80013e0:	f000 fed8 	bl	8002194 <SSD1306_UpdateScreen>
	    	  strcat(snum, "\n\r");
 80013e4:	463b      	mov	r3, r7
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff46 	bl	8000278 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	463b      	mov	r3, r7
 80013f2:	4413      	add	r3, r2
 80013f4:	4a8d      	ldr	r2, [pc, #564]	@ (800162c <main+0x370>)
 80013f6:	8811      	ldrh	r1, [r2, #0]
 80013f8:	7892      	ldrb	r2, [r2, #2]
 80013fa:	8019      	strh	r1, [r3, #0]
 80013fc:	709a      	strb	r2, [r3, #2]
	    	  HAL_UART_Transmit(&huart5, (uint8_t*)snum, strlen(snum), 100);
 80013fe:	463b      	mov	r3, r7
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe ff39 	bl	8000278 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	4639      	mov	r1, r7
 800140c:	2364      	movs	r3, #100	@ 0x64
 800140e:	4888      	ldr	r0, [pc, #544]	@ (8001630 <main+0x374>)
 8001410:	f006 ffda 	bl	80083c8 <HAL_UART_Transmit>
	    	  humidity = MS8607_ReadHumidity(&hi2c2);
 8001414:	4882      	ldr	r0, [pc, #520]	@ (8001620 <main+0x364>)
 8001416:	f000 fdb5 	bl	8001f84 <MS8607_ReadHumidity>
 800141a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	    	  // Convert temperature to string for display
	    	  snprintf(snum, sizeof(snum), "%.2f%%", humidity);
 800141e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001420:	f7ff f896 	bl	8000550 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4638      	mov	r0, r7
 800142a:	e9cd 2300 	strd	r2, r3, [sp]
 800142e:	4a82      	ldr	r2, [pc, #520]	@ (8001638 <main+0x37c>)
 8001430:	210f      	movs	r1, #15
 8001432:	f008 faf5 	bl	8009a20 <sniprintf>
	    	  // Update the display
	    	  SSD1306_GotoXY(0, 40);
 8001436:	2128      	movs	r1, #40	@ 0x28
 8001438:	2000      	movs	r0, #0
 800143a:	f000 ff51 	bl	80022e0 <SSD1306_GotoXY>
	    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 800143e:	463b      	mov	r3, r7
 8001440:	2201      	movs	r2, #1
 8001442:	4979      	ldr	r1, [pc, #484]	@ (8001628 <main+0x36c>)
 8001444:	4618      	mov	r0, r3
 8001446:	f000 ffdf 	bl	8002408 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 800144a:	f000 fea3 	bl	8002194 <SSD1306_UpdateScreen>
	    	  strcat(snum, "\n\r");
 800144e:	463b      	mov	r3, r7
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff11 	bl	8000278 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	463b      	mov	r3, r7
 800145c:	4413      	add	r3, r2
 800145e:	4a73      	ldr	r2, [pc, #460]	@ (800162c <main+0x370>)
 8001460:	8811      	ldrh	r1, [r2, #0]
 8001462:	7892      	ldrb	r2, [r2, #2]
 8001464:	8019      	strh	r1, [r3, #0]
 8001466:	709a      	strb	r2, [r3, #2]
	    	  HAL_UART_Transmit(&huart5, (uint8_t*)snum, strlen(snum), 100);
 8001468:	463b      	mov	r3, r7
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ff04 	bl	8000278 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	4639      	mov	r1, r7
 8001476:	2364      	movs	r3, #100	@ 0x64
 8001478:	486d      	ldr	r0, [pc, #436]	@ (8001630 <main+0x374>)
 800147a:	f006 ffa5 	bl	80083c8 <HAL_UART_Transmit>
	    	  presence = DS18B20_start();
 800147e:	f7ff fe81 	bl	8001184 <DS18B20_start>
 8001482:	4603      	mov	r3, r0
 8001484:	4a6d      	ldr	r2, [pc, #436]	@ (800163c <main+0x380>)
 8001486:	6013      	str	r3, [r2, #0]
	    	  	  DS18B20_Write(0xCC); // skip ROM
 8001488:	20cc      	movs	r0, #204	@ 0xcc
 800148a:	f7ff fea9 	bl	80011e0 <DS18B20_Write>
	    	  	  DS18B20_Write(0x44); // convert temperature
 800148e:	2044      	movs	r0, #68	@ 0x44
 8001490:	f7ff fea6 	bl	80011e0 <DS18B20_Write>

	    	  	  presence = DS18B20_start();
 8001494:	f7ff fe76 	bl	8001184 <DS18B20_start>
 8001498:	4603      	mov	r3, r0
 800149a:	4a68      	ldr	r2, [pc, #416]	@ (800163c <main+0x380>)
 800149c:	6013      	str	r3, [r2, #0]
	    	  	  DS18B20_Write(0xCC); // skip ROM
 800149e:	20cc      	movs	r0, #204	@ 0xcc
 80014a0:	f7ff fe9e 	bl	80011e0 <DS18B20_Write>
	    	  	  DS18B20_Write(0xBE); // read scratchpad
 80014a4:	20be      	movs	r0, #190	@ 0xbe
 80014a6:	f7ff fe9b 	bl	80011e0 <DS18B20_Write>

	    	  	  Temp_LSB = DS18B20_Read();
 80014aa:	f7ff fecb 	bl	8001244 <DS18B20_Read>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <main+0x384>)
 80014b4:	701a      	strb	r2, [r3, #0]
	    	  	  Temp_MSB = DS18B20_Read();
 80014b6:	f7ff fec5 	bl	8001244 <DS18B20_Read>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b61      	ldr	r3, [pc, #388]	@ (8001644 <main+0x388>)
 80014c0:	701a      	strb	r2, [r3, #0]
	    	  	  Temp = (Temp_MSB<<8) | Temp_LSB;
 80014c2:	4b60      	ldr	r3, [pc, #384]	@ (8001644 <main+0x388>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001640 <main+0x384>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001648 <main+0x38c>)
 80014d6:	801a      	strh	r2, [r3, #0]
	    	  	  temp_DS18B20 = (float)Temp/16.0; // resolution is 0.0625
 80014d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <main+0x38c>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80014ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ee:	4b57      	ldr	r3, [pc, #348]	@ (800164c <main+0x390>)
 80014f0:	edc3 7a00 	vstr	s15, [r3]
	    	  	snprintf(snum, sizeof(snum), "%.2f C Ice", temp_DS18B20);
 80014f4:	4b55      	ldr	r3, [pc, #340]	@ (800164c <main+0x390>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f829 	bl	8000550 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4638      	mov	r0, r7
 8001504:	e9cd 2300 	strd	r2, r3, [sp]
 8001508:	4a51      	ldr	r2, [pc, #324]	@ (8001650 <main+0x394>)
 800150a:	210f      	movs	r1, #15
 800150c:	f008 fa88 	bl	8009a20 <sniprintf>

	    	  		    	  // Update the display
	    	  		    	  SSD1306_GotoXY(50, 40);
 8001510:	2128      	movs	r1, #40	@ 0x28
 8001512:	2032      	movs	r0, #50	@ 0x32
 8001514:	f000 fee4 	bl	80022e0 <SSD1306_GotoXY>
	    	  		    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4942      	ldr	r1, [pc, #264]	@ (8001628 <main+0x36c>)
 800151e:	4618      	mov	r0, r3
 8001520:	f000 ff72 	bl	8002408 <SSD1306_Puts>
	    	  		    	  SSD1306_UpdateScreen();
 8001524:	f000 fe36 	bl	8002194 <SSD1306_UpdateScreen>
	    	  		    	  strcat(snum, "\n\r");
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fea4 	bl	8000278 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	463b      	mov	r3, r7
 8001536:	4413      	add	r3, r2
 8001538:	4a3c      	ldr	r2, [pc, #240]	@ (800162c <main+0x370>)
 800153a:	8811      	ldrh	r1, [r2, #0]
 800153c:	7892      	ldrb	r2, [r2, #2]
 800153e:	8019      	strh	r1, [r3, #0]
 8001540:	709a      	strb	r2, [r3, #2]
	    	  		    	  HAL_UART_Transmit(&huart5, (uint8_t*)snum, strlen(snum), 100);
 8001542:	463b      	mov	r3, r7
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe97 	bl	8000278 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4639      	mov	r1, r7
 8001550:	2364      	movs	r3, #100	@ 0x64
 8001552:	4837      	ldr	r0, [pc, #220]	@ (8001630 <main+0x374>)
 8001554:	f006 ff38 	bl	80083c8 <HAL_UART_Transmit>
	    	  		    	HAL_Delay(1000);
 8001558:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800155c:	f001 fcba 	bl	8002ed4 <HAL_Delay>
	    	  		    	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001560:	2000      	movs	r0, #0
 8001562:	f000 fe45 	bl	80021f0 <SSD1306_Fill>
	    	  		    	float current = INA260_ReadCurrent();
 8001566:	f000 fb37 	bl	8001bd8 <INA260_ReadCurrent>
 800156a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	    	  		    	snprintf(snum, sizeof(snum), "%.2f A", current);
 800156e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001570:	f7fe ffee 	bl	8000550 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4638      	mov	r0, r7
 800157a:	e9cd 2300 	strd	r2, r3, [sp]
 800157e:	4a35      	ldr	r2, [pc, #212]	@ (8001654 <main+0x398>)
 8001580:	210f      	movs	r1, #15
 8001582:	f008 fa4d 	bl	8009a20 <sniprintf>
	    	  		    	SSD1306_GotoXY(0, 0);
 8001586:	2100      	movs	r1, #0
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fea9 	bl	80022e0 <SSD1306_GotoXY>
	    	  		    		    	  		    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 800158e:	463b      	mov	r3, r7
 8001590:	2201      	movs	r2, #1
 8001592:	4925      	ldr	r1, [pc, #148]	@ (8001628 <main+0x36c>)
 8001594:	4618      	mov	r0, r3
 8001596:	f000 ff37 	bl	8002408 <SSD1306_Puts>
	    	  		    		    	  		    	  SSD1306_UpdateScreen();
 800159a:	f000 fdfb 	bl	8002194 <SSD1306_UpdateScreen>
	    	  		    	        float voltage = INA260_ReadVoltage();
 800159e:	f000 fb3f 	bl	8001c20 <INA260_ReadVoltage>
 80015a2:	ed87 0a08 	vstr	s0, [r7, #32]
	    	  		    	      snprintf(snum, sizeof(snum), "%.2f V", voltage);
 80015a6:	6a38      	ldr	r0, [r7, #32]
 80015a8:	f7fe ffd2 	bl	8000550 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4638      	mov	r0, r7
 80015b2:	e9cd 2300 	strd	r2, r3, [sp]
 80015b6:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <main+0x39c>)
 80015b8:	210f      	movs	r1, #15
 80015ba:	f008 fa31 	bl	8009a20 <sniprintf>
	    	  		    	      SSD1306_GotoXY(0, 20);
 80015be:	2114      	movs	r1, #20
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 fe8d 	bl	80022e0 <SSD1306_GotoXY>
	    	  		    	      	    	  		    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 80015c6:	463b      	mov	r3, r7
 80015c8:	2201      	movs	r2, #1
 80015ca:	4917      	ldr	r1, [pc, #92]	@ (8001628 <main+0x36c>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 ff1b 	bl	8002408 <SSD1306_Puts>
	    	  		    	      	    	  		    	  SSD1306_UpdateScreen();
 80015d2:	f000 fddf 	bl	8002194 <SSD1306_UpdateScreen>
	    	  		    	        float power = INA260_ReadPower();
 80015d6:	f000 fb47 	bl	8001c68 <INA260_ReadPower>
 80015da:	ed87 0a07 	vstr	s0, [r7, #28]
	    	  		    	      snprintf(snum, sizeof(snum), "%.2f W", power);
 80015de:	69f8      	ldr	r0, [r7, #28]
 80015e0:	f7fe ffb6 	bl	8000550 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4638      	mov	r0, r7
 80015ea:	e9cd 2300 	strd	r2, r3, [sp]
 80015ee:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <main+0x3a0>)
 80015f0:	210f      	movs	r1, #15
 80015f2:	f008 fa15 	bl	8009a20 <sniprintf>
	    	  		    	      SSD1306_GotoXY(0, 40);
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fe71 	bl	80022e0 <SSD1306_GotoXY>
	    	  		    	      	    	  		    	  SSD1306_Puts(snum, &Font_7x10, SSD1306_COLOR_WHITE);
 80015fe:	463b      	mov	r3, r7
 8001600:	2201      	movs	r2, #1
 8001602:	4909      	ldr	r1, [pc, #36]	@ (8001628 <main+0x36c>)
 8001604:	4618      	mov	r0, r3
 8001606:	f000 feff 	bl	8002408 <SSD1306_Puts>
	    	  		    	      	    	  		    	  SSD1306_UpdateScreen();
 800160a:	f000 fdc3 	bl	8002194 <SSD1306_UpdateScreen>
	    	  HAL_Delay(1000); // Update every second
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f001 fc5f 	bl	8002ed4 <HAL_Delay>
    {
 8001616:	bf00      	nop
 8001618:	e022      	b.n	8001660 <main+0x3a4>
 800161a:	bf00      	nop
 800161c:	0800bd34 	.word	0x0800bd34
 8001620:	2000024c 	.word	0x2000024c
 8001624:	0800bcf0 	.word	0x0800bcf0
 8001628:	20000000 	.word	0x20000000
 800162c:	0800bcf8 	.word	0x0800bcf8
 8001630:	20000388 	.word	0x20000388
 8001634:	0800bcfc 	.word	0x0800bcfc
 8001638:	0800bd08 	.word	0x0800bd08
 800163c:	200004b0 	.word	0x200004b0
 8001640:	200004bc 	.word	0x200004bc
 8001644:	200004bd 	.word	0x200004bd
 8001648:	200004be 	.word	0x200004be
 800164c:	200004c0 	.word	0x200004c0
 8001650:	0800bd10 	.word	0x0800bd10
 8001654:	0800bd1c 	.word	0x0800bd1c
 8001658:	0800bd24 	.word	0x0800bd24
 800165c:	0800bd2c 	.word	0x0800bd2c
 8001660:	e657      	b.n	8001312 <main+0x56>
 8001662:	bf00      	nop

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09e      	sub	sp, #120	@ 0x78
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2260      	movs	r2, #96	@ 0x60
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fa4b 	bl	8009b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001688:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800168c:	f002 feae 	bl	80043ec <HAL_PWREx_ControlVoltageScaling>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001696:	f000 fb0b 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800169a:	2310      	movs	r3, #16
 800169c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800169e:	2301      	movs	r3, #1
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016a2:	2310      	movs	r3, #16
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80016b8:	2303      	movs	r3, #3
 80016ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016bc:	230a      	movs	r3, #10
 80016be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80016cc:	230c      	movs	r3, #12
 80016ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff63 	bl	80045a4 <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016e4:	f000 fae4 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	231f      	movs	r3, #31
 80016ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2303      	movs	r3, #3
 80016ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	2104      	movs	r1, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fe29 	bl	800535c <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001710:	f000 face 	bl	8001cb0 <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	3778      	adds	r7, #120	@ 0x78
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001720:	2002      	movs	r0, #2
 8001722:	f002 feef 	bl	8004504 <HAL_PWREx_ConfigSupply>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800172c:	f000 fac0 	bl	8001cb0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_I2C1_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <MX_I2C1_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <MX_I2C1_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_I2C1_Init+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176e:	480e      	ldr	r0, [pc, #56]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001770:	f001 ff5c 	bl	800362c <HAL_I2C_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800177a:	f000 fa99 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001782:	f002 fd6b 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800178c:	f000 fa90 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_I2C1_Init+0x74>)
 8001794:	f002 fdad 	bl	80042f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179e:	f000 fa87 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001f8 	.word	0x200001f8
 80017ac:	40005400 	.word	0x40005400
 80017b0:	00f07bff 	.word	0x00f07bff

080017b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <MX_I2C2_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <MX_I2C2_Init+0x7c>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ee:	480e      	ldr	r0, [pc, #56]	@ (8001828 <MX_I2C2_Init+0x74>)
 80017f0:	f001 ff1c 	bl	800362c <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017fa:	f000 fa59 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4809      	ldr	r0, [pc, #36]	@ (8001828 <MX_I2C2_Init+0x74>)
 8001802:	f002 fd2b 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800180c:	f000 fa50 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_I2C2_Init+0x74>)
 8001814:	f002 fd6d 	bl	80042f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800181e:	f000 fa47 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000024c 	.word	0x2000024c
 800182c:	40005800 	.word	0x40005800
 8001830:	00f07bff 	.word	0x00f07bff

08001834 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_I2C3_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <MX_I2C3_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <MX_I2C3_Init+0x7c>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_I2C3_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <MX_I2C3_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_I2C3_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001870:	f001 fedc 	bl	800362c <HAL_I2C_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800187a:	f000 fa19 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001882:	f002 fceb 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 fa10 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_I2C3_Init+0x74>)
 8001894:	f002 fd2d 	bl	80042f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 fa07 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a0 	.word	0x200002a0
 80018ac:	46002800 	.word	0x46002800
 80018b0:	30909dec 	.word	0x30909dec

080018b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80018b8:	2000      	movs	r0, #0
 80018ba:	f002 fd67 	bl	800438c <HAL_ICACHE_ConfigAssociativityMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80018c4:	f000 f9f4 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80018c8:	f002 fd80 	bl	80043cc <HAL_ICACHE_Enable>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80018d2:	f000 f9ed 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(int baud)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART4_Init 0 */
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */
  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <MX_UART4_Init+0x98>)
 80018e6:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <MX_UART4_Init+0x9c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = baud;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <MX_UART4_Init+0x98>)
 80018ee:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <MX_UART4_Init+0x98>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_UART4_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_UART4_Init+0x98>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_UART4_Init+0x98>)
 8001904:	220c      	movs	r2, #12
 8001906:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_UART4_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_UART4_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_UART4_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_UART4_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_UART4_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8001926:	4813      	ldr	r0, [pc, #76]	@ (8001974 <MX_UART4_Init+0x98>)
 8001928:	f006 fcf6 	bl	8008318 <HAL_HalfDuplex_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8001932:	f000 f9bd 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	480e      	ldr	r0, [pc, #56]	@ (8001974 <MX_UART4_Init+0x98>)
 800193a:	f007 fa8b 	bl	8008e54 <HAL_UARTEx_SetTxFifoThreshold>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8001944:	f000 f9b4 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	480a      	ldr	r0, [pc, #40]	@ (8001974 <MX_UART4_Init+0x98>)
 800194c:	f007 fac0 	bl	8008ed0 <HAL_UARTEx_SetRxFifoThreshold>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001956:	f000 f9ab 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <MX_UART4_Init+0x98>)
 800195c:	f007 fa41 	bl	8008de2 <HAL_UARTEx_DisableFifoMode>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8001966:	f000 f9a3 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  /* USER CODE END UART4_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002f4 	.word	0x200002f4
 8001978:	40004c00 	.word	0x40004c00

0800197c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <MX_UART5_Init+0x90>)
 8001982:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <MX_UART5_Init+0x94>)
 8001984:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <MX_UART5_Init+0x90>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_UART5_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <MX_UART5_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <MX_UART5_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019c4:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019c6:	f006 fc57 	bl	8008278 <HAL_UART_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80019d0:	f000 f96e 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d4:	2100      	movs	r1, #0
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019d8:	f007 fa3c 	bl	8008e54 <HAL_UARTEx_SetTxFifoThreshold>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80019e2:	f000 f965 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019ea:	f007 fa71 	bl	8008ed0 <HAL_UARTEx_SetRxFifoThreshold>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80019f4:	f000 f95c 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_UART5_Init+0x90>)
 80019fa:	f007 f9f2 	bl	8008de2 <HAL_UARTEx_DisableFifoMode>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001a04:	f000 f954 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000388 	.word	0x20000388
 8001a10:	40005000 	.word	0x40005000

08001a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <MX_USART3_UART_Init+0x94>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001a5c:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a5e:	f006 fc5b 	bl	8008318 <HAL_HalfDuplex_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a68:	f000 f922 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a70:	f007 f9f0 	bl	8008e54 <HAL_UARTEx_SetTxFifoThreshold>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a7a:	f000 f919 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a82:	f007 fa25 	bl	8008ed0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f000 f910 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a92:	f007 f9a6 	bl	8008de2 <HAL_UARTEx_DisableFifoMode>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 f908 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000041c 	.word	0x2000041c
 8001aa8:	40004800 	.word	0x40004800

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab2:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab8:	4a26      	ldr	r2, [pc, #152]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b12:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b30:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_GPIO_Init+0xa8>)
 8001b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	46020c00 	.word	0x46020c00

08001b58 <INA260_Init>:

/* USER CODE BEGIN 4 */
void INA260_Init() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af02      	add	r7, sp, #8
    // INA260 uses default configuration; no initialization required.
	 uint8_t config_data[] = {0x00, 0x00};  // Example configuration
 8001b5e:	2300      	movs	r3, #0
 8001b60:	80bb      	strh	r3, [r7, #4]
	    HAL_I2C_Master_Transmit(&hi2c3, INA260_I2C_ADDRESS << 1, config_data, sizeof(config_data), HAL_MAX_DELAY);
 8001b62:	1d3a      	adds	r2, r7, #4
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b70:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <INA260_Init+0x28>)
 8001b72:	f001 fdf7 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002a0 	.word	0x200002a0

08001b84 <INA260_ReadRegister>:

// Read raw data from a register
uint16_t INA260_ReadRegister(uint8_t reg) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0};
 8001b8e:	2300      	movs	r3, #0
 8001b90:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c3, INA260_I2C_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8001b92:	1dfa      	adds	r2, r7, #7
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <INA260_ReadRegister+0x4c>)
 8001ba0:	f001 fde0 	bl	8003764 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, INA260_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001ba4:	f107 020c 	add.w	r2, r7, #12
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <INA260_ReadRegister+0x4c>)
 8001bb4:	f001 feca 	bl	800394c <HAL_I2C_Master_Receive>

    return (data[0] << 8) | data[1];
 8001bb8:	7b3b      	ldrb	r3, [r7, #12]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	b29b      	uxth	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002a0 	.word	0x200002a0
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <INA260_ReadCurrent>:

// Convert current register value to amperes
float INA260_ReadCurrent() {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
    int16_t raw_current = (int16_t)INA260_ReadRegister(REG_CURRENT);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff ffd0 	bl	8001b84 <INA260_ReadRegister>
 8001be4:	4603      	mov	r3, r0
 8001be6:	80fb      	strh	r3, [r7, #6]
    return raw_current * 0.00125;  // Conversion factor: 1.25 mA/bit
 8001be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc9d 	bl	800052c <__aeabi_i2d>
 8001bf2:	a309      	add	r3, pc, #36	@ (adr r3, 8001c18 <INA260_ReadCurrent+0x40>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fd02 	bl	8000600 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffd4 	bl	8000bb0 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	ee07 3a90 	vmov	s15, r3
}
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	47ae147b 	.word	0x47ae147b
 8001c1c:	3f547ae1 	.word	0x3f547ae1

08001c20 <INA260_ReadVoltage>:

// Convert voltage register value to volts
float INA260_ReadVoltage() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
    uint16_t raw_voltage = INA260_ReadRegister(REG_BUS_VOLTAGE);
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff ffac 	bl	8001b84 <INA260_ReadRegister>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	80fb      	strh	r3, [r7, #6]
    return raw_voltage * 0.00125;  // Conversion factor: 1.25 mV/bit
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc7a 	bl	800052c <__aeabi_i2d>
 8001c38:	a309      	add	r3, pc, #36	@ (adr r3, 8001c60 <INA260_ReadVoltage+0x40>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcdf 	bl	8000600 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ffb1 	bl	8000bb0 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	ee07 3a90 	vmov	s15, r3
}
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	47ae147b 	.word	0x47ae147b
 8001c64:	3f547ae1 	.word	0x3f547ae1

08001c68 <INA260_ReadPower>:

// Convert power register value to watts
float INA260_ReadPower() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
    uint16_t raw_power = INA260_ReadRegister(REG_POWER);
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f7ff ff88 	bl	8001b84 <INA260_ReadRegister>
 8001c74:	4603      	mov	r3, r0
 8001c76:	80fb      	strh	r3, [r7, #6]
    return raw_power * 0.01;  // Conversion factor: 10 mW/bit
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc56 	bl	800052c <__aeabi_i2d>
 8001c80:	a309      	add	r3, pc, #36	@ (adr r3, 8001ca8 <INA260_ReadPower+0x40>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fcbb 	bl	8000600 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff8d 	bl	8000bb0 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	ee07 3a90 	vmov	s15, r3
}
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	47ae147b 	.word	0x47ae147b
 8001cac:	3f847ae1 	.word	0x3f847ae1

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <MS8607_ReadPROM>:
/**
 * @brief Read the PROM data from the MS8607.
 * @param hi2c Pointer to the I2C handle.
 * @param prom Array to store the PROM values (6 values).
 */
void MS8607_ReadPROM(I2C_HandleTypeDef *hi2c, uint16_t *prom) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 6; i++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e02c      	b.n	8001d26 <MS8607_ReadPROM+0x6a>
        uint8_t cmd = MS8607_PROM_READ_BASE + (i * 2);
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	3350      	adds	r3, #80	@ 0x50
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	73bb      	strb	r3, [r7, #14]
        uint8_t data[2];
        HAL_I2C_Master_Transmit(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, &cmd, 1, HAL_MAX_DELAY);
 8001cd8:	f107 020e 	add.w	r2, r7, #14
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	21ec      	movs	r1, #236	@ 0xec
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f001 fd3c 	bl	8003764 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f001 f8f1 	bl	8002ed4 <HAL_Delay>
        HAL_I2C_Master_Receive(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, data, 2, HAL_MAX_DELAY);
 8001cf2:	f107 020c 	add.w	r2, r7, #12
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	21ec      	movs	r1, #236	@ 0xec
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 fe23 	bl	800394c <HAL_I2C_Master_Receive>
        prom[i] = (data[0] << 8) | data[1]; // Combine two bytes into a 16-bit value
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b219      	sxth	r1, r3
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b28a      	uxth	r2, r1
 8001d1e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 6; i++) {
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	3301      	adds	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d9cf      	bls.n	8001ccc <MS8607_ReadPROM+0x10>
    }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <MS8607_ReadADC>:
/**
 * @brief Read the raw ADC value from the MS8607.
 * @param hi2c Pointer to the I2C handle.
 * @return The raw ADC value.
 */
uint32_t MS8607_ReadADC(I2C_HandleTypeDef *hi2c) {
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	6078      	str	r0, [r7, #4]
    uint8_t cmd = MS8607_READ_ADC;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
    uint8_t data[3];

    HAL_I2C_Master_Transmit(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, &cmd, 1, HAL_MAX_DELAY);
 8001d42:	f107 020f 	add.w	r2, r7, #15
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	21ec      	movs	r1, #236	@ 0xec
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fd07 	bl	8003764 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Wait for conversion
 8001d56:	200a      	movs	r0, #10
 8001d58:	f001 f8bc 	bl	8002ed4 <HAL_Delay>
    HAL_I2C_Master_Receive(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, data, 3, HAL_MAX_DELAY);
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2303      	movs	r3, #3
 8001d68:	21ec      	movs	r1, #236	@ 0xec
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f001 fdee 	bl	800394c <HAL_I2C_Master_Receive>

    return ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2]; // Combine the 3 bytes into a 24-bit value
 8001d70:	7b3b      	ldrb	r3, [r7, #12]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	7bba      	ldrb	r2, [r7, #14]
 8001d7c:	4313      	orrs	r3, r2
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <MS8607_ReadTemperature>:
 * @brief Read temperature from the MS8607.
 * @param hi2c Pointer to the I2C handle.
 * @param prom Array containing the calibration data.
 * @return The temperature in degrees Celsius.
 */
float MS8607_ReadTemperature(I2C_HandleTypeDef *hi2c, uint16_t *prom) {
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b092      	sub	sp, #72	@ 0x48
 8001d8e:	af02      	add	r7, sp, #8
 8001d90:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d92:	6239      	str	r1, [r7, #32]
    uint8_t cmd = MS8607_CONVERT_D2_COMMAND;
 8001d94:	2350      	movs	r3, #80	@ 0x50
 8001d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    HAL_I2C_Master_Transmit(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, &cmd, 1, HAL_MAX_DELAY);
 8001d9a:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	21ec      	movs	r1, #236	@ 0xec
 8001da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001daa:	f001 fcdb 	bl	8003764 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Wait for conversion
 8001dae:	200a      	movs	r0, #10
 8001db0:	f001 f890 	bl	8002ed4 <HAL_Delay>

    // Read the ADC value
    uint32_t rawTemp = MS8607_ReadADC(hi2c);
 8001db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db6:	f7ff ffbe 	bl	8001d36 <MS8607_ReadADC>
 8001dba:	6378      	str	r0, [r7, #52]	@ 0x34
    // Calculate temperature using calibration data
    uint32_t dT = rawTemp - ((int32_t)prom[4] << 8); // dT = D2 - T_ref * 2 ^ 8
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	021a      	lsls	r2, r3, #8
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
    uint64_t temperature = 2000 + (dT * prom[5] / (1 << 23)); // Temp = 2000 + dT * TEMPSENS / 2^23
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	330a      	adds	r3, #10
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	0ddb      	lsrs	r3, r3, #23
 8001dda:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001dde:	2200      	movs	r2, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	60fa      	str	r2, [r7, #12]
 8001de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    if (temperature < 2000) {
 8001dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001df0:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8001df4:	f173 0300 	sbcs.w	r3, r3, #0
 8001df8:	d226      	bcs.n	8001e48 <MS8607_ReadTemperature+0xc0>
            temperature -= (3 * dT * dT) / (1LL << 33);
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfc:	fb03 f203 	mul.w	r2, r3, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da06      	bge.n	8001e22 <MS8607_ReadTemperature+0x9a>
 8001e14:	1e51      	subs	r1, r2, #1
 8001e16:	6039      	str	r1, [r7, #0]
 8001e18:	f143 0301 	adc.w	r3, r3, #1
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	1058      	asrs	r0, r3, #1
 8001e2c:	17d9      	asrs	r1, r3, #31
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e3a:	ebb2 0800 	subs.w	r8, r2, r0
 8001e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e42:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 8001e46:	e023      	b.n	8001e90 <MS8607_ReadTemperature+0x108>
        } else {
            temperature -= (5 * dT * dT) / (1LL << 38);
 8001e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4a:	fb03 f203 	mul.w	r2, r3, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	617a      	str	r2, [r7, #20]
 8001e5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da05      	bge.n	8001e6e <MS8607_ReadTemperature+0xe6>
 8001e62:	f112 3aff 	adds.w	sl, r2, #4294967295
 8001e66:	f143 0b3f 	adc.w	fp, r3, #63	@ 0x3f
 8001e6a:	4652      	mov	r2, sl
 8001e6c:	465b      	mov	r3, fp
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	1198      	asrs	r0, r3, #6
 8001e78:	17d9      	asrs	r1, r3, #31
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e86:	1a14      	subs	r4, r2, r0
 8001e88:	eb63 0501 	sbc.w	r5, r3, r1
 8001e8c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
        }
    return (float)temperature/100.00; // Return temperature in Celsius
 8001e90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e94:	f7fe ffa4 	bl	8000de0 <__aeabi_ul2f>
 8001e98:	ee06 0a90 	vmov	s13, r0
 8001e9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001eb4 <MS8607_ReadTemperature+0x12c>
 8001ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea4:	eef0 7a47 	vmov.f32	s15, s14
}
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	3740      	adds	r7, #64	@ 0x40
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb4:	42c80000 	.word	0x42c80000

08001eb8 <MS8607_ReadPressure>:
/**
 * @brief Read pressure from the MS8607.
 * @param hi2c Pointer to the I2C handle.
 * @return The pressure in hPa.
 */
float MS8607_ReadPressure(I2C_HandleTypeDef *hi2c, uint16_t *prom, float temperature) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	@ 0x38
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t cmd = MS8607_CONVERT_D1_COMMAND;
 8001ec6:	2340      	movs	r3, #64	@ 0x40
 8001ec8:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(hi2c, MS8607_I2C_ADDRESS_PRESSURE << 1, &cmd, 1, HAL_MAX_DELAY);
 8001eca:	f107 0217 	add.w	r2, r7, #23
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	21ec      	movs	r1, #236	@ 0xec
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f001 fc43 	bl	8003764 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Wait for conversion
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f000 fff8 	bl	8002ed4 <HAL_Delay>

    // Read the ADC value
    uint32_t rawPress = MS8607_ReadADC(hi2c);
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff ff26 	bl	8001d36 <MS8607_ReadADC>
 8001eea:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint32_t rawTemp = MS8607_ReadADC(hi2c)+2;
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff ff22 	bl	8001d36 <MS8607_ReadADC>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Calculate pressure using calibration data
    int32_t dT = rawTemp - (prom[4] << 8); // dT = D1 - T_ref
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3308      	adds	r3, #8
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t off = (prom[1] << 17) + ((prom[3] * dT) / (1 << 6));
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3302      	adds	r3, #2
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	045a      	lsls	r2, r3, #17
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3306      	adds	r3, #6
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da00      	bge.n	8001f22 <MS8607_ReadPressure+0x6a>
 8001f20:	333f      	adds	r3, #63	@ 0x3f
 8001f22:	119b      	asrs	r3, r3, #6
 8001f24:	4413      	add	r3, r2
 8001f26:	623b      	str	r3, [r7, #32]
    int32_t sens = (prom[0] << 16) + ((prom[2] * dT) / (1 << 7));
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3304      	adds	r3, #4
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da00      	bge.n	8001f42 <MS8607_ReadPressure+0x8a>
 8001f40:	337f      	adds	r3, #127	@ 0x7f
 8001f42:	11db      	asrs	r3, r3, #7
 8001f44:	4413      	add	r3, r2
 8001f46:	61fb      	str	r3, [r7, #28]

    float pressure = ((rawPress * sens) / (1 << 21) - off) / (1 << 15);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	0d5a      	lsrs	r2, r3, #21
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	0bdb      	lsrs	r3, r3, #15
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f60:	edc7 7a06 	vstr	s15, [r7, #24]
    return pressure/100.0; // Return pressure in hPa
 8001f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f68:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001f80 <MS8607_ReadPressure+0xc8>
 8001f6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f70:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	42c80000 	.word	0x42c80000

08001f84 <MS8607_ReadHumidity>:
/**
 * @brief Read humidity from the MS8607.
 * @param hi2c Pointer to the I2C handle.
 * @return The humidity in percentage.
 */
float MS8607_ReadHumidity(I2C_HandleTypeDef *hi2c) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	6078      	str	r0, [r7, #4]
    uint8_t cmd = MS8607_HUMIDITY_MEASURE_HOLD;
 8001f8c:	23e5      	movs	r3, #229	@ 0xe5
 8001f8e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(hi2c, MS8607_I2C_ADDRESS_HUMIDITY << 1, &cmd, 1, HAL_MAX_DELAY);
 8001f90:	f107 020f 	add.w	r2, r7, #15
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f001 fbe0 	bl	8003764 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Wait for conversion
 8001fa4:	200a      	movs	r0, #10
 8001fa6:	f000 ff95 	bl	8002ed4 <HAL_Delay>
    HAL_I2C_Master_Receive(hi2c, MS8607_I2C_ADDRESS_HUMIDITY << 1, data, 2, HAL_MAX_DELAY);
 8001faa:	f107 020c 	add.w	r2, r7, #12
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f001 fcc7 	bl	800394c <HAL_I2C_Master_Receive>

    // Combine the two bytes into a 16-bit value and convert to percentage
    uint16_t rawHumidity = (data[0] << 8) | data[1];
 8001fbe:	7b3b      	ldrb	r3, [r7, #12]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	7b7b      	ldrb	r3, [r7, #13]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	82fb      	strh	r3, [r7, #22]

    // Calculate humidity using calibration data
    float humidity = -6 + 125 * (float)rawHumidity/(1<<16); // Convert to percentage
 8001fce:	8afb      	ldrh	r3, [r7, #22]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002004 <MS8607_ReadHumidity+0x80>
 8001fdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe0:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002008 <MS8607_ReadHumidity+0x84>
 8001fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff0:	edc7 7a04 	vstr	s15, [r7, #16]
    return humidity; // Return humidity in percentage
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	ee07 3a90 	vmov	s15, r3
}
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	42fa0000 	.word	0x42fa0000
 8002008:	47800000 	.word	0x47800000

0800200c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002012:	f000 fa1f 	bl	8002454 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002016:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800201a:	2201      	movs	r2, #1
 800201c:	2178      	movs	r1, #120	@ 0x78
 800201e:	485b      	ldr	r0, [pc, #364]	@ (800218c <SSD1306_Init+0x180>)
 8002020:	f001 fd8a 	bl	8003b38 <HAL_I2C_IsDeviceReady>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800202a:	2300      	movs	r3, #0
 800202c:	e0a9      	b.n	8002182 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800202e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002032:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002034:	e002      	b.n	800203c <SSD1306_Init+0x30>
		p--;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3b01      	subs	r3, #1
 800203a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002042:	22ae      	movs	r2, #174	@ 0xae
 8002044:	2100      	movs	r1, #0
 8002046:	2078      	movs	r0, #120	@ 0x78
 8002048:	f000 fa80 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800204c:	2220      	movs	r2, #32
 800204e:	2100      	movs	r1, #0
 8002050:	2078      	movs	r0, #120	@ 0x78
 8002052:	f000 fa7b 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002056:	2210      	movs	r2, #16
 8002058:	2100      	movs	r1, #0
 800205a:	2078      	movs	r0, #120	@ 0x78
 800205c:	f000 fa76 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002060:	22b0      	movs	r2, #176	@ 0xb0
 8002062:	2100      	movs	r1, #0
 8002064:	2078      	movs	r0, #120	@ 0x78
 8002066:	f000 fa71 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800206a:	22c8      	movs	r2, #200	@ 0xc8
 800206c:	2100      	movs	r1, #0
 800206e:	2078      	movs	r0, #120	@ 0x78
 8002070:	f000 fa6c 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	2078      	movs	r0, #120	@ 0x78
 800207a:	f000 fa67 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800207e:	2210      	movs	r2, #16
 8002080:	2100      	movs	r1, #0
 8002082:	2078      	movs	r0, #120	@ 0x78
 8002084:	f000 fa62 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002088:	2240      	movs	r2, #64	@ 0x40
 800208a:	2100      	movs	r1, #0
 800208c:	2078      	movs	r0, #120	@ 0x78
 800208e:	f000 fa5d 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002092:	2281      	movs	r2, #129	@ 0x81
 8002094:	2100      	movs	r1, #0
 8002096:	2078      	movs	r0, #120	@ 0x78
 8002098:	f000 fa58 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800209c:	22ff      	movs	r2, #255	@ 0xff
 800209e:	2100      	movs	r1, #0
 80020a0:	2078      	movs	r0, #120	@ 0x78
 80020a2:	f000 fa53 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020a6:	22a1      	movs	r2, #161	@ 0xa1
 80020a8:	2100      	movs	r1, #0
 80020aa:	2078      	movs	r0, #120	@ 0x78
 80020ac:	f000 fa4e 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020b0:	22a6      	movs	r2, #166	@ 0xa6
 80020b2:	2100      	movs	r1, #0
 80020b4:	2078      	movs	r0, #120	@ 0x78
 80020b6:	f000 fa49 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80020ba:	22a8      	movs	r2, #168	@ 0xa8
 80020bc:	2100      	movs	r1, #0
 80020be:	2078      	movs	r0, #120	@ 0x78
 80020c0:	f000 fa44 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	2100      	movs	r1, #0
 80020c8:	2078      	movs	r0, #120	@ 0x78
 80020ca:	f000 fa3f 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020ce:	22a4      	movs	r2, #164	@ 0xa4
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	@ 0x78
 80020d4:	f000 fa3a 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80020d8:	22d3      	movs	r2, #211	@ 0xd3
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	@ 0x78
 80020de:	f000 fa35 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	@ 0x78
 80020e8:	f000 fa30 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020ec:	22d5      	movs	r2, #213	@ 0xd5
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	@ 0x78
 80020f2:	f000 fa2b 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020f6:	22f0      	movs	r2, #240	@ 0xf0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	@ 0x78
 80020fc:	f000 fa26 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002100:	22d9      	movs	r2, #217	@ 0xd9
 8002102:	2100      	movs	r1, #0
 8002104:	2078      	movs	r0, #120	@ 0x78
 8002106:	f000 fa21 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800210a:	2222      	movs	r2, #34	@ 0x22
 800210c:	2100      	movs	r1, #0
 800210e:	2078      	movs	r0, #120	@ 0x78
 8002110:	f000 fa1c 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002114:	22da      	movs	r2, #218	@ 0xda
 8002116:	2100      	movs	r1, #0
 8002118:	2078      	movs	r0, #120	@ 0x78
 800211a:	f000 fa17 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800211e:	2212      	movs	r2, #18
 8002120:	2100      	movs	r1, #0
 8002122:	2078      	movs	r0, #120	@ 0x78
 8002124:	f000 fa12 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002128:	22db      	movs	r2, #219	@ 0xdb
 800212a:	2100      	movs	r1, #0
 800212c:	2078      	movs	r0, #120	@ 0x78
 800212e:	f000 fa0d 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002132:	2220      	movs	r2, #32
 8002134:	2100      	movs	r1, #0
 8002136:	2078      	movs	r0, #120	@ 0x78
 8002138:	f000 fa08 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800213c:	228d      	movs	r2, #141	@ 0x8d
 800213e:	2100      	movs	r1, #0
 8002140:	2078      	movs	r0, #120	@ 0x78
 8002142:	f000 fa03 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002146:	2214      	movs	r2, #20
 8002148:	2100      	movs	r1, #0
 800214a:	2078      	movs	r0, #120	@ 0x78
 800214c:	f000 f9fe 	bl	800254c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002150:	22af      	movs	r2, #175	@ 0xaf
 8002152:	2100      	movs	r1, #0
 8002154:	2078      	movs	r0, #120	@ 0x78
 8002156:	f000 f9f9 	bl	800254c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800215a:	222e      	movs	r2, #46	@ 0x2e
 800215c:	2100      	movs	r1, #0
 800215e:	2078      	movs	r0, #120	@ 0x78
 8002160:	f000 f9f4 	bl	800254c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f843 	bl	80021f0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800216a:	f000 f813 	bl	8002194 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <SSD1306_Init+0x184>)
 8002170:	2200      	movs	r2, #0
 8002172:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <SSD1306_Init+0x184>)
 8002176:	2200      	movs	r2, #0
 8002178:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SSD1306_Init+0x184>)
 800217c:	2201      	movs	r2, #1
 800217e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200001f8 	.word	0x200001f8
 8002190:	200008c4 	.word	0x200008c4

08002194 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800219a:	2300      	movs	r3, #0
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	e01d      	b.n	80021dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	3b50      	subs	r3, #80	@ 0x50
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	2078      	movs	r0, #120	@ 0x78
 80021ac:	f000 f9ce 	bl	800254c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2078      	movs	r0, #120	@ 0x78
 80021b6:	f000 f9c9 	bl	800254c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80021ba:	2210      	movs	r2, #16
 80021bc:	2100      	movs	r1, #0
 80021be:	2078      	movs	r0, #120	@ 0x78
 80021c0:	f000 f9c4 	bl	800254c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <SSD1306_UpdateScreen+0x58>)
 80021ca:	441a      	add	r2, r3
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	2140      	movs	r1, #64	@ 0x40
 80021d0:	2078      	movs	r0, #120	@ 0x78
 80021d2:	f000 f955 	bl	8002480 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3301      	adds	r3, #1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	2b07      	cmp	r3, #7
 80021e0:	d9de      	bls.n	80021a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200004c4 	.word	0x200004c4

080021f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <SSD1306_Fill+0x14>
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <SSD1306_Fill+0x16>
 8002204:	23ff      	movs	r3, #255	@ 0xff
 8002206:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220a:	4619      	mov	r1, r3
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <SSD1306_Fill+0x2c>)
 800220e:	f007 fc7e 	bl	8009b0e <memset>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200004c4 	.word	0x200004c4

08002220 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
 800222a:	460b      	mov	r3, r1
 800222c:	80bb      	strh	r3, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	70fb      	strb	r3, [r7, #3]
	if (
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	2b7f      	cmp	r3, #127	@ 0x7f
 8002236:	d848      	bhi.n	80022ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	2b3f      	cmp	r3, #63	@ 0x3f
 800223c:	d845      	bhi.n	80022ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <SSD1306_DrawPixel+0xb8>)
 8002240:	791b      	ldrb	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d11a      	bne.n	8002290 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	88bb      	ldrh	r3, [r7, #4]
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b298      	uxth	r0, r3
 8002262:	4603      	mov	r3, r0
 8002264:	01db      	lsls	r3, r3, #7
 8002266:	4413      	add	r3, r2
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <SSD1306_DrawPixel+0xbc>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	88bb      	ldrh	r3, [r7, #4]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	b25b      	sxtb	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b259      	sxtb	r1, r3
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	4603      	mov	r3, r0
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	4413      	add	r3, r2
 8002288:	b2c9      	uxtb	r1, r1
 800228a:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <SSD1306_DrawPixel+0xbc>)
 800228c:	54d1      	strb	r1, [r2, r3]
 800228e:	e01d      	b.n	80022cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	88bb      	ldrh	r3, [r7, #4]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	b298      	uxth	r0, r3
 8002298:	4603      	mov	r3, r0
 800229a:	01db      	lsls	r3, r3, #7
 800229c:	4413      	add	r3, r2
 800229e:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <SSD1306_DrawPixel+0xbc>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	4013      	ands	r3, r2
 80022b8:	b259      	sxtb	r1, r3
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	4603      	mov	r3, r0
 80022be:	01db      	lsls	r3, r3, #7
 80022c0:	4413      	add	r3, r2
 80022c2:	b2c9      	uxtb	r1, r1
 80022c4:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <SSD1306_DrawPixel+0xbc>)
 80022c6:	54d1      	strb	r1, [r2, r3]
 80022c8:	e000      	b.n	80022cc <SSD1306_DrawPixel+0xac>
		return;
 80022ca:	bf00      	nop
	}
}
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200008c4 	.word	0x200008c4
 80022dc:	200004c4 	.word	0x200004c4

080022e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	460a      	mov	r2, r1
 80022ea:	80fb      	strh	r3, [r7, #6]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SSD1306_GotoXY+0x28>)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <SSD1306_GotoXY+0x28>)
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	8053      	strh	r3, [r2, #2]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	200008c4 	.word	0x200008c4

0800230c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <SSD1306_Putc+0xf8>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
	if (
 8002328:	2b7f      	cmp	r3, #127	@ 0x7f
 800232a:	dc07      	bgt.n	800233c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <SSD1306_Putc+0xf8>)
 800232e:	885b      	ldrh	r3, [r3, #2]
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002338:	2b3f      	cmp	r3, #63	@ 0x3f
 800233a:	dd01      	ble.n	8002340 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800233c:	2300      	movs	r3, #0
 800233e:	e05d      	b.n	80023fc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e04b      	b.n	80023de <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	3b20      	subs	r3, #32
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	7849      	ldrb	r1, [r1, #1]
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4619      	mov	r1, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e030      	b.n	80023cc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800237a:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <SSD1306_Putc+0xf8>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4413      	add	r3, r2
 8002384:	b298      	uxth	r0, r3
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <SSD1306_Putc+0xf8>)
 8002388:	885a      	ldrh	r2, [r3, #2]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4413      	add	r3, r2
 8002390:	b29b      	uxth	r3, r3
 8002392:	79ba      	ldrb	r2, [r7, #6]
 8002394:	4619      	mov	r1, r3
 8002396:	f7ff ff43 	bl	8002220 <SSD1306_DrawPixel>
 800239a:	e014      	b.n	80023c6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <SSD1306_Putc+0xf8>)
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	b298      	uxth	r0, r3
 80023a8:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <SSD1306_Putc+0xf8>)
 80023aa:	885a      	ldrh	r2, [r3, #2]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b299      	uxth	r1, r3
 80023b4:	79bb      	ldrb	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff ff2d 	bl	8002220 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	3301      	adds	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d3c8      	bcc.n	800236a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	461a      	mov	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d3ad      	bcc.n	8002346 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <SSD1306_Putc+0xf8>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <SSD1306_Putc+0xf8>)
 80023f8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200008c4 	.word	0x200008c4

08002408 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002416:	e012      	b.n	800243e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff73 	bl	800230c <SSD1306_Putc>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d002      	beq.n	8002438 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	e008      	b.n	800244a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e8      	bne.n	8002418 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <ssd1306_I2C_Init+0x28>)
 800245c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800245e:	e002      	b.n	8002466 <ssd1306_I2C_Init+0x12>
		p--;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	0003d090 	.word	0x0003d090

08002480 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b0c7      	sub	sp, #284	@ 0x11c
 8002484:	af02      	add	r7, sp, #8
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800248e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002492:	600a      	str	r2, [r1, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800249a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800249e:	4622      	mov	r2, r4
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024a6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024b6:	460a      	mov	r2, r1
 80024b8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80024ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024c6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80024d4:	e015      	b.n	8002502 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80024d6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024de:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	441a      	add	r2, r3
 80024e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024ea:	3301      	adds	r3, #1
 80024ec:	7811      	ldrb	r1, [r2, #0]
 80024ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024f2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80024f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024f8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024fc:	3301      	adds	r3, #1
 80024fe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002502:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002506:	b29b      	uxth	r3, r3
 8002508:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800250c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002510:	8812      	ldrh	r2, [r2, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d8df      	bhi.n	80024d6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800251a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b299      	uxth	r1, r3
 8002522:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002526:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	200a      	movs	r0, #10
 8002536:	9000      	str	r0, [sp, #0]
 8002538:	4803      	ldr	r0, [pc, #12]	@ (8002548 <ssd1306_I2C_WriteMulti+0xc8>)
 800253a:	f001 f913 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 800253e:	bf00      	nop
 8002540:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	200001f8 	.word	0x200001f8

0800254c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	460b      	mov	r3, r1
 8002558:	71bb      	strb	r3, [r7, #6]
 800255a:	4613      	mov	r3, r2
 800255c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	b299      	uxth	r1, r3
 800256a:	f107 020c 	add.w	r2, r7, #12
 800256e:	230a      	movs	r3, #10
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2302      	movs	r3, #2
 8002574:	4803      	ldr	r0, [pc, #12]	@ (8002584 <ssd1306_I2C_Write+0x38>)
 8002576:	f001 f8f5 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001f8 	.word	0x200001f8

08002588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_MspInit+0x30>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002594:	4a08      	ldr	r2, [pc, #32]	@ (80025b8 <HAL_MspInit+0x30>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_MspInit+0x30>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	46020c00 	.word	0x46020c00

080025bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0be      	sub	sp, #248	@ 0xf8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d4:	f107 0320 	add.w	r3, r7, #32
 80025d8:	22c0      	movs	r2, #192	@ 0xc0
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f007 fa96 	bl	8009b0e <memset>
  if(hi2c->Instance==I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a73      	ldr	r2, [pc, #460]	@ (80027b4 <HAL_I2C_MspInit+0x1f8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d146      	bne.n	800267a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025ec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fe:	f107 0320 	add.w	r3, r7, #32
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fa7a 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800260e:	f7ff fb4f 	bl	8001cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002618:	4a67      	ldr	r2, [pc, #412]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002622:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002630:	2348      	movs	r3, #72	@ 0x48
 8002632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002636:	2312      	movs	r3, #18
 8002638:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002648:	2304      	movs	r3, #4
 800264a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002652:	4619      	mov	r1, r3
 8002654:	4859      	ldr	r0, [pc, #356]	@ (80027bc <HAL_I2C_MspInit+0x200>)
 8002656:	f000 fe11 	bl	800327c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800265a:	4b57      	ldr	r3, [pc, #348]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800265c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002660:	4a55      	ldr	r2, [pc, #340]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002662:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002666:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800266c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002678:	e097      	b.n	80027aa <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a50      	ldr	r2, [pc, #320]	@ (80027c0 <HAL_I2C_MspInit+0x204>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d147      	bne.n	8002714 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002684:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002696:	f107 0320 	add.w	r3, r7, #32
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fa2e 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80026a6:	f7ff fb03 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b0:	4a41      	ldr	r2, [pc, #260]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026ba:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 80026bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80026c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80026cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d0:	2312      	movs	r3, #18
 80026d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026e2:	2304      	movs	r3, #4
 80026e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4833      	ldr	r0, [pc, #204]	@ (80027bc <HAL_I2C_MspInit+0x200>)
 80026f0:	f000 fdc4 	bl	800327c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 80026f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026fa:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 80026fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002700:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002704:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800270a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
}
 8002712:	e04a      	b.n	80027aa <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2a      	ldr	r2, [pc, #168]	@ (80027c4 <HAL_I2C_MspInit+0x208>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d145      	bne.n	80027aa <HAL_I2C_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800271e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	4618      	mov	r0, r3
 8002736:	f003 f9e1 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8002740:	f7ff fab6 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274a:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002754:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002762:	2303      	movs	r3, #3
 8002764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002768:	2312      	movs	r3, #18
 800276a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800277a:	2304      	movs	r3, #4
 800277c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002780:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002784:	4619      	mov	r1, r3
 8002786:	4810      	ldr	r0, [pc, #64]	@ (80027c8 <HAL_I2C_MspInit+0x20c>)
 8002788:	f000 fd78 	bl	800327c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800278e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002792:	4a09      	ldr	r2, [pc, #36]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002798:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_I2C_MspInit+0x1fc>)
 800279e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
}
 80027aa:	bf00      	nop
 80027ac:	37f8      	adds	r7, #248	@ 0xf8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40005400 	.word	0x40005400
 80027b8:	46020c00 	.word	0x46020c00
 80027bc:	42020400 	.word	0x42020400
 80027c0:	40005800 	.word	0x40005800
 80027c4:	46002800 	.word	0x46002800
 80027c8:	42020800 	.word	0x42020800

080027cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0c0      	sub	sp, #256	@ 0x100
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e8:	22c0      	movs	r2, #192	@ 0xc0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f007 f98e 	bl	8009b0e <memset>
  if(huart->Instance==UART4)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a85      	ldr	r2, [pc, #532]	@ (8002a0c <HAL_UART_MspInit+0x240>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d146      	bne.n	800288a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027fc:	f04f 0208 	mov.w	r2, #8
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800280e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002812:	4618      	mov	r0, r3
 8002814:	f003 f972 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800281e:	f7ff fa47 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002822:	4b7b      	ldr	r3, [pc, #492]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002828:	4a79      	ldr	r2, [pc, #484]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 800282a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800282e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002832:	4b77      	ldr	r3, [pc, #476]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	4b73      	ldr	r3, [pc, #460]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002846:	4a72      	ldr	r2, [pc, #456]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800285e:	2301      	movs	r3, #1
 8002860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002864:	2312      	movs	r3, #18
 8002866:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002876:	2308      	movs	r3, #8
 8002878:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002880:	4619      	mov	r1, r3
 8002882:	4864      	ldr	r0, [pc, #400]	@ (8002a14 <HAL_UART_MspInit+0x248>)
 8002884:	f000 fcfa 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002888:	e0ba      	b.n	8002a00 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==UART5)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a62      	ldr	r2, [pc, #392]	@ (8002a18 <HAL_UART_MspInit+0x24c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d16b      	bne.n	800296c <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002894:	f04f 0210 	mov.w	r2, #16
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f926 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_UART_MspInit+0xee>
      Error_Handler();
 80028b6:	f7ff f9fb 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80028ba:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c0:	4a53      	ldr	r2, [pc, #332]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028ca:	4b51      	ldr	r3, [pc, #324]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028de:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028e8:	4b49      	ldr	r3, [pc, #292]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	4b46      	ldr	r3, [pc, #280]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fc:	4a44      	ldr	r2, [pc, #272]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002906:	4b42      	ldr	r3, [pc, #264]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800292e:	2308      	movs	r3, #8
 8002930:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002938:	4619      	mov	r1, r3
 800293a:	4838      	ldr	r0, [pc, #224]	@ (8002a1c <HAL_UART_MspInit+0x250>)
 800293c:	f000 fc9e 	bl	800327c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002940:	2304      	movs	r3, #4
 8002942:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002958:	2308      	movs	r3, #8
 800295a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002962:	4619      	mov	r1, r3
 8002964:	482e      	ldr	r0, [pc, #184]	@ (8002a20 <HAL_UART_MspInit+0x254>)
 8002966:	f000 fc89 	bl	800327c <HAL_GPIO_Init>
}
 800296a:	e049      	b.n	8002a00 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2c      	ldr	r2, [pc, #176]	@ (8002a24 <HAL_UART_MspInit+0x258>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d144      	bne.n	8002a00 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002976:	f04f 0204 	mov.w	r2, #4
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002982:	2300      	movs	r3, #0
 8002984:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800298a:	4618      	mov	r0, r3
 800298c:	f003 f8b6 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8002996:	f7ff f98b 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800299a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 800299c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80029a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80029ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80029ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029be:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_UART_MspInit+0x244>)
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029dc:	2312      	movs	r3, #18
 80029de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ee:	2307      	movs	r3, #7
 80029f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <HAL_UART_MspInit+0x248>)
 80029fc:	f000 fc3e 	bl	800327c <HAL_GPIO_Init>
}
 8002a00:	bf00      	nop
 8002a02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40004c00 	.word	0x40004c00
 8002a10:	46020c00 	.word	0x46020c00
 8002a14:	42020000 	.word	0x42020000
 8002a18:	40005000 	.word	0x40005000
 8002a1c:	42020800 	.word	0x42020800
 8002a20:	42020c00 	.word	0x42020c00
 8002a24:	40004800 	.word	0x40004800

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <NMI_Handler+0x4>

08002a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7e:	f000 fa09 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f92a 	bl	8002ce4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aae:	f007 f881 	bl	8009bb4 <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ad6:	bf00      	nop
 8002ad8:	e7fd      	b.n	8002ad6 <_exit+0x12>

08002ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e00a      	b.n	8002b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aec:	f3af 8000 	nop.w
 8002af0:	4601      	mov	r1, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	b2ca      	uxtb	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	dbf0      	blt.n	8002aec <_read+0x12>
  }

  return len;
 8002b0a:	687b      	ldr	r3, [r7, #4]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e009      	b.n	8002b3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	60ba      	str	r2, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f8ee 	bl	8002d10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	dbf1      	blt.n	8002b26 <_write+0x12>
  }
  return len;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_close>:

int _close(int file)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b74:	605a      	str	r2, [r3, #4]
  return 0;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_isatty>:

int _isatty(int file)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f006 ffe6 	bl	8009bb4 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20040000 	.word	0x20040000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	200008cc 	.word	0x200008cc
 8002c1c:	20000ac8 	.word	0x20000ac8

08002c20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <SystemInit+0x68>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <SystemInit+0x68>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002c34:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <SystemInit+0x6c>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <SystemInit+0x6c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002c40:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <SystemInit+0x6c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <SystemInit+0x6c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <SystemInit+0x6c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0e      	ldr	r2, [pc, #56]	@ (8002c8c <SystemInit+0x6c>)
 8002c52:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002c56:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <SystemInit+0x6c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <SystemInit+0x6c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <SystemInit+0x6c>)
 8002c68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <SystemInit+0x6c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <SystemInit+0x68>)
 8002c76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c7a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00
 8002c8c:	46020c00 	.word	0x46020c00

08002c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c90:	480d      	ldr	r0, [pc, #52]	@ (8002cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c94:	f7ff ffc4 	bl	8002c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c98:	480c      	ldr	r0, [pc, #48]	@ (8002ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8002c9a:	490d      	ldr	r1, [pc, #52]	@ (8002cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd4 <LoopForever+0xe>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca0:	e002      	b.n	8002ca8 <LoopCopyDataInit>

08002ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca6:	3304      	adds	r3, #4

08002ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cac:	d3f9      	bcc.n	8002ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cae:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cdc <LoopForever+0x16>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb4:	e001      	b.n	8002cba <LoopFillZerobss>

08002cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb8:	3204      	adds	r2, #4

08002cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cbc:	d3fb      	bcc.n	8002cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cbe:	f006 ff7f 	bl	8009bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc2:	f7fe fafb 	bl	80012bc <main>

08002cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cc6:	e7fe      	b.n	8002cc6 <LoopForever>
  ldr   r0, =_estack
 8002cc8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002cd4:	0800c930 	.word	0x0800c930
  ldr r2, =_sbss
 8002cd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002cdc:	20000ac4 	.word	0x20000ac4

08002ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_IRQHandler>
	...

08002ce4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002cee:	79fa      	ldrb	r2, [r7, #7]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <BSP_PB_IRQHandler+0x28>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fa75 	bl	80031ec <HAL_EXTI_IRQHandler>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200008d0 	.word	0x200008d0

08002d10 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <__io_putchar+0x30>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2394      	movs	r3, #148	@ 0x94
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <__io_putchar+0x34>)
 8002d26:	1898      	adds	r0, r3, r2
 8002d28:	1d39      	adds	r1, r7, #4
 8002d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f005 fb4a 	bl	80083c8 <HAL_UART_Transmit>
  return ch;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000970 	.word	0x20000970
 8002d44:	200008dc 	.word	0x200008dc

08002d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_Init+0x50>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <HAL_Init+0x50>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f000 f96e 	bl	800303a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d5e:	f002 fcef 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_Init+0x54>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <HAL_Init+0x58>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	4a0b      	ldr	r2, [pc, #44]	@ (8002da4 <HAL_Init+0x5c>)
 8002d76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d78:	2004      	movs	r0, #4
 8002d7a:	f000 f9a5 	bl	80030c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f000 f812 	bl	8002da8 <HAL_InitTick>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e002      	b.n	8002d94 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8e:	f7ff fbfb 	bl	8002588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	46020c00 	.word	0x46020c00
 8002da0:	0800c4b0 	.word	0x0800c4b0
 8002da4:	20000008 	.word	0x20000008

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002db4:	4b33      	ldr	r3, [pc, #204]	@ (8002e84 <HAL_InitTick+0xdc>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e05c      	b.n	8002e7a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002dc0:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <HAL_InitTick+0xe0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d10c      	bne.n	8002de6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <HAL_InitTick+0xe4>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <HAL_InitTick+0xdc>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e037      	b.n	8002e56 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002de6:	f000 f9c7 	bl	8003178 <HAL_SYSTICK_GetCLKSourceConfig>
 8002dea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d023      	beq.n	8002e3a <HAL_InitTick+0x92>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d82d      	bhi.n	8002e54 <HAL_InitTick+0xac>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_InitTick+0x5e>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d00d      	beq.n	8002e20 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002e04:	e026      	b.n	8002e54 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002e06:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <HAL_InitTick+0xe4>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <HAL_InitTick+0xdc>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
        break;
 8002e1e:	e01a      	b.n	8002e56 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e20:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <HAL_InitTick+0xdc>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	60fb      	str	r3, [r7, #12]
        break;
 8002e38:	e00d      	b.n	8002e56 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_InitTick+0xdc>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	60fb      	str	r3, [r7, #12]
        break;
 8002e52:	e000      	b.n	8002e56 <HAL_InitTick+0xae>
        break;
 8002e54:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f914 	bl	8003084 <HAL_SYSTICK_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e009      	b.n	8002e7a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e66:	2200      	movs	r2, #0
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	f000 f8ef 	bl	8003050 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002e72:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <HAL_InitTick+0xe8>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000010 	.word	0x20000010
 8002e88:	e000e010 	.word	0xe000e010
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_IncTick+0x24>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <HAL_IncTick+0x24>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000010 	.word	0x20000010
 8002eb8:	20000974 	.word	0x20000974

08002ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	@ (8002ed0 <HAL_GetTick+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000974 	.word	0x20000974

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff ffee 	bl	8002ebc <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000010 	.word	0x20000010

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff6a 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800305e:	f7ff ff81 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 8003062:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7ff ffb3 	bl	8002fd4 <NVIC_EncodePriority>
 800306e:	4602      	mov	r2, r0
 8003070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff82 	bl	8002f80 <__NVIC_SetPriority>
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003094:	d301      	bcc.n	800309a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003096:	2301      	movs	r3, #1
 8003098:	e00d      	b.n	80030b6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <HAL_SYSTICK_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <HAL_SYSTICK_Config+0x40>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_SYSTICK_Config+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a05      	ldr	r2, [pc, #20]	@ (80030c4 <HAL_SYSTICK_Config+0x40>)
 80030ae:	f043 0303 	orr.w	r3, r3, #3
 80030b2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d844      	bhi.n	8003160 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80030d6:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ff 	.word	0x080030ff
 80030e0:	0800311d 	.word	0x0800311d
 80030e4:	0800313f 	.word	0x0800313f
 80030e8:	08003161 	.word	0x08003161
 80030ec:	080030f1 	.word	0x080030f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6013      	str	r3, [r2, #0]
      break;
 80030fc:	e031      	b.n	8003162 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003110:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003112:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800311a:	e022      	b.n	8003162 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a13      	ldr	r2, [pc, #76]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800312a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800312e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003132:	4a10      	ldr	r2, [pc, #64]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800313c:	e011      	b.n	8003162 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800314c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003150:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003154:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800315a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800315e:	e000      	b.n	8003162 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003160:	bf00      	nop
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010
 8003174:	46020c00 	.word	0x46020c00

08003178 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800318a:	2304      	movs	r3, #4
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e021      	b.n	80031d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003190:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003196:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800319a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031a2:	d011      	beq.n	80031c8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031aa:	d810      	bhi.n	80031ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b8:	d003      	beq.n	80031c2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031ba:	e008      	b.n	80031ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031bc:	2300      	movs	r3, #0
 80031be:	607b      	str	r3, [r7, #4]
        break;
 80031c0:	e008      	b.n	80031d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031c2:	2301      	movs	r3, #1
 80031c4:	607b      	str	r3, [r7, #4]
        break;
 80031c6:	e005      	b.n	80031d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031c8:	2302      	movs	r3, #2
 80031ca:	607b      	str	r3, [r7, #4]
        break;
 80031cc:	e002      	b.n	80031d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
        break;
 80031d2:	bf00      	nop
    }
  }
  return systick_source;
 80031d4:	687b      	ldr	r3, [r7, #4]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010
 80031e8:	46020c00 	.word	0x46020c00

080031ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2201      	movs	r2, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <HAL_EXTI_IRQHandler+0x88>)
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <HAL_EXTI_IRQHandler+0x8c>)
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4798      	blx	r3
    }
  }
}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	4602200c 	.word	0x4602200c
 8003278:	46022010 	.word	0x46022010

0800327c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800328e:	e1ba      	b.n	8003606 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 81aa 	beq.w	8003600 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a55      	ldr	r2, [pc, #340]	@ (8003404 <HAL_GPIO_Init+0x188>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d15d      	bne.n	8003370 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032ba:	2201      	movs	r2, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0201 	and.w	r2, r3, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032e4:	4a48      	ldr	r2, [pc, #288]	@ (8003408 <HAL_GPIO_Init+0x18c>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032ec:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80032ee:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <HAL_GPIO_Init+0x18c>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	08da      	lsrs	r2, r3, #3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	3208      	adds	r2, #8
 8003302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003306:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	4013      	ands	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	220b      	movs	r2, #11
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3208      	adds	r2, #8
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	4013      	ands	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2202      	movs	r2, #2
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e067      	b.n	8003440 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x104>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b12      	cmp	r3, #18
 800337e:	d145      	bne.n	800340c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	69f9      	ldr	r1, [r7, #28]
 80033c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e01e      	b.n	8003440 <HAL_GPIO_Init+0x1c4>
 8003402:	bf00      	nop
 8003404:	46020000 	.word	0x46020000
 8003408:	0800c508 	.word	0x0800c508
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4013      	ands	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	4313      	orrs	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d00b      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d007      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003454:	2b11      	cmp	r3, #17
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d130      	bne.n	80034c2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	4013      	ands	r3, r2
 8003476:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003496:	2201      	movs	r2, #1
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0201 	and.w	r2, r3, #1
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d017      	beq.n	80034fa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	4013      	ands	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07c      	beq.n	8003600 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003506:	4a47      	ldr	r2, [pc, #284]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3318      	adds	r3, #24
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	220f      	movs	r2, #15
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	4013      	ands	r3, r2
 8003528:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0a9a      	lsrs	r2, r3, #10
 800352e:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <HAL_GPIO_Init+0x3ac>)
 8003530:	4013      	ands	r3, r2
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	00d2      	lsls	r2, r2, #3
 800353a:	4093      	lsls	r3, r2
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	4313      	orrs	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003542:	4938      	ldr	r1, [pc, #224]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3318      	adds	r3, #24
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003550:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	4013      	ands	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003574:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800357a:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	4013      	ands	r3, r2
 8003588:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800359e:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035ca:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f ae3d 	bne.w	8003290 <HAL_GPIO_Init+0x14>
  }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3724      	adds	r7, #36	@ 0x24
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	46022000 	.word	0x46022000
 8003628:	002f7f7f 	.word	0x002f7f7f

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08d      	b.n	800375a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe ffb2 	bl	80025bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800367c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e006      	b.n	80036b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d108      	bne.n	80036ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e007      	b.n	80036de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	817b      	strh	r3, [r7, #10]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b20      	cmp	r3, #32
 8003782:	f040 80da 	bne.w	800393a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2C_Master_Transmit+0x30>
 8003790:	2302      	movs	r3, #2
 8003792:	e0d3      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800379c:	f7ff fb8e 	bl	8002ebc <HAL_GetTick>
 80037a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2319      	movs	r3, #25
 80037a8:	2201      	movs	r2, #1
 80037aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fad2 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0be      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	@ 0x21
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2210      	movs	r2, #16
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2bff      	cmp	r3, #255	@ 0xff
 80037ee:	d90e      	bls.n	800380e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	22ff      	movs	r2, #255	@ 0xff
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	8979      	ldrh	r1, [r7, #10]
 80037fe:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <HAL_I2C_Master_Transmit+0x1e0>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fcf6 	bl	80041f8 <I2C_TransferConfig>
 800380c:	e06c      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	4b48      	ldr	r3, [pc, #288]	@ (8003944 <HAL_I2C_Master_Transmit+0x1e0>)
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fce5 	bl	80041f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800382e:	e05b      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6a39      	ldr	r1, [r7, #32]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fae8 	bl	8003e0a <I2C_WaitOnTXISFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e07b      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d034      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0x184>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d130      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	@ 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa61 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04d      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2bff      	cmp	r3, #255	@ 0xff
 80038a8:	d90e      	bls.n	80038c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22ff      	movs	r2, #255	@ 0xff
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc99 	bl	80041f8 <I2C_TransferConfig>
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fc88 	bl	80041f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d19e      	bne.n	8003830 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	6a39      	ldr	r1, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 face 	bl	8003e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01a      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_I2C_Master_Transmit+0x1e4>)
 800391a:	400b      	ands	r3, r1
 800391c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	80002000 	.word	0x80002000
 8003948:	fe00e800 	.word	0xfe00e800

0800394c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	460b      	mov	r3, r1
 800395a:	817b      	strh	r3, [r7, #10]
 800395c:	4613      	mov	r3, r2
 800395e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	f040 80db 	bne.w	8003b24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_I2C_Master_Receive+0x30>
 8003978:	2302      	movs	r3, #2
 800397a:	e0d4      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003984:	f7ff fa9a 	bl	8002ebc <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2319      	movs	r3, #25
 8003990:	2201      	movs	r2, #1
 8003992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9de 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0bf      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2222      	movs	r2, #34	@ 0x22
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2bff      	cmp	r3, #255	@ 0xff
 80039d6:	d90e      	bls.n	80039f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	22ff      	movs	r2, #255	@ 0xff
 80039dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	8979      	ldrh	r1, [r7, #10]
 80039e6:	4b52      	ldr	r3, [pc, #328]	@ (8003b30 <HAL_I2C_Master_Receive+0x1e4>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fc02 	bl	80041f8 <I2C_TransferConfig>
 80039f4:	e06d      	b.n	8003ad2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	4b49      	ldr	r3, [pc, #292]	@ (8003b30 <HAL_I2C_Master_Receive+0x1e4>)
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fbf1 	bl	80041f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a16:	e05c      	b.n	8003ad2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6a39      	ldr	r1, [r7, #32]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fa7f 	bl	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e07c      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d034      	beq.n	8003ad2 <HAL_I2C_Master_Receive+0x186>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d130      	bne.n	8003ad2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f96c 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e04d      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2bff      	cmp	r3, #255	@ 0xff
 8003a92:	d90e      	bls.n	8003ab2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fba4 	bl	80041f8 <I2C_TransferConfig>
 8003ab0:	e00f      	b.n	8003ad2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fb93 	bl	80041f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d19d      	bne.n	8003a18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6a39      	ldr	r1, [r7, #32]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9d9 	bl	8003e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e01a      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2220      	movs	r2, #32
 8003af6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <HAL_I2C_Master_Receive+0x1e8>)
 8003b04:	400b      	ands	r3, r1
 8003b06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	80002400 	.word	0x80002400
 8003b34:	fe00e800 	.word	0xfe00e800

08003b38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	@ 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	460b      	mov	r3, r1
 8003b46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	f040 80d6 	bne.w	8003d06 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0cc      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_IsDeviceReady+0x44>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0c5      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_IsDeviceReady+0x72>
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ba4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ba8:	e006      	b.n	8003bb8 <HAL_I2C_IsDeviceReady+0x80>
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bb4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003bbe:	f7ff f97d 	bl	8002ebc <HAL_GetTick>
 8003bc2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003bf0:	e034      	b.n	8003c5c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d01a      	beq.n	8003c30 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	f7ff f95f 	bl	8002ebc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <HAL_I2C_IsDeviceReady+0xd8>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e06b      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_I2C_IsDeviceReady+0x130>
 8003c62:	7fbb      	ldrb	r3, [r7, #30]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0c4      	beq.n	8003bf2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d01a      	beq.n	8003cac <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2120      	movs	r1, #32
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f869 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e03b      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2220      	movs	r2, #32
 8003c96:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e02d      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f84e 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e020      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f63f af56 	bhi.w	8003b92 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d103      	bne.n	8003d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d007      	beq.n	8003d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	619a      	str	r2, [r3, #24]
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d68:	e03b      	b.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f962 	bl	8004038 <I2C_IsErrorOccurred>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e041      	b.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d02d      	beq.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7ff f899 	bl	8002ebc <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d122      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d113      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d0b4      	beq.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e16:	e033      	b.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f90b 	bl	8004038 <I2C_IsErrorOccurred>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e031      	b.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d025      	beq.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7ff f842 	bl	8002ebc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d11a      	bne.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d013      	beq.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e007      	b.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d1c4      	bne.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea4:	e02f      	b.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8c4 	bl	8004038 <I2C_IsErrorOccurred>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e02d      	b.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe ffff 	bl	8002ebc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11a      	bne.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d013      	beq.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e007      	b.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d1c8      	bne.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f30:	e071      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f87e 	bl	8004038 <I2C_IsErrorOccurred>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d13b      	bne.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d138      	bne.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d105      	bne.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d121      	bne.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2220      	movs	r2, #32
 8003f96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
 8003fc4:	e002      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003fcc:	f7fe ff76 	bl	8002ebc <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d119      	bne.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00f      	beq.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b04      	cmp	r3, #4
 8004022:	d002      	beq.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d083      	beq.n	8003f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	fe00e800 	.word	0xfe00e800

08004038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	@ 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d068      	beq.n	8004136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800406c:	e049      	b.n	8004102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d045      	beq.n	8004102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7fe ff21 	bl	8002ebc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <I2C_IsErrorOccurred+0x54>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d13a      	bne.n	8004102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ae:	d121      	bne.n	80040f4 <I2C_IsErrorOccurred+0xbc>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b6:	d01d      	beq.n	80040f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d01a      	beq.n	80040f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040ce:	f7fe fef5 	bl	8002ebc <HAL_GetTick>
 80040d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d4:	e00e      	b.n	80040f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040d6:	f7fe fef1 	bl	8002ebc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b19      	cmp	r3, #25
 80040e2:	d907      	bls.n	80040f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f043 0320 	orr.w	r3, r3, #32
 80040ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80040f2:	e006      	b.n	8004102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d1e9      	bne.n	80040d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d003      	beq.n	8004118 <I2C_IsErrorOccurred+0xe0>
 8004110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0aa      	beq.n	800406e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2220      	movs	r2, #32
 8004126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f043 0304 	orr.w	r3, r3, #4
 800412e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800417a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f043 0302 	orr.w	r3, r3, #2
 8004192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800419c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fdaf 	bl	8003d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <I2C_IsErrorOccurred+0x1bc>)
 80041be:	400b      	ands	r3, r1
 80041c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	@ 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	fe00e800 	.word	0xfe00e800

080041f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	4613      	mov	r3, r2
 8004208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004210:	7a7b      	ldrb	r3, [r7, #9]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	4313      	orrs	r3, r2
 8004222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	0d5b      	lsrs	r3, r3, #21
 8004232:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004236:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <I2C_TransferConfig+0x60>)
 8004238:	430b      	orrs	r3, r1
 800423a:	43db      	mvns	r3, r3
 800423c:	ea02 0103 	and.w	r1, r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	03ff63ff 	.word	0x03ff63ff

0800425c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d138      	bne.n	80042e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800427c:	2302      	movs	r3, #2
 800427e:	e032      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	d139      	bne.n	800437c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004312:	2302      	movs	r3, #2
 8004314:	e033      	b.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2224      	movs	r2, #36	@ 0x24
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e007      	b.n	80043ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80043aa:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0204 	bic.w	r2, r3, #4
 80043b2:	4905      	ldr	r1, [pc, #20]	@ (80043c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40030400 	.word	0x40030400

080043cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <HAL_ICACHE_Enable+0x1c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a04      	ldr	r2, [pc, #16]	@ (80043e8 <HAL_ICACHE_Enable+0x1c>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40030400 	.word	0x40030400

080043ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80043f4:	4b39      	ldr	r3, [pc, #228]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d10b      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d905      	bls.n	800441a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800440e:	4b33      	ldr	r3, [pc, #204]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a32      	ldr	r2, [pc, #200]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004418:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e057      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004424:	d90a      	bls.n	800443c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004426:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	4a2a      	ldr	r2, [pc, #168]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004438:	60d3      	str	r3, [r2, #12]
 800443a:	e007      	b.n	800444c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800443c:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004444:	4925      	ldr	r1, [pc, #148]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4313      	orrs	r3, r2
 800444a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800444c:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a24      	ldr	r2, [pc, #144]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	2232      	movs	r2, #50	@ 0x32
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4a21      	ldr	r2, [pc, #132]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800446a:	e002      	b.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x98>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f3      	bne.n	800446c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01b      	beq.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	099b      	lsrs	r3, r3, #6
 8004496:	2232      	movs	r2, #50	@ 0x32
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	4a11      	ldr	r2, [pc, #68]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80044a8:	e002      	b.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f3      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e000      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	46020800 	.word	0x46020800
 80044e0:	20000008 	.word	0x20000008
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80044ec:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <HAL_PWREx_GetVoltageRange+0x18>)
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	46020800 	.word	0x46020800

08004504 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800450c:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <HAL_PWREx_ConfigSupply+0x94>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_PWREx_ConfigSupply+0x98>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2232      	movs	r2, #50	@ 0x32
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <HAL_PWREx_ConfigSupply+0x98>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004530:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004536:	f023 0302 	bic.w	r3, r3, #2
 800453a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800453c:	e002      	b.n	8004544 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b01      	subs	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004544:	4b16      	ldr	r3, [pc, #88]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d116      	bne.n	800457e <HAL_PWREx_ConfigSupply+0x7a>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f3      	bne.n	800453e <HAL_PWREx_ConfigSupply+0x3a>
 8004556:	e012      	b.n	800457e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004558:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a10      	ldr	r2, [pc, #64]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004564:	e002      	b.n	800456c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b01      	subs	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <HAL_PWREx_ConfigSupply+0x7a>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f3      	bne.n	8004566 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e000      	b.n	800458a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000008 	.word	0x20000008
 800459c:	10624dd3 	.word	0x10624dd3
 80045a0:	46020800 	.word	0x46020800

080045a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	@ 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f000 bec8 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b99      	ldr	r3, [pc, #612]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c8:	4b96      	ldr	r3, [pc, #600]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 816c 	beq.w	80048b8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_RCC_OscConfig+0x52>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	f040 80de 	bne.w	80047aa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	f040 80da 	bne.w	80047aa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f000 bea5 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004608:	4b86      	ldr	r3, [pc, #536]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_RCC_OscConfig+0x7a>
 8004614:	4b83      	ldr	r3, [pc, #524]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800461c:	e005      	b.n	800462a <HAL_RCC_OscConfig+0x86>
 800461e:	4b81      	ldr	r3, [pc, #516]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800462a:	4293      	cmp	r3, r2
 800462c:	d255      	bcs.n	80046da <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f9d9 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f000 be82 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800464a:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a75      	ldr	r2, [pc, #468]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	4b73      	ldr	r3, [pc, #460]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	4970      	ldr	r1, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004670:	d309      	bcc.n	8004686 <HAL_RCC_OscConfig+0xe2>
 8004672:	4b6c      	ldr	r3, [pc, #432]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f023 021f 	bic.w	r2, r3, #31
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4969      	ldr	r1, [pc, #420]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
 8004684:	e07e      	b.n	8004784 <HAL_RCC_OscConfig+0x1e0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0a      	bge.n	80046a4 <HAL_RCC_OscConfig+0x100>
 800468e:	4b65      	ldr	r3, [pc, #404]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	015b      	lsls	r3, r3, #5
 800469c:	4961      	ldr	r1, [pc, #388]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
 80046a2:	e06f      	b.n	8004784 <HAL_RCC_OscConfig+0x1e0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ac:	d30a      	bcc.n	80046c4 <HAL_RCC_OscConfig+0x120>
 80046ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	4959      	ldr	r1, [pc, #356]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
 80046c2:	e05f      	b.n	8004784 <HAL_RCC_OscConfig+0x1e0>
 80046c4:	4b57      	ldr	r3, [pc, #348]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	03db      	lsls	r3, r3, #15
 80046d2:	4954      	ldr	r1, [pc, #336]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60cb      	str	r3, [r1, #12]
 80046d8:	e054      	b.n	8004784 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80046da:	4b52      	ldr	r3, [pc, #328]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4a51      	ldr	r2, [pc, #324]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e4:	6093      	str	r3, [r2, #8]
 80046e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	494c      	ldr	r1, [pc, #304]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004700:	d309      	bcc.n	8004716 <HAL_RCC_OscConfig+0x172>
 8004702:	4b48      	ldr	r3, [pc, #288]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 021f 	bic.w	r2, r3, #31
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	4945      	ldr	r1, [pc, #276]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004710:	4313      	orrs	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
 8004714:	e028      	b.n	8004768 <HAL_RCC_OscConfig+0x1c4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	da0a      	bge.n	8004734 <HAL_RCC_OscConfig+0x190>
 800471e:	4b41      	ldr	r3, [pc, #260]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	015b      	lsls	r3, r3, #5
 800472c:	493d      	ldr	r1, [pc, #244]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800472e:	4313      	orrs	r3, r2
 8004730:	60cb      	str	r3, [r1, #12]
 8004732:	e019      	b.n	8004768 <HAL_RCC_OscConfig+0x1c4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d30a      	bcc.n	8004754 <HAL_RCC_OscConfig+0x1b0>
 800473e:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	029b      	lsls	r3, r3, #10
 800474c:	4935      	ldr	r1, [pc, #212]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
 8004752:	e009      	b.n	8004768 <HAL_RCC_OscConfig+0x1c4>
 8004754:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	03db      	lsls	r3, r3, #15
 8004762:	4930      	ldr	r1, [pc, #192]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004764:	4313      	orrs	r3, r2
 8004766:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f93c 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f000 bde5 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004784:	f001 f8de 	bl	8005944 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004788:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <HAL_RCC_OscConfig+0x284>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fb0b 	bl	8002da8 <HAL_InitTick>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 808a 	beq.w	80048b6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80047a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047a6:	f000 bdd2 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d066      	beq.n	8004880 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80047b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047be:	f7fe fb7d 	bl	8002ebc <HAL_GetTick>
 80047c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047c4:	e009      	b.n	80047da <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c6:	f7fe fb79 	bl	8002ebc <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d902      	bls.n	80047da <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	f000 bdba 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047da:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ef      	beq.n	80047c6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047f0:	6093      	str	r3, [r2, #8]
 80047f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	4909      	ldr	r1, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004800:	4313      	orrs	r3, r2
 8004802:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800480c:	d30e      	bcc.n	800482c <HAL_RCC_OscConfig+0x288>
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f023 021f 	bic.w	r2, r3, #31
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	4902      	ldr	r1, [pc, #8]	@ (8004824 <HAL_RCC_OscConfig+0x280>)
 800481c:	4313      	orrs	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
 8004820:	e04a      	b.n	80048b8 <HAL_RCC_OscConfig+0x314>
 8004822:	bf00      	nop
 8004824:	46020c00 	.word	0x46020c00
 8004828:	2000000c 	.word	0x2000000c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	da0a      	bge.n	800484a <HAL_RCC_OscConfig+0x2a6>
 8004834:	4b98      	ldr	r3, [pc, #608]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	015b      	lsls	r3, r3, #5
 8004842:	4995      	ldr	r1, [pc, #596]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	60cb      	str	r3, [r1, #12]
 8004848:	e036      	b.n	80048b8 <HAL_RCC_OscConfig+0x314>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004852:	d30a      	bcc.n	800486a <HAL_RCC_OscConfig+0x2c6>
 8004854:	4b90      	ldr	r3, [pc, #576]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	498d      	ldr	r1, [pc, #564]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004864:	4313      	orrs	r3, r2
 8004866:	60cb      	str	r3, [r1, #12]
 8004868:	e026      	b.n	80048b8 <HAL_RCC_OscConfig+0x314>
 800486a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	03db      	lsls	r3, r3, #15
 8004878:	4987      	ldr	r1, [pc, #540]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
 800487e:	e01b      	b.n	80048b8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004880:	4b85      	ldr	r3, [pc, #532]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a84      	ldr	r2, [pc, #528]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800488c:	f7fe fb16 	bl	8002ebc <HAL_GetTick>
 8004890:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004892:	e009      	b.n	80048a8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004894:	f7fe fb12 	bl	8002ebc <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f000 bd53 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80048a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ef      	bne.n	8004894 <HAL_RCC_OscConfig+0x2f0>
 80048b4:	e000      	b.n	80048b8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 808b 	beq.w	80049dc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_OscConfig+0x334>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d17d      	bne.n	80049dc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f000 bd34 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x35a>
 80048f0:	4b69      	ldr	r3, [pc, #420]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a68      	ldr	r2, [pc, #416]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e041      	b.n	8004982 <HAL_RCC_OscConfig+0x3de>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004906:	d112      	bne.n	800492e <HAL_RCC_OscConfig+0x38a>
 8004908:	4b63      	ldr	r3, [pc, #396]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a62      	ldr	r2, [pc, #392]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800490e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b60      	ldr	r3, [pc, #384]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5f      	ldr	r2, [pc, #380]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800491a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b5d      	ldr	r3, [pc, #372]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5c      	ldr	r2, [pc, #368]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e029      	b.n	8004982 <HAL_RCC_OscConfig+0x3de>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004936:	d112      	bne.n	800495e <HAL_RCC_OscConfig+0x3ba>
 8004938:	4b57      	ldr	r3, [pc, #348]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a56      	ldr	r2, [pc, #344]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800493e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a53      	ldr	r2, [pc, #332]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800494a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b51      	ldr	r3, [pc, #324]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a50      	ldr	r2, [pc, #320]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e011      	b.n	8004982 <HAL_RCC_OscConfig+0x3de>
 800495e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a4d      	ldr	r2, [pc, #308]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a47      	ldr	r2, [pc, #284]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 800497c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004980:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d014      	beq.n	80049b4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800498a:	f7fe fa97 	bl	8002ebc <HAL_GetTick>
 800498e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004990:	e009      	b.n	80049a6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004992:	f7fe fa93 	bl	8002ebc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	@ 0x64
 800499e:	d902      	bls.n	80049a6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f000 bcd4 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ef      	beq.n	8004992 <HAL_RCC_OscConfig+0x3ee>
 80049b2:	e013      	b.n	80049dc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80049b4:	f7fe fa82 	bl	8002ebc <HAL_GetTick>
 80049b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ba:	e009      	b.n	80049d0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fe fa7e 	bl	8002ebc <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d902      	bls.n	80049d0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	f000 bcbf 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d0:	4b31      	ldr	r3, [pc, #196]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ef      	bne.n	80049bc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05f      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d005      	beq.n	80049fa <HAL_RCC_OscConfig+0x456>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d114      	bne.n	8004a1e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d111      	bne.n	8004a1e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f000 bca3 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b23      	ldr	r3, [pc, #140]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	4920      	ldr	r1, [pc, #128]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a1c:	e044      	b.n	8004aa8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d024      	beq.n	8004a70 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004a26:	4b1c      	ldr	r3, [pc, #112]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a32:	f7fe fa43 	bl	8002ebc <HAL_GetTick>
 8004a36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fe fa3f 	bl	8002ebc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d902      	bls.n	8004a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	f000 bc80 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4e:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ef      	beq.n	8004a3a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	490b      	ldr	r1, [pc, #44]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
 8004a6e:	e01b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004a70:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a08      	ldr	r2, [pc, #32]	@ (8004a98 <HAL_RCC_OscConfig+0x4f4>)
 8004a76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a7c:	f7fe fa1e 	bl	8002ebc <HAL_GetTick>
 8004a80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fe fa1a 	bl	8002ebc <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d904      	bls.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	f000 bc5b 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
 8004a98:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a9c:	4baf      	ldr	r3, [pc, #700]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ed      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80c8 	beq.w	8004c46 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d111      	bne.n	8004aee <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4ba4      	ldr	r3, [pc, #656]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad0:	4aa2      	ldr	r2, [pc, #648]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004ad2:	f043 0304 	orr.w	r3, r3, #4
 8004ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ada:	4ba0      	ldr	r3, [pc, #640]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004aee:	4b9c      	ldr	r3, [pc, #624]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004afa:	4b99      	ldr	r3, [pc, #612]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afe:	4a98      	ldr	r2, [pc, #608]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b06:	f7fe f9d9 	bl	8002ebc <HAL_GetTick>
 8004b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b0c:	e009      	b.n	8004b22 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0e:	f7fe f9d5 	bl	8002ebc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d902      	bls.n	8004b22 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	f000 bc16 	b.w	800534e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b22:	4b8f      	ldr	r3, [pc, #572]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ef      	beq.n	8004b0e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d05f      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004b36:	4b89      	ldr	r3, [pc, #548]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b3c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d037      	beq.n	8004bbc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e3f4      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01b      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b74:	4a79      	ldr	r2, [pc, #484]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004b76:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004b7e:	f7fe f99d 	bl	8002ebc <HAL_GetTick>
 8004b82:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b86:	f7fe f999 	bl	8002ebc <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e3da      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b98:	4b70      	ldr	r3, [pc, #448]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ef      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	4969      	ldr	r1, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004bbc:	4b67      	ldr	r3, [pc, #412]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	4a66      	ldr	r2, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004bc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004bcc:	f7fe f976 	bl	8002ebc <HAL_GetTick>
 8004bd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fe f972 	bl	8002ebc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e3b3      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004be6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x630>
 8004bf4:	e01b      	b.n	8004c2e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004bf6:	4b59      	ldr	r3, [pc, #356]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bfc:	4a57      	ldr	r2, [pc, #348]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004bfe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004c06:	f7fe f959 	bl	8002ebc <HAL_GetTick>
 8004c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fe f955 	bl	8002ebc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e396      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c20:	4b4e      	ldr	r3, [pc, #312]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ef      	bne.n	8004c0e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3c:	4a47      	ldr	r2, [pc, #284]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c3e:	f023 0304 	bic.w	r3, r3, #4
 8004c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8111 	beq.w	8004e76 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5a:	4b40      	ldr	r3, [pc, #256]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d111      	bne.n	8004c8c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c8c:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d118      	bne.n	8004cca <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004c98:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca4:	f7fe f90a 	bl	8002ebc <HAL_GetTick>
 8004ca8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cac:	f7fe f906 	bl	8002ebc <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e347      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cbe:	4b28      	ldr	r3, [pc, #160]	@ (8004d60 <HAL_RCC_OscConfig+0x7bc>)
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01f      	beq.n	8004d16 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d010      	beq.n	8004d04 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf8:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d02:	e018      	b.n	8004d36 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d04:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d0a:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d14:	e00f      	b.n	8004d36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d16:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d5c <HAL_RCC_OscConfig+0x7b8>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d057      	beq.n	8004dee <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004d3e:	f7fe f8bd 	bl	8002ebc <HAL_GetTick>
 8004d42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d44:	e00e      	b.n	8004d64 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fe f8b9 	bl	8002ebc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d905      	bls.n	8004d64 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e2f8      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
 8004d5c:	46020c00 	.word	0x46020c00
 8004d60:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d64:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0e9      	beq.n	8004d46 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d7e:	4b96      	ldr	r3, [pc, #600]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d84:	4a94      	ldr	r2, [pc, #592]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fe f894 	bl	8002ebc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e2d3      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004da6:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ed      	beq.n	8004d90 <HAL_RCC_OscConfig+0x7ec>
 8004db4:	e053      	b.n	8004e5e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004db6:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dbc:	4a86      	ldr	r2, [pc, #536]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fe f878 	bl	8002ebc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e2b7      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004dde:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ed      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x824>
 8004dec:	e037      	b.n	8004e5e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004dee:	f7fe f865 	bl	8002ebc <HAL_GetTick>
 8004df2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fe f861 	bl	8002ebc <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e2a0      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e0c:	4b72      	ldr	r3, [pc, #456]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ed      	bne.n	8004df6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01a      	beq.n	8004e5e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e28:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e2e:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fe f83f 	bl	8002ebc <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e27e      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e50:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ed      	bne.n	8004e3a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e66:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e6e:	f023 0304 	bic.w	r3, r3, #4
 8004e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d036      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004e8a:	4b53      	ldr	r3, [pc, #332]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a52      	ldr	r2, [pc, #328]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004e90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e94:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004e96:	f7fe f811 	bl	8002ebc <HAL_GetTick>
 8004e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9e:	f7fe f80d 	bl	8002ebc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e24e      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004eb0:	4b49      	ldr	r3, [pc, #292]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x8fa>
 8004ebc:	e018      	b.n	8004ef0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004ebe:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a45      	ldr	r2, [pc, #276]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004eca:	f7fd fff7 	bl	8002ebc <HAL_GetTick>
 8004ece:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed2:	f7fd fff3 	bl	8002ebc <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e234      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d036      	beq.n	8004f6a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d019      	beq.n	8004f38 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004f04:	4b34      	ldr	r3, [pc, #208]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a33      	ldr	r2, [pc, #204]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f10:	f7fd ffd4 	bl	8002ebc <HAL_GetTick>
 8004f14:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004f18:	f7fd ffd0 	bl	8002ebc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e211      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x974>
 8004f36:	e018      	b.n	8004f6a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f42:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f44:	f7fd ffba 	bl	8002ebc <HAL_GetTick>
 8004f48:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004f4c:	f7fd ffb6 	bl	8002ebc <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1f7      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d07f      	beq.n	8005076 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d062      	beq.n	8005044 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004f7e:	4b16      	ldr	r3, [pc, #88]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	4910      	ldr	r1, [pc, #64]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004fa4:	d309      	bcc.n	8004fba <HAL_RCC_OscConfig+0xa16>
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f023 021f 	bic.w	r2, r3, #31
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	4909      	ldr	r1, [pc, #36]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
 8004fb8:	e02a      	b.n	8005010 <HAL_RCC_OscConfig+0xa6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da0c      	bge.n	8004fdc <HAL_RCC_OscConfig+0xa38>
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	015b      	lsls	r3, r3, #5
 8004fd0:	4901      	ldr	r1, [pc, #4]	@ (8004fd8 <HAL_RCC_OscConfig+0xa34>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
 8004fd6:	e01b      	b.n	8005010 <HAL_RCC_OscConfig+0xa6c>
 8004fd8:	46020c00 	.word	0x46020c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe4:	d30a      	bcc.n	8004ffc <HAL_RCC_OscConfig+0xa58>
 8004fe6:	4ba1      	ldr	r3, [pc, #644]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	499d      	ldr	r1, [pc, #628]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
 8004ffa:	e009      	b.n	8005010 <HAL_RCC_OscConfig+0xa6c>
 8004ffc:	4b9b      	ldr	r3, [pc, #620]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	03db      	lsls	r3, r3, #15
 800500a:	4998      	ldr	r1, [pc, #608]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005010:	4b96      	ldr	r3, [pc, #600]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a95      	ldr	r2, [pc, #596]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800501c:	f7fd ff4e 	bl	8002ebc <HAL_GetTick>
 8005020:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005024:	f7fd ff4a 	bl	8002ebc <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e18b      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005036:	4b8d      	ldr	r3, [pc, #564]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0xa80>
 8005042:	e018      	b.n	8005076 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005044:	4b89      	ldr	r3, [pc, #548]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a88      	ldr	r2, [pc, #544]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800504a:	f023 0310 	bic.w	r3, r3, #16
 800504e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005050:	f7fd ff34 	bl	8002ebc <HAL_GetTick>
 8005054:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005058:	f7fd ff30 	bl	8002ebc <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e171      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800506a:	4b80      	ldr	r3, [pc, #512]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8166 	beq.w	800534c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005086:	4b79      	ldr	r3, [pc, #484]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b0c      	cmp	r3, #12
 8005090:	f000 80f2 	beq.w	8005278 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	2b02      	cmp	r3, #2
 800509a:	f040 80c5 	bne.w	8005228 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800509e:	4b73      	ldr	r3, [pc, #460]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a72      	ldr	r2, [pc, #456]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050aa:	f7fd ff07 	bl	8002ebc <HAL_GetTick>
 80050ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b2:	f7fd ff03 	bl	8002ebc <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e144      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050c4:	4b69      	ldr	r3, [pc, #420]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f0      	bne.n	80050b2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d0:	4b66      	ldr	r3, [pc, #408]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d111      	bne.n	8005102 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	4b63      	ldr	r3, [pc, #396]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e4:	4a61      	ldr	r2, [pc, #388]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050ee:	4b5f      	ldr	r3, [pc, #380]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80050f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005102:	4b5b      	ldr	r3, [pc, #364]	@ (8005270 <HAL_RCC_OscConfig+0xccc>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800510a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800510e:	d102      	bne.n	8005116 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005116:	4b56      	ldr	r3, [pc, #344]	@ (8005270 <HAL_RCC_OscConfig+0xccc>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a55      	ldr	r2, [pc, #340]	@ (8005270 <HAL_RCC_OscConfig+0xccc>)
 800511c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005120:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005122:	4b52      	ldr	r3, [pc, #328]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005136:	3a01      	subs	r2, #1
 8005138:	0212      	lsls	r2, r2, #8
 800513a:	4311      	orrs	r1, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005140:	430a      	orrs	r2, r1
 8005142:	494a      	ldr	r1, [pc, #296]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	628b      	str	r3, [r1, #40]	@ 0x28
 8005148:	4b48      	ldr	r3, [pc, #288]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800514a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800514c:	4b49      	ldr	r3, [pc, #292]	@ (8005274 <HAL_RCC_OscConfig+0xcd0>)
 800514e:	4013      	ands	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005154:	3a01      	subs	r2, #1
 8005156:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800515e:	3a01      	subs	r2, #1
 8005160:	0252      	lsls	r2, r2, #9
 8005162:	b292      	uxth	r2, r2
 8005164:	4311      	orrs	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800516a:	3a01      	subs	r2, #1
 800516c:	0412      	lsls	r2, r2, #16
 800516e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005172:	4311      	orrs	r1, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005178:	3a01      	subs	r2, #1
 800517a:	0612      	lsls	r2, r2, #24
 800517c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005180:	430a      	orrs	r2, r1
 8005182:	493a      	ldr	r1, [pc, #232]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005188:	4b38      	ldr	r3, [pc, #224]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	4a37      	ldr	r2, [pc, #220]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	4a34      	ldr	r2, [pc, #208]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800519e:	4b33      	ldr	r3, [pc, #204]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	4a32      	ldr	r2, [pc, #200]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051a4:	f043 0310 	orr.w	r3, r3, #16
 80051a8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80051aa:	4b30      	ldr	r3, [pc, #192]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	f023 020c 	bic.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b6:	492d      	ldr	r1, [pc, #180]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80051bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80051c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005270 <HAL_RCC_OscConfig+0xccc>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <HAL_RCC_OscConfig+0xccc>)
 80051ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051ce:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80051d0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80051d8:	4b24      	ldr	r3, [pc, #144]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051de:	4a23      	ldr	r2, [pc, #140]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80051e8:	4b20      	ldr	r3, [pc, #128]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 80051ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051f4:	f7fd fe62 	bl	8002ebc <HAL_GetTick>
 80051f8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd fe5e 	bl	8002ebc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e09f      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800520e:	4b17      	ldr	r3, [pc, #92]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800521a:	4b14      	ldr	r3, [pc, #80]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	4a13      	ldr	r2, [pc, #76]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005224:	6293      	str	r3, [r2, #40]	@ 0x28
 8005226:	e091      	b.n	800534c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005228:	4b10      	ldr	r3, [pc, #64]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0f      	ldr	r2, [pc, #60]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800522e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005232:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005234:	f7fd fe42 	bl	8002ebc <HAL_GetTick>
 8005238:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523c:	f7fd fe3e 	bl	8002ebc <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e07f      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800525a:	4b04      	ldr	r3, [pc, #16]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	4a03      	ldr	r2, [pc, #12]	@ (800526c <HAL_RCC_OscConfig+0xcc8>)
 8005260:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005264:	f023 0303 	bic.w	r3, r3, #3
 8005268:	6293      	str	r3, [r2, #40]	@ 0x28
 800526a:	e06f      	b.n	800534c <HAL_RCC_OscConfig+0xda8>
 800526c:	46020c00 	.word	0x46020c00
 8005270:	46020800 	.word	0x46020800
 8005274:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005278:	4b37      	ldr	r3, [pc, #220]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800527e:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 8005280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005282:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2b01      	cmp	r3, #1
 800528a:	d039      	beq.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0203 	and.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d132      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d129      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d122      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d11a      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	0a5b      	lsrs	r3, r3, #9
 80052ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d111      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d108      	bne.n	8005300 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	0e1b      	lsrs	r3, r3, #24
 80052f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e024      	b.n	800534e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005304:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005312:	429a      	cmp	r2, r3
 8005314:	d01a      	beq.n	800534c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	4a0f      	ldr	r2, [pc, #60]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fd fdcb 	bl	8002ebc <HAL_GetTick>
 8005326:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005328:	bf00      	nop
 800532a:	f7fd fdc7 	bl	8002ebc <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	4293      	cmp	r3, r2
 8005334:	d0f9      	beq.n	800532a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533a:	4a07      	ldr	r2, [pc, #28]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	4a04      	ldr	r2, [pc, #16]	@ (8005358 <HAL_RCC_OscConfig+0xdb4>)
 8005346:	f043 0310 	orr.w	r3, r3, #16
 800534a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3738      	adds	r7, #56	@ 0x38
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	46020c00 	.word	0x46020c00

0800535c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e1d9      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b9b      	ldr	r3, [pc, #620]	@ (80055e0 <HAL_RCC_ClockConfig+0x284>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b98      	ldr	r3, [pc, #608]	@ (80055e0 <HAL_RCC_ClockConfig+0x284>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	4996      	ldr	r1, [pc, #600]	@ (80055e0 <HAL_RCC_ClockConfig+0x284>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b94      	ldr	r3, [pc, #592]	@ (80055e0 <HAL_RCC_ClockConfig+0x284>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e1c1      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	4b8c      	ldr	r3, [pc, #560]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d908      	bls.n	80053ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80053bc:	4b89      	ldr	r3, [pc, #548]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4986      	ldr	r1, [pc, #536]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d012      	beq.n	8005400 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	4b81      	ldr	r3, [pc, #516]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d909      	bls.n	8005400 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80053ec:	4b7d      	ldr	r3, [pc, #500]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	497a      	ldr	r1, [pc, #488]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	4b74      	ldr	r3, [pc, #464]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005418:	429a      	cmp	r2, r3
 800541a:	d908      	bls.n	800542e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800541c:	4b71      	ldr	r3, [pc, #452]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	496e      	ldr	r1, [pc, #440]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 800542a:	4313      	orrs	r3, r2
 800542c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	4b69      	ldr	r3, [pc, #420]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	429a      	cmp	r2, r3
 8005448:	d908      	bls.n	800545c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800544a:	4b66      	ldr	r3, [pc, #408]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 020f 	bic.w	r2, r3, #15
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4963      	ldr	r1, [pc, #396]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005458:	4313      	orrs	r3, r2
 800545a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80d2 	beq.w	800560e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b03      	cmp	r3, #3
 8005474:	d143      	bne.n	80054fe <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b5b      	ldr	r3, [pc, #364]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d110      	bne.n	80054a6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	4b57      	ldr	r3, [pc, #348]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548a:	4a56      	ldr	r2, [pc, #344]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 800548c:	f043 0304 	orr.w	r3, r3, #4
 8005490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005494:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80054a6:	f7fd fd09 	bl	8002ebc <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80054ac:	4b4e      	ldr	r3, [pc, #312]	@ (80055e8 <HAL_RCC_ClockConfig+0x28c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00f      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80054ba:	f7fd fcff 	bl	8002ebc <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e12b      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80054cc:	4b46      	ldr	r3, [pc, #280]	@ (80055e8 <HAL_RCC_ClockConfig+0x28c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e4:	4a3f      	ldr	r2, [pc, #252]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054ee:	4b3d      	ldr	r3, [pc, #244]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d121      	bne.n	800553e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e112      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e106      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800551e:	4b31      	ldr	r3, [pc, #196]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e0fa      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552e:	4b2d      	ldr	r3, [pc, #180]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0f2      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b29      	ldr	r3, [pc, #164]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4926      	ldr	r1, [pc, #152]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 800554c:	4313      	orrs	r3, r2
 800554e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005550:	f7fd fcb4 	bl	8002ebc <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d112      	bne.n	8005584 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fd fcac 	bl	8002ebc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0d6      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005576:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d1ee      	bne.n	8005560 <HAL_RCC_ClockConfig+0x204>
 8005582:	e044      	b.n	800560e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d112      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558e:	f7fd fc95 	bl	8002ebc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0bf      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d1ee      	bne.n	800558e <HAL_RCC_ClockConfig+0x232>
 80055b0:	e02d      	b.n	800560e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d123      	bne.n	8005602 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055bc:	f7fd fc7e 	bl	8002ebc <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0a8      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055d2:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <HAL_RCC_ClockConfig+0x288>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_ClockConfig+0x260>
 80055de:	e016      	b.n	800560e <HAL_RCC_ClockConfig+0x2b2>
 80055e0:	40022000 	.word	0x40022000
 80055e4:	46020c00 	.word	0x46020c00
 80055e8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ec:	f7fd fc66 	bl	8002ebc <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e090      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005602:	4b4a      	ldr	r3, [pc, #296]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b04      	cmp	r3, #4
 800560c:	d1ee      	bne.n	80055ec <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	4b43      	ldr	r3, [pc, #268]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	429a      	cmp	r2, r3
 8005628:	d208      	bcs.n	800563c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800562a:	4b40      	ldr	r3, [pc, #256]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 020f 	bic.w	r2, r3, #15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	493d      	ldr	r1, [pc, #244]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 8005638:	4313      	orrs	r3, r2
 800563a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b3c      	ldr	r3, [pc, #240]	@ (8005730 <HAL_RCC_ClockConfig+0x3d4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d210      	bcs.n	800566c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <HAL_RCC_ClockConfig+0x3d4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	4937      	ldr	r1, [pc, #220]	@ (8005730 <HAL_RCC_ClockConfig+0x3d4>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b35      	ldr	r3, [pc, #212]	@ (8005730 <HAL_RCC_ClockConfig+0x3d4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e05b      	b.n	8005724 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	4b2b      	ldr	r3, [pc, #172]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005684:	429a      	cmp	r2, r3
 8005686:	d208      	bcs.n	800569a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005688:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4925      	ldr	r1, [pc, #148]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d012      	beq.n	80056cc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	4b20      	ldr	r3, [pc, #128]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d209      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80056b8:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	4919      	ldr	r1, [pc, #100]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	4b13      	ldr	r3, [pc, #76]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d208      	bcs.n	80056fa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80056e8:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	490d      	ldr	r1, [pc, #52]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80056fa:	f000 f821 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_ClockConfig+0x3d0>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	490a      	ldr	r1, [pc, #40]	@ (8005734 <HAL_RCC_ClockConfig+0x3d8>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
 8005710:	4a09      	ldr	r2, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x3dc>)
 8005712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005714:	4b09      	ldr	r3, [pc, #36]	@ (800573c <HAL_RCC_ClockConfig+0x3e0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f7fd fb45 	bl	8002da8 <HAL_InitTick>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]

  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	46020c00 	.word	0x46020c00
 8005730:	40022000 	.word	0x40022000
 8005734:	0800c4b0 	.word	0x0800c4b0
 8005738:	20000008 	.word	0x20000008
 800573c:	2000000c 	.word	0x2000000c

08005740 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	b08b      	sub	sp, #44	@ 0x2c
 8005744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574e:	4b78      	ldr	r3, [pc, #480]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005758:	4b75      	ldr	r3, [pc, #468]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x34>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b0c      	cmp	r3, #12
 800576c:	d121      	bne.n	80057b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11e      	bne.n	80057b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005774:	4b6e      	ldr	r3, [pc, #440]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005780:	4b6b      	ldr	r3, [pc, #428]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005786:	0b1b      	lsrs	r3, r3, #12
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	e005      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005790:	4b67      	ldr	r3, [pc, #412]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	0f1b      	lsrs	r3, r3, #28
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800579c:	4a65      	ldr	r2, [pc, #404]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d110      	bne.n	80057ce <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057b0:	e00d      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057be:	4b5e      	ldr	r3, [pc, #376]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e004      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80057cc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b0c      	cmp	r3, #12
 80057d2:	f040 80a5 	bne.w	8005920 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80057d6:	4b56      	ldr	r3, [pc, #344]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80057e0:	4b53      	ldr	r3, [pc, #332]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80057ee:	4b50      	ldr	r3, [pc, #320]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d003      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0xe4>
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b03      	cmp	r3, #3
 8005820:	d022      	beq.n	8005868 <HAL_RCC_GetSysClockFreq+0x128>
 8005822:	e043      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800593c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b3e      	ldr	r3, [pc, #248]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005846:	ed97 6a01 	vldr	s12, [r7, #4]
 800584a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005940 <HAL_RCC_GetSysClockFreq+0x200>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005866:	e046      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800593c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b2d      	ldr	r3, [pc, #180]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800587c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800588a:	ed97 6a01 	vldr	s12, [r7, #4]
 800588e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005940 <HAL_RCC_GetSysClockFreq+0x200>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058aa:	e024      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058d4:	ed97 6a01 	vldr	s12, [r7, #4]
 80058d8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005940 <HAL_RCC_GetSysClockFreq+0x200>
 80058dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005900:	3301      	adds	r3, #1
 8005902:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591a:	ee17 3a90 	vmov	r3, s15
 800591e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005920:	6a3b      	ldr	r3, [r7, #32]
}
 8005922:	4618      	mov	r0, r3
 8005924:	372c      	adds	r7, #44	@ 0x2c
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	46020c00 	.word	0x46020c00
 8005934:	0800c4c8 	.word	0x0800c4c8
 8005938:	00f42400 	.word	0x00f42400
 800593c:	4b742400 	.word	0x4b742400
 8005940:	46000000 	.word	0x46000000

08005944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005948:	f7ff fefa 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b07      	ldr	r3, [pc, #28]	@ (800596c <HAL_RCC_GetHCLKFreq+0x28>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	4906      	ldr	r1, [pc, #24]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005958:	5ccb      	ldrb	r3, [r1, r3]
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	4a05      	ldr	r2, [pc, #20]	@ (8005974 <HAL_RCC_GetHCLKFreq+0x30>)
 8005960:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005962:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <HAL_RCC_GetHCLKFreq+0x30>)
 8005964:	681b      	ldr	r3, [r3, #0]
}
 8005966:	4618      	mov	r0, r3
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	46020c00 	.word	0x46020c00
 8005970:	0800c4b0 	.word	0x0800c4b0
 8005974:	20000008 	.word	0x20000008

08005978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800597c:	f7ff ffe2 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4903      	ldr	r1, [pc, #12]	@ (800599c <HAL_RCC_GetPCLK1Freq+0x24>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	46020c00 	.word	0x46020c00
 800599c:	0800c4c0 	.word	0x0800c4c0

080059a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80059a4:	f7ff ffce 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	@ (80059c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	46020c00 	.word	0x46020c00
 80059c4:	0800c4c0 	.word	0x0800c4c0

080059c8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80059cc:	f7ff ffba 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK3Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	46020c00 	.word	0x46020c00
 80059ec:	0800c4c0 	.word	0x0800c4c0

080059f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059f8:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a06:	f7fe fd6f 	bl	80044e8 <HAL_PWREx_GetVoltageRange>
 8005a0a:	6178      	str	r0, [r7, #20]
 8005a0c:	e019      	b.n	8005a42 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a0e:	4b39      	ldr	r3, [pc, #228]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a14:	4a37      	ldr	r2, [pc, #220]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005a16:	f043 0304 	orr.w	r3, r3, #4
 8005a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a1e:	4b35      	ldr	r3, [pc, #212]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a2c:	f7fe fd5c 	bl	80044e8 <HAL_PWREx_GetVoltageRange>
 8005a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a32:	4b30      	ldr	r3, [pc, #192]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a38:	4a2e      	ldr	r2, [pc, #184]	@ (8005af4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005a3a:	f023 0304 	bic.w	r3, r3, #4
 8005a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a48:	d003      	beq.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a50:	d109      	bne.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a58:	d202      	bcs.n	8005a60 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005a5e:	e033      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005a64:	e030      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a6c:	d208      	bcs.n	8005a80 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a74:	d102      	bne.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005a76:	2303      	movs	r3, #3
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e025      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e035      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a86:	d90f      	bls.n	8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a94:	d902      	bls.n	8005a9c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e015      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	e012      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e00f      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aae:	d109      	bne.n	8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab6:	d102      	bne.n	8005abe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005ab8:	2301      	movs	r3, #1
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	e004      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005abe:	2302      	movs	r3, #2
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e001      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 020f 	bic.w	r2, r3, #15
 8005ad0:	4909      	ldr	r1, [pc, #36]	@ (8005af8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005ad8:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d001      	beq.n	8005aea <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	46020c00 	.word	0x46020c00
 8005af8:	40022000 	.word	0x40022000

08005afc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b0b6      	sub	sp, #216	@ 0xd8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f002 0401 	and.w	r4, r2, #1
 8005b20:	2500      	movs	r5, #0
 8005b22:	ea54 0305 	orrs.w	r3, r4, r5
 8005b26:	d00b      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005b28:	4bc5      	ldr	r3, [pc, #788]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b2e:	f023 0103 	bic.w	r1, r3, #3
 8005b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	4ac1      	ldr	r2, [pc, #772]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f002 0804 	and.w	r8, r2, #4
 8005b4c:	f04f 0900 	mov.w	r9, #0
 8005b50:	ea58 0309 	orrs.w	r3, r8, r9
 8005b54:	d00b      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b56:	4bba      	ldr	r3, [pc, #744]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	4ab6      	ldr	r2, [pc, #728]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f002 0a08 	and.w	sl, r2, #8
 8005b7a:	f04f 0b00 	mov.w	fp, #0
 8005b7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b82:	d00b      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005b84:	4bae      	ldr	r3, [pc, #696]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	4aaa      	ldr	r2, [pc, #680]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f002 0310 	and.w	r3, r2, #16
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005bb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005bbc:	4ba0      	ldr	r3, [pc, #640]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f002 0320 	and.w	r3, r2, #32
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005bf4:	4b92      	ldr	r3, [pc, #584]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bfa:	f023 0107 	bic.w	r1, r3, #7
 8005bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c04:	4a8e      	ldr	r2, [pc, #568]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c26:	460b      	mov	r3, r1
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005c2c:	4b84      	ldr	r3, [pc, #528]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c32:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c3c:	4a80      	ldr	r2, [pc, #512]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005c50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c5a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005c64:	4b76      	ldr	r3, [pc, #472]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c74:	4a72      	ldr	r2, [pc, #456]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c76:	430b      	orrs	r3, r1
 8005c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c9c:	4b68      	ldr	r3, [pc, #416]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ca2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cac:	4a64      	ldr	r2, [pc, #400]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cda:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a56      	ldr	r2, [pc, #344]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005d06:	460b      	mov	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d12:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1c:	4a48      	ldr	r2, [pc, #288]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005d44:	4b3e      	ldr	r3, [pc, #248]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d4a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d54:	4a3a      	ldr	r2, [pc, #232]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d6e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005d78:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d88:	4a2d      	ldr	r2, [pc, #180]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d9e:	2300      	movs	r3, #0
 8005da0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005da2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005da6:	460b      	mov	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	d04f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db4:	2b80      	cmp	r3, #128	@ 0x80
 8005db6:	d02d      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005db8:	2b80      	cmp	r3, #128	@ 0x80
 8005dba:	d827      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dbc:	2b60      	cmp	r3, #96	@ 0x60
 8005dbe:	d02b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005dc0:	2b60      	cmp	r3, #96	@ 0x60
 8005dc2:	d823      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dc4:	2b40      	cmp	r3, #64	@ 0x40
 8005dc6:	d006      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005dc8:	2b40      	cmp	r3, #64	@ 0x40
 8005dca:	d81f      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d011      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005dd4:	e01a      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	4a19      	ldr	r2, [pc, #100]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005de2:	e01a      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005de8:	3308      	adds	r3, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 f914 	bl	8008018 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005df6:	e010      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dfc:	332c      	adds	r3, #44	@ 0x2c
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f002 f9a2 	bl	8008148 <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e0a:	e006      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005e12:	e002      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005e14:	bf00      	nop
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d110      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e22:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e28:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e34:	4a02      	ldr	r2, [pc, #8]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e3c:	e006      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005e3e:	bf00      	nop
 8005e40:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005e48:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d046      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e74:	d028      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e76:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e7a:	d821      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e80:	d022      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e86:	d81b      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005e88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e8c:	d01c      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e92:	d815      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e98:	d008      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9e:	d80f      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d011      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005eaa:	e009      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f002 f8b0 	bl	8008018 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005ed2:	4bb6      	ldr	r3, [pc, #728]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ed8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ee4:	4ab1      	ldr	r2, [pc, #708]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ef2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005f02:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f04:	2300      	movs	r3, #0
 8005f06:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d03e      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d81d      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f63 	.word	0x08005f63
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f47 	.word	0x08005f47
 8005f30:	08005f63 	.word	0x08005f63
 8005f34:	08005f63 	.word	0x08005f63
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f38:	4b9c      	ldr	r3, [pc, #624]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	4a9b      	ldr	r2, [pc, #620]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f42:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005f44:	e00e      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f4a:	332c      	adds	r3, #44	@ 0x2c
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f002 f8fb 	bl	8008148 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005f58:	e004      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8005f62:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f64:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005f6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f72:	f023 0107 	bic.w	r1, r3, #7
 8005f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7e:	4a8b      	ldr	r2, [pc, #556]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005f8c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d04a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fb8:	d028      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fbe:	d821      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005fc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fc4:	d024      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005fc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fca:	d81b      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fd0:	d00e      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fd6:	d815      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe0:	d110      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fe2:	4b72      	ldr	r3, [pc, #456]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	4a71      	ldr	r2, [pc, #452]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fec:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005fee:	e012      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ff4:	332c      	adds	r3, #44	@ 0x2c
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 f8a6 	bl	8008148 <RCCEx_PLL3_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006014:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006016:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800601e:	4b63      	ldr	r3, [pc, #396]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006024:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006030:	4a5e      	ldr	r2, [pc, #376]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006032:	430b      	orrs	r3, r1
 8006034:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800603e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800604e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006050:	2300      	movs	r3, #0
 8006052:	657b      	str	r3, [r7, #84]	@ 0x54
 8006054:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	f000 80ba 	beq.w	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006060:	2300      	movs	r3, #0
 8006062:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006066:	4b51      	ldr	r3, [pc, #324]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d113      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006074:	4b4d      	ldr	r3, [pc, #308]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607a:	4a4c      	ldr	r2, [pc, #304]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006084:	4b49      	ldr	r3, [pc, #292]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800609c:	4b44      	ldr	r3, [pc, #272]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	4a43      	ldr	r2, [pc, #268]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a8:	f7fc ff08 	bl	8002ebc <HAL_GetTick>
 80060ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060b0:	e00b      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b2:	f7fc ff03 	bl	8002ebc <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d903      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80060c8:	e005      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ed      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80060d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d16a      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060de:	4b33      	ldr	r3, [pc, #204]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80060e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80060ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d023      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80060f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80060fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006100:	4293      	cmp	r3, r2
 8006102:	d01b      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006104:	4b29      	ldr	r3, [pc, #164]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800610a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006112:	4b26      	ldr	r3, [pc, #152]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006118:	4a24      	ldr	r2, [pc, #144]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800611a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006122:	4b22      	ldr	r3, [pc, #136]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006128:	4a20      	ldr	r2, [pc, #128]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800612a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006132:	4a1e      	ldr	r2, [pc, #120]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006138:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800613c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d019      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fc feb8 	bl	8002ebc <HAL_GetTick>
 800614c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	e00d      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006152:	f7fc feb3 	bl	8002ebc <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006162:	429a      	cmp	r2, r3
 8006164:	d903      	bls.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 800616c:	e006      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616e:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0ea      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 800617c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006184:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800618a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800618e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006192:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006196:	4a05      	ldr	r2, [pc, #20]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006198:	430b      	orrs	r3, r1
 800619a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800619e:	e00d      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061a0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80061a4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80061a8:	e008      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80061aa:	bf00      	nop
 80061ac:	46020c00 	.word	0x46020c00
 80061b0:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80061b8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061bc:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d107      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c4:	4bb2      	ldr	r3, [pc, #712]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80061c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ca:	4ab1      	ldr	r2, [pc, #708]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80061d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80061e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e2:	2300      	movs	r3, #0
 80061e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80061ea:	460b      	mov	r3, r1
 80061ec:	4313      	orrs	r3, r2
 80061ee:	d042      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80061f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061fc:	d022      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80061fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006202:	d81b      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006208:	d011      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x732>
 800620a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800620e:	d815      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d019      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006218:	d110      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800621a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800621e:	3308      	adds	r3, #8
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fef9 	bl	8008018 <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800622c:	e00d      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622e:	4b98      	ldr	r3, [pc, #608]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	4a97      	ldr	r2, [pc, #604]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006238:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800623a:	e006      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006248:	bf00      	nop
    }
    if (ret == HAL_OK)
 800624a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10d      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006252:	4b8f      	ldr	r3, [pc, #572]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006258:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800625c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006264:	4a8a      	ldr	r2, [pc, #552]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006266:	430b      	orrs	r3, r1
 8006268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006272:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006282:	643b      	str	r3, [r7, #64]	@ 0x40
 8006284:	2300      	movs	r3, #0
 8006286:	647b      	str	r3, [r7, #68]	@ 0x44
 8006288:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d02d      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629e:	d00b      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a4:	d804      	bhi.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	d007      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80062b6:	e004      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80062b8:	bf00      	nop
 80062ba:	e002      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80062c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80062ca:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80062cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062dc:	4a6c      	ldr	r2, [pc, #432]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062e4:	e003      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80062ea:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80062ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062fc:	2300      	movs	r3, #0
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006300:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006304:	460b      	mov	r3, r1
 8006306:	4313      	orrs	r3, r2
 8006308:	d00c      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800630a:	4b61      	ldr	r3, [pc, #388]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800630c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006310:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800631c:	4a5c      	ldr	r2, [pc, #368]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800631e:	430b      	orrs	r3, r1
 8006320:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006330:	633b      	str	r3, [r7, #48]	@ 0x30
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	@ 0x34
 8006336:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d019      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800634c:	d105      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800634e:	4b50      	ldr	r3, [pc, #320]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	4a4f      	ldr	r2, [pc, #316]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006358:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800635a:	4b4d      	ldr	r3, [pc, #308]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800635c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006360:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800636c:	4a48      	ldr	r2, [pc, #288]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800636e:	430b      	orrs	r3, r1
 8006370:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006382:	2300      	movs	r3, #0
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006386:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d00c      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006390:	4b3f      	ldr	r3, [pc, #252]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800639a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800639e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063a2:	493b      	ldr	r1, [pc, #236]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80063aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80063bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80063c0:	460b      	mov	r3, r1
 80063c2:	4313      	orrs	r3, r2
 80063c4:	d00c      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80063c6:	4b32      	ldr	r3, [pc, #200]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063d8:	492d      	ldr	r1, [pc, #180]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80063e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d00c      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80063fc:	4b24      	ldr	r3, [pc, #144]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006402:	f023 0218 	bic.w	r2, r3, #24
 8006406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800640a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800640e:	4920      	ldr	r1, [pc, #128]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d034      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800643a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800643e:	d105      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006440:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	4a12      	ldr	r2, [pc, #72]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800644c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006454:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006458:	d108      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800645a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800645e:	3308      	adds	r3, #8
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fdd9 	bl	8008018 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 800646c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10f      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800647a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800647e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006486:	4902      	ldr	r1, [pc, #8]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800648e:	e005      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006490:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006498:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800649c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d03a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80064b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064c4:	d00e      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80064c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ca:	d815      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80064d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064d4:	d110      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d6:	4b27      	ldr	r3, [pc, #156]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	4a26      	ldr	r2, [pc, #152]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80064e2:	e00e      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064e8:	3308      	adds	r3, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fd94 	bl	8008018 <RCCEx_PLL2_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8006500:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006502:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800650a:	4b1a      	ldr	r3, [pc, #104]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800650c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006510:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651c:	4915      	ldr	r1, [pc, #84]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800652a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800652e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d00c      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800654a:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800654c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006550:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800655c:	4905      	ldr	r1, [pc, #20]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006564:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8006568:	4618      	mov	r0, r3
 800656a:	37d8      	adds	r7, #216	@ 0xd8
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	46020c00 	.word	0x46020c00

08006578 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	@ 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006580:	4ba6      	ldr	r3, [pc, #664]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006588:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800658a:	4ba4      	ldr	r3, [pc, #656]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006594:	4ba1      	ldr	r3, [pc, #644]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	3301      	adds	r3, #1
 80065a0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80065a2:	4b9e      	ldr	r3, [pc, #632]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80065ae:	4b9b      	ldr	r3, [pc, #620]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b2:	08db      	lsrs	r3, r3, #3
 80065b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d062      	beq.n	8006696 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	f200 8081 	bhi.w	80066da <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d024      	beq.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d17a      	bne.n	80066da <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b89      	ldr	r3, [pc, #548]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006606:	ed97 6a02 	vldr	s12, [r7, #8]
 800660a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006626:	e08f      	b.n	8006748 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006628:	4b7c      	ldr	r3, [pc, #496]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006634:	4b79      	ldr	r3, [pc, #484]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	0f1b      	lsrs	r3, r3, #28
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	e006      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006640:	4b76      	ldr	r3, [pc, #472]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	4a76      	ldr	r2, [pc, #472]	@ (8006828 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006674:	ed97 6a02 	vldr	s12, [r7, #8]
 8006678:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800667c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006684:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006688:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006694:	e058      	b.n	8006748 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80066a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a8:	4b5c      	ldr	r3, [pc, #368]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066bc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80066c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d8:	e036      	b.n	8006748 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80066da:	4b50      	ldr	r3, [pc, #320]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80066e6:	4b4d      	ldr	r3, [pc, #308]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	0f1b      	lsrs	r3, r3, #28
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80066f2:	4b4a      	ldr	r3, [pc, #296]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	0f1b      	lsrs	r3, r3, #28
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	4a49      	ldr	r2, [pc, #292]	@ (8006828 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006726:	ed97 6a02 	vldr	s12, [r7, #8]
 800672a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800672e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800673e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006746:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006748:	4b34      	ldr	r3, [pc, #208]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d017      	beq.n	8006784 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006754:	4b31      	ldr	r3, [pc, #196]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800676a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800676e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677a:	ee17 2a90 	vmov	r2, s15
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e002      	b.n	800678a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006796:	4b21      	ldr	r3, [pc, #132]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80067a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067bc:	ee17 2a90 	vmov	r2, s15
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067d8:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006806:	e002      	b.n	800680e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	bf00      	nop
 8006810:	3724      	adds	r7, #36	@ 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	46020c00 	.word	0x46020c00
 8006820:	4b742400 	.word	0x4b742400
 8006824:	46000000 	.word	0x46000000
 8006828:	0800c4c8 	.word	0x0800c4c8

0800682c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800682c:	b480      	push	{r7}
 800682e:	b089      	sub	sp, #36	@ 0x24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006834:	4ba6      	ldr	r3, [pc, #664]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800683e:	4ba4      	ldr	r3, [pc, #656]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006848:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	3301      	adds	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006856:	4b9e      	ldr	r3, [pc, #632]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006862:	4b9b      	ldr	r3, [pc, #620]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d062      	beq.n	800694a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b03      	cmp	r3, #3
 8006888:	f200 8081 	bhi.w	800698e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d024      	beq.n	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d17a      	bne.n	800698e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b89      	ldr	r3, [pc, #548]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80068ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80068be:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068da:	e08f      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80068dc:	4b7c      	ldr	r3, [pc, #496]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80068e8:	4b79      	ldr	r3, [pc, #484]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	0f1b      	lsrs	r3, r3, #28
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	e006      	b.n	8006902 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80068f4:	4b76      	ldr	r3, [pc, #472]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	0f1b      	lsrs	r3, r3, #28
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	4a76      	ldr	r2, [pc, #472]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006928:	ed97 6a02 	vldr	s12, [r7, #8]
 800692c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800693c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006944:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006948:	e058      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006954:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800695e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800696c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006970:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006974:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006978:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800697c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006980:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006988:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800698c:	e036      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800698e:	4b50      	ldr	r3, [pc, #320]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800699a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	0f1b      	lsrs	r3, r3, #28
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	e006      	b.n	80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80069a6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	0f1b      	lsrs	r3, r3, #28
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	4a49      	ldr	r2, [pc, #292]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a02 	vldr	s12, [r7, #8]
 80069de:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069fa:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80069fc:	4b34      	ldr	r3, [pc, #208]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a08:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0c:	0a5b      	lsrs	r3, r3, #9
 8006a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2e:	ee17 2a90 	vmov	r2, s15
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006a3e:	4b24      	ldr	r3, [pc, #144]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d017      	beq.n	8006a7a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a4a:	4b21      	ldr	r3, [pc, #132]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a70:	ee17 2a90 	vmov	r2, s15
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	e002      	b.n	8006a80 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006a80:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d017      	beq.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a8c:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	0e1b      	lsrs	r3, r3, #24
 8006a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab2:	ee17 2a90 	vmov	r2, s15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
}
 8006ac2:	bf00      	nop
 8006ac4:	3724      	adds	r7, #36	@ 0x24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	46020c00 	.word	0x46020c00
 8006ad4:	4b742400 	.word	0x4b742400
 8006ad8:	46000000 	.word	0x46000000
 8006adc:	0800c4c8 	.word	0x0800c4c8

08006ae0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b089      	sub	sp, #36	@ 0x24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006ae8:	4ba6      	ldr	r3, [pc, #664]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006af2:	4ba4      	ldr	r3, [pc, #656]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006afc:	4ba1      	ldr	r3, [pc, #644]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	3301      	adds	r3, #1
 8006b08:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006b16:	4b9b      	ldr	r3, [pc, #620]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d062      	beq.n	8006bfe <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	f200 8081 	bhi.w	8006c42 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d024      	beq.n	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d17a      	bne.n	8006c42 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b89      	ldr	r3, [pc, #548]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b72:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006b8e:	e08f      	b.n	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006b90:	4b7c      	ldr	r3, [pc, #496]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006b9c:	4b79      	ldr	r3, [pc, #484]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0f1b      	lsrs	r3, r3, #28
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	e006      	b.n	8006bb6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006ba8:	4b76      	ldr	r3, [pc, #472]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	0f1b      	lsrs	r3, r3, #28
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	4a76      	ldr	r2, [pc, #472]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbc:	ee07 3a90 	vmov	s15, r3
 8006bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfc:	e058      	b.n	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c08:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c10:	4b5c      	ldr	r3, [pc, #368]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c40:	e036      	b.n	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006c42:	4b50      	ldr	r3, [pc, #320]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	0f1b      	lsrs	r3, r3, #28
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	0f1b      	lsrs	r3, r3, #28
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	4a49      	ldr	r2, [pc, #292]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c92:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cae:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006cb0:	4b34      	ldr	r3, [pc, #208]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d017      	beq.n	8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cbc:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc0:	0a5b      	lsrs	r3, r3, #9
 8006cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce2:	ee17 2a90 	vmov	r2, s15
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e002      	b.n	8006cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006cf2:	4b24      	ldr	r3, [pc, #144]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d017      	beq.n	8006d2e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cfe:	4b21      	ldr	r3, [pc, #132]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006d10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d24:	ee17 2a90 	vmov	r2, s15
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	e002      	b.n	8006d34 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006d34:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d40:	4b10      	ldr	r3, [pc, #64]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d44:	0e1b      	lsrs	r3, r3, #24
 8006d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d66:	ee17 2a90 	vmov	r2, s15
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d6e:	e002      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	3724      	adds	r7, #36	@ 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	46020c00 	.word	0x46020c00
 8006d88:	4b742400 	.word	0x4b742400
 8006d8c:	46000000 	.word	0x46000000
 8006d90:	0800c4c8 	.word	0x0800c4c8

08006d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08e      	sub	sp, #56	@ 0x38
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006da6:	430b      	orrs	r3, r1
 8006da8:	d145      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006daa:	4b9b      	ldr	r3, [pc, #620]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006db6:	4b98      	ldr	r3, [pc, #608]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d108      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dca:	d104      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd2:	f001 b912 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006dd6:	4b90      	ldr	r3, [pc, #576]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de4:	d114      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dec:	d110      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dee:	4b8a      	ldr	r3, [pc, #552]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dfc:	d103      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006dfe:	23fa      	movs	r3, #250	@ 0xfa
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e02:	f001 b8fa 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e06:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e0c:	f001 b8f5 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006e10:	4b81      	ldr	r3, [pc, #516]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e24:	d103      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006e26:	4b7d      	ldr	r3, [pc, #500]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2a:	f001 b8e6 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e32:	f001 b8e2 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	d151      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e42:	4b75      	ldr	r3, [pc, #468]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006e44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e48:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006e4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	2b80      	cmp	r3, #128	@ 0x80
 8006e52:	d035      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	2b80      	cmp	r3, #128	@ 0x80
 8006e58:	d841      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2b60      	cmp	r3, #96	@ 0x60
 8006e5e:	d02a      	beq.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	2b60      	cmp	r3, #96	@ 0x60
 8006e64:	d83b      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	2b40      	cmp	r3, #64	@ 0x40
 8006e6a:	d009      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d835      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d012      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006e7e:	e02e      	b.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fb77 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8e:	f001 b8b4 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fcc8 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea0:	f001 b8ab 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea4:	f107 030c 	add.w	r3, r7, #12
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fe19 	bl	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eb2:	f001 b8a2 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006eb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ebc:	f001 b89d 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ec0:	4b55      	ldr	r3, [pc, #340]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ecc:	d103      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006ece:	4b54      	ldr	r3, [pc, #336]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ed2:	f001 b892 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eda:	f001 b88e 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ee2:	f001 b88a 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	d126      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006ef2:	4b49      	ldr	r3, [pc, #292]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ef4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006efc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006efe:	4b46      	ldr	r3, [pc, #280]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0a:	d106      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8006f12:	4b43      	ldr	r3, [pc, #268]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f16:	f001 b870 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f26:	d107      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2e:	d103      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8006f30:	4b3c      	ldr	r3, [pc, #240]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f34:	f001 b861 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3c:	f001 b85d 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f44:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	d171      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006f4c:	4b32      	ldr	r3, [pc, #200]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f52:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006f56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f5e:	d034      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f66:	d853      	bhi.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f6e:	d00b      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f76:	d84b      	bhi.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f84:	d009      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006f86:	e043      	b.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff faf3 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f96:	f001 b830 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9a:	f107 0318 	add.w	r3, r7, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fc44 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa8:	f001 b827 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006fac:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb8:	d103      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8006fba:	4b1b      	ldr	r3, [pc, #108]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fbe:	f001 b81c 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fc6:	f001 b818 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fca:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d118      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	0e1b      	lsrs	r3, r3, #24
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006fee:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	0e1b      	lsrs	r3, r3, #24
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007004:	f000 bff9 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800700c:	f000 bff5 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007014:	f000 bff1 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007018:	46020c00 	.word	0x46020c00
 800701c:	0007a120 	.word	0x0007a120
 8007020:	00f42400 	.word	0x00f42400
 8007024:	007a1200 	.word	0x007a1200
 8007028:	02dc6c00 	.word	0x02dc6c00
 800702c:	0800c4c8 	.word	0x0800c4c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007034:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007038:	430b      	orrs	r3, r1
 800703a:	d17f      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800703c:	4ba8      	ldr	r3, [pc, #672]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800703e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007046:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d165      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800704e:	4ba4      	ldr	r3, [pc, #656]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007054:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007060:	d034      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007068:	d853      	bhi.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007070:	d00b      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007078:	d84b      	bhi.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007086:	d009      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007088:	e043      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800708a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fa72 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007098:	f000 bfaf 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709c:	f107 0318 	add.w	r3, r7, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fbc3 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80070aa:	f000 bfa6 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80070ae:	4b8c      	ldr	r3, [pc, #560]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ba:	d103      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80070bc:	4b89      	ldr	r3, [pc, #548]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80070c0:	f000 bf9b 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80070c8:	f000 bf97 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070cc:	4b84      	ldr	r3, [pc, #528]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d118      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070d8:	4b81      	ldr	r3, [pc, #516]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80070e4:	4b7e      	ldr	r3, [pc, #504]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	0e1b      	lsrs	r3, r3, #24
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	e006      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80070f0:	4b7b      	ldr	r3, [pc, #492]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80070f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	0e1b      	lsrs	r3, r3, #24
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	4a7a      	ldr	r2, [pc, #488]	@ (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8007100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007106:	f000 bf78 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800710e:	f000 bf74 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007116:	f000 bf70 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007120:	d108      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fa26 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	f000 bf63 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
 8007138:	f000 bf5f 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	1e51      	subs	r1, r2, #1
 8007142:	430b      	orrs	r3, r1
 8007144:	d136      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007146:	4b66      	ldr	r3, [pc, #408]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007158:	f7fe fc22 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 800715c:	6378      	str	r0, [r7, #52]	@ 0x34
 800715e:	f000 bf4c 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b01      	cmp	r3, #1
 8007166:	d104      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007168:	f7fe faea 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800716c:	6378      	str	r0, [r7, #52]	@ 0x34
 800716e:	f000 bf44 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007172:	4b5b      	ldr	r3, [pc, #364]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d106      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	2b02      	cmp	r3, #2
 8007184:	d103      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8007186:	4b59      	ldr	r3, [pc, #356]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
 800718a:	f000 bf36 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800718e:	4b54      	ldr	r3, [pc, #336]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d104      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a8:	f000 bf27 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	f000 bf23 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	1f11      	subs	r1, r2, #4
 80071ba:	430b      	orrs	r3, r1
 80071bc:	d136      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80071be:	4b48      	ldr	r3, [pc, #288]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80071c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7fe fbd2 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80071d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071d6:	f000 bf10 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d104      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071e0:	f7fe faae 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80071e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071e6:	f000 bf08 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80071ea:	4b3d      	ldr	r3, [pc, #244]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f6:	d106      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d103      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80071fe:	4b3b      	ldr	r3, [pc, #236]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
 8007202:	f000 befa 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007206:	4b36      	ldr	r3, [pc, #216]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d107      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8007214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007216:	2b30      	cmp	r3, #48	@ 0x30
 8007218:	d104      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007220:	f000 beeb 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
 8007228:	f000 bee7 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800722c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007230:	f1a2 0108 	sub.w	r1, r2, #8
 8007234:	430b      	orrs	r3, r1
 8007236:	d136      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007238:	4b29      	ldr	r3, [pc, #164]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800723a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800723e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007242:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800724a:	f7fe fb95 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 800724e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007250:	f000 bed3 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d104      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800725a:	f7fe fa71 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800725e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007260:	f000 becb 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007264:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007270:	d106      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2b80      	cmp	r3, #128	@ 0x80
 8007276:	d103      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8007278:	4b1c      	ldr	r3, [pc, #112]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
 800727c:	f000 bebd 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007280:	4b17      	ldr	r3, [pc, #92]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d107      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	2bc0      	cmp	r3, #192	@ 0xc0
 8007292:	d104      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8007294:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
 800729a:	f000 beae 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a2:	f000 beaa 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80072a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072aa:	f1a2 0110 	sub.w	r1, r2, #16
 80072ae:	430b      	orrs	r3, r1
 80072b0:	d141      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80072b2:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80072b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072c4:	f7fe fb58 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80072c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80072ca:	f000 be96 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d4:	d10c      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072d6:	f7fe fa33 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80072da:	6378      	str	r0, [r7, #52]	@ 0x34
 80072dc:	f000 be8d 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80072e0:	46020c00 	.word	0x46020c00
 80072e4:	02dc6c00 	.word	0x02dc6c00
 80072e8:	0800c4c8 	.word	0x0800c4c8
 80072ec:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80072f0:	4baa      	ldr	r3, [pc, #680]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fc:	d107      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007304:	d103      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007306:	4ba6      	ldr	r3, [pc, #664]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
 800730a:	f000 be76 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800730e:	4ba3      	ldr	r3, [pc, #652]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b02      	cmp	r3, #2
 800731a:	d108      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007322:	d104      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8007324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	f000 be66 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	f000 be62 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800733a:	f1a2 0120 	sub.w	r1, r2, #32
 800733e:	430b      	orrs	r3, r1
 8007340:	d158      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007342:	4b96      	ldr	r3, [pc, #600]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007354:	f7fe fb38 	bl	80059c8 <HAL_RCC_GetPCLK3Freq>
 8007358:	6378      	str	r0, [r7, #52]	@ 0x34
 800735a:	f000 be4e 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	2b01      	cmp	r3, #1
 8007362:	d104      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007364:	f7fe f9ec 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007368:	6378      	str	r0, [r7, #52]	@ 0x34
 800736a:	f000 be46 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800736e:	4b8b      	ldr	r3, [pc, #556]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800737a:	d106      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8007382:	4b87      	ldr	r3, [pc, #540]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
 8007386:	f000 be38 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800738a:	4b84      	ldr	r3, [pc, #528]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800738c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b02      	cmp	r3, #2
 8007396:	d107      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	2b03      	cmp	r3, #3
 800739c:	d104      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800739e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	f000 be29 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80073a8:	4b7c      	ldr	r3, [pc, #496]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d11b      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d118      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073ba:	4b78      	ldr	r3, [pc, #480]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80073c6:	4b75      	ldr	r3, [pc, #468]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	0e1b      	lsrs	r3, r3, #24
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	e006      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80073d2:	4b72      	ldr	r3, [pc, #456]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80073d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073d8:	041b      	lsls	r3, r3, #16
 80073da:	0e1b      	lsrs	r3, r3, #24
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4a70      	ldr	r2, [pc, #448]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	f000 be07 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f0:	f000 be03 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80073f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80073fc:	430b      	orrs	r3, r1
 80073fe:	d16c      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007400:	4b66      	ldr	r3, [pc, #408]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007406:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800740a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007412:	d104      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007414:	f7fe f994 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007418:	6378      	str	r0, [r7, #52]	@ 0x34
 800741a:	f000 bdee 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007424:	d108      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007426:	f107 0318 	add.w	r3, r7, #24
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff f9fe 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
 8007434:	f000 bde1 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800743e:	f7fe fa81 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 8007442:	6378      	str	r0, [r7, #52]	@ 0x34
 8007444:	f000 bdd9 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800744e:	d122      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007450:	4b52      	ldr	r3, [pc, #328]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b20      	cmp	r3, #32
 800745a:	d118      	bne.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800745c:	4b4f      	ldr	r3, [pc, #316]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007468:	4b4c      	ldr	r3, [pc, #304]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	0e1b      	lsrs	r3, r3, #24
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007474:	4b49      	ldr	r3, [pc, #292]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	0e1b      	lsrs	r3, r3, #24
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	4a48      	ldr	r2, [pc, #288]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
 800748a:	f000 bdb6 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	f000 bdb2 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007496:	4b41      	ldr	r3, [pc, #260]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074a2:	d107      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074aa:	d103      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80074ac:	4b3c      	ldr	r3, [pc, #240]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b0:	f000 bda3 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80074b4:	4b39      	ldr	r3, [pc, #228]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c0:	d107      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074c8:	d103      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80074ca:	4b35      	ldr	r3, [pc, #212]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ce:	f000 bd94 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d6:	f000 bd90 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80074da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80074e2:	430b      	orrs	r3, r1
 80074e4:	d160      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80074e6:	4b2d      	ldr	r3, [pc, #180]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80074e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d84c      	bhi.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80074f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007539 	.word	0x08007539
 8007504:	08007515 	.word	0x08007515
 8007508:	08007527 	.word	0x08007527
 800750c:	08007543 	.word	0x08007543
 8007510:	0800754d 	.word	0x0800754d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff f82d 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007522:	f000 bd6a 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fad8 	bl	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007534:	f000 bd61 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007538:	f7fe fa04 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 800753c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800753e:	f000 bd5c 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007542:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007548:	f000 bd57 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800754c:	4b13      	ldr	r3, [pc, #76]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b20      	cmp	r3, #32
 8007556:	d118      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007558:	4b10      	ldr	r3, [pc, #64]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007564:	4b0d      	ldr	r3, [pc, #52]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	e006      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007570:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	0e1b      	lsrs	r3, r3, #24
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	4a09      	ldr	r2, [pc, #36]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007586:	f000 bd38 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800758e:	f000 bd34 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007596:	f000 bd30 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800759a:	bf00      	nop
 800759c:	46020c00 	.word	0x46020c00
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	0800c4c8 	.word	0x0800c4c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80075b0:	430b      	orrs	r3, r1
 80075b2:	d167      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80075b4:	4ba0      	ldr	r3, [pc, #640]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80075b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075ba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80075be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c6:	d036      	beq.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075ce:	d855      	bhi.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075d6:	d029      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075de:	d84d      	bhi.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e6:	d013      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ee:	d845      	bhi.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d015      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d13e      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe ffb8 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800760c:	f000 bcf5 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fa63 	bl	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800761e:	f000 bcec 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007622:	f7fe f98f 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 8007626:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007628:	f000 bce7 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800762c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007632:	f000 bce2 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007636:	4b80      	ldr	r3, [pc, #512]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b20      	cmp	r3, #32
 8007640:	d118      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007642:	4b7d      	ldr	r3, [pc, #500]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800764e:	4b7a      	ldr	r3, [pc, #488]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	0e1b      	lsrs	r3, r3, #24
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	e006      	b.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800765a:	4b77      	ldr	r3, [pc, #476]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800765c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	0e1b      	lsrs	r3, r3, #24
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	4a74      	ldr	r2, [pc, #464]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800766a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007670:	f000 bcc3 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007678:	f000 bcbf 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007680:	f000 bcbb 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007688:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800768c:	430b      	orrs	r3, r1
 800768e:	d14c      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007690:	4b69      	ldr	r3, [pc, #420]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007696:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076a2:	f7fe f969 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80076a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80076a8:	f000 bca7 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b2:	d104      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076b4:	f7fe f844 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80076b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80076ba:	f000 bc9e 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80076be:	4b5e      	ldr	r3, [pc, #376]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ca:	d107      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d2:	d103      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80076d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d8:	f000 bc8f 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80076dc:	4b56      	ldr	r3, [pc, #344]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d11c      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ee:	d118      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076f0:	4b51      	ldr	r3, [pc, #324]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80076fc:	4b4e      	ldr	r3, [pc, #312]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	0e1b      	lsrs	r3, r3, #24
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	e006      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8007708:	4b4b      	ldr	r3, [pc, #300]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800770a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	0e1b      	lsrs	r3, r3, #24
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	4a49      	ldr	r2, [pc, #292]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	f000 bc6c 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
 8007726:	f000 bc68 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800772a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772e:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007732:	430b      	orrs	r3, r1
 8007734:	d14c      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007736:	4b40      	ldr	r3, [pc, #256]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800773c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe f916 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 800774c:	6378      	str	r0, [r7, #52]	@ 0x34
 800774e:	f000 bc54 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007758:	d104      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800775a:	f7fd fff1 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800775e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007760:	f000 bc4b 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007764:	4b34      	ldr	r3, [pc, #208]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007770:	d107      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007778:	d103      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800777a:	4b31      	ldr	r3, [pc, #196]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
 800777e:	f000 bc3c 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007782:	4b2d      	ldr	r3, [pc, #180]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d11c      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007794:	d118      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007796:	4b28      	ldr	r3, [pc, #160]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80077a2:	4b25      	ldr	r3, [pc, #148]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	0e1b      	lsrs	r3, r3, #24
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	e006      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80077ae:	4b22      	ldr	r3, [pc, #136]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80077b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077b4:	041b      	lsls	r3, r3, #16
 80077b6:	0e1b      	lsrs	r3, r3, #24
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80077be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	f000 bc19 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	f000 bc15 	b.w	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80077d8:	430b      	orrs	r3, r1
 80077da:	d157      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80077dc:	4b16      	ldr	r3, [pc, #88]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80077de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80077ec:	d02a      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f2:	d848      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	2b80      	cmp	r3, #128	@ 0x80
 80077f8:	d00d      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b80      	cmp	r3, #128	@ 0x80
 80077fe:	d842      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2b40      	cmp	r3, #64	@ 0x40
 800780a:	d011      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800780c:	e03b      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800780e:	f7fe f8db 	bl	80059c8 <HAL_RCC_GetPCLK3Freq>
 8007812:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007814:	e3f1      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007816:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007822:	d102      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8007824:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007828:	e3e7      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782e:	e3e4      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007830:	f7fd ff86 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007834:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007836:	e3e0      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007838:	46020c00 	.word	0x46020c00
 800783c:	0800c4c8 	.word	0x0800c4c8
 8007840:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007844:	4ba3      	ldr	r3, [pc, #652]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b20      	cmp	r3, #32
 800784e:	d117      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007850:	4ba0      	ldr	r3, [pc, #640]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 800785c:	4b9d      	ldr	r3, [pc, #628]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	0e1b      	lsrs	r3, r3, #24
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	e006      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007868:	4b9a      	ldr	r3, [pc, #616]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800786a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	0e1b      	lsrs	r3, r3, #24
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	4a98      	ldr	r2, [pc, #608]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	e3bc      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007884:	e3b9      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800788a:	e3b6      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800788c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007890:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007894:	430b      	orrs	r3, r1
 8007896:	d147      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007898:	4b8e      	ldr	r3, [pc, #568]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800789a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800789e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80078a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80078a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d103      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078aa:	f7fe f865 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80078ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80078b0:	e3a3      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078b8:	d103      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fd ff41 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80078be:	6378      	str	r0, [r7, #52]	@ 0x34
 80078c0:	e39b      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80078c2:	4b84      	ldr	r3, [pc, #528]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ce:	d106      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078d6:	d102      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80078d8:	4b80      	ldr	r3, [pc, #512]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
 80078dc:	e38d      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80078de:	4b7d      	ldr	r3, [pc, #500]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d11b      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078f0:	d117      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078f2:	4b78      	ldr	r3, [pc, #480]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80078fe:	4b75      	ldr	r3, [pc, #468]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0e1b      	lsrs	r3, r3, #24
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800790a:	4b72      	ldr	r3, [pc, #456]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800790c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	0e1b      	lsrs	r3, r3, #24
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	4a6f      	ldr	r2, [pc, #444]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800791a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007920:	e36b      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
 8007926:	e368      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007930:	430b      	orrs	r3, r1
 8007932:	d164      	bne.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007934:	4b67      	ldr	r3, [pc, #412]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800793a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	d120      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007946:	4b63      	ldr	r3, [pc, #396]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b20      	cmp	r3, #32
 8007950:	d117      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007952:	4b60      	ldr	r3, [pc, #384]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800795e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	0e1b      	lsrs	r3, r3, #24
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	e006      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800796a:	4b5a      	ldr	r3, [pc, #360]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800796c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007970:	041b      	lsls	r3, r3, #16
 8007972:	0e1b      	lsrs	r3, r3, #24
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	4a57      	ldr	r2, [pc, #348]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007980:	e33b      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
 8007986:	e338      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007988:	4b52      	ldr	r3, [pc, #328]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800798a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800798e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007996:	d112      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799e:	d10e      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079a0:	4b4c      	ldr	r3, [pc, #304]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80079a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ae:	d102      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 80079b0:	23fa      	movs	r3, #250	@ 0xfa
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079b4:	e321      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80079b6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079bc:	e31d      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80079be:	4b45      	ldr	r3, [pc, #276]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ca:	d106      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d2:	d102      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80079d4:	4b41      	ldr	r3, [pc, #260]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	e30f      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80079da:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80079dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ee:	d103      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80079f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	e300      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fc:	e2fd      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80079fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a02:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007a06:	430b      	orrs	r3, r1
 8007a08:	d16a      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007a0a:	4b32      	ldr	r3, [pc, #200]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d120      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d117      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a28:	4b2a      	ldr	r3, [pc, #168]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007a34:	4b27      	ldr	r3, [pc, #156]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	0e1b      	lsrs	r3, r3, #24
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	e006      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007a40:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a56:	e2d0      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5c:	e2cd      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6c:	d112      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a74:	d10e      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a76:	4b17      	ldr	r3, [pc, #92]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a84:	d102      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007a86:	23fa      	movs	r3, #250	@ 0xfa
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a8a:	e2b6      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007a8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a92:	e2b2      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007a94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa0:	d106      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa8:	d102      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aae:	e2a4      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007ab0:	4b08      	ldr	r3, [pc, #32]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d107      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ac4:	d103      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007acc:	e295      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad2:	e292      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007ad4:	46020c00 	.word	0x46020c00
 8007ad8:	0800c4c8 	.word	0x0800c4c8
 8007adc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	d147      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007aec:	4b9a      	ldr	r3, [pc, #616]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007af2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007afe:	f7fd ff3b 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007b02:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b04:	e279      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007b06:	4b94      	ldr	r3, [pc, #592]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b14:	d112      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b1c:	d10e      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b2c:	d102      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8007b2e:	23fa      	movs	r3, #250	@ 0xfa
 8007b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b32:	e262      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007b34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b3a:	e25e      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007b3c:	4b86      	ldr	r3, [pc, #536]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b48:	d106      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b50:	d102      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8007b52:	4b82      	ldr	r3, [pc, #520]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b56:	e250      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007b58:	4b7f      	ldr	r3, [pc, #508]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d107      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8007b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e241      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7a:	e23e      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b80:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007b84:	430b      	orrs	r3, r1
 8007b86:	d12d      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007b88:	4b73      	ldr	r3, [pc, #460]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b8e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007b92:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007b94:	4b70      	ldr	r3, [pc, #448]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba0:	d105      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8007ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	e225      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fcdc 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc4:	e219      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bce:	f107 0318 	add.w	r3, r7, #24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fe2a 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bdc:	e20d      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be2:	e20a      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007bec:	430b      	orrs	r3, r1
 8007bee:	d156      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007bf0:	4b59      	ldr	r3, [pc, #356]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bf6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c02:	d028      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c0a:	d845      	bhi.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c12:	d013      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c1a:	d83d      	bhi.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c28:	d004      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8007c2a:	e035      	b.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f7fd feb8 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 8007c30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c32:	e1e2      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c34:	f7fd fd84 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007c38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c3a:	e1de      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c3c:	4b46      	ldr	r3, [pc, #280]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8007c4a:	4b44      	ldr	r3, [pc, #272]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c4e:	e1d4      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c54:	e1d1      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c56:	4b40      	ldr	r3, [pc, #256]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d117      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c62:	4b3d      	ldr	r3, [pc, #244]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8007c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	0e1b      	lsrs	r3, r3, #24
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007c7a:	4b37      	ldr	r3, [pc, #220]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	0e1b      	lsrs	r3, r3, #24
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	4a35      	ldr	r2, [pc, #212]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c90:	e1b3      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c96:	e1b0      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c9c:	e1ad      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	d15c      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007caa:	4b2b      	ldr	r3, [pc, #172]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cbc:	d028      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cc4:	d845      	bhi.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ccc:	d013      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd4:	d83d      	bhi.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce2:	d004      	beq.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8007ce4:	e035      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7fd fe47 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007cea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007cec:	e185      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd fd27 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007cf2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007cf4:	e181      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cf6:	4b18      	ldr	r3, [pc, #96]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d02:	d102      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8007d04:	4b15      	ldr	r3, [pc, #84]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d08:	e177      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d0e:	e174      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d10:	4b11      	ldr	r3, [pc, #68]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d117      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8007d28:	4b0b      	ldr	r3, [pc, #44]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	e006      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8007d34:	4b08      	ldr	r3, [pc, #32]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a07      	ldr	r2, [pc, #28]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d4a:	e156      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d50:	e153      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d56:	e150      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007d58:	46020c00 	.word	0x46020c00
 8007d5c:	00f42400 	.word	0x00f42400
 8007d60:	0800c4c8 	.word	0x0800c4c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d68:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	d176      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007d70:	4ba4      	ldr	r3, [pc, #656]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d76:	f003 0318 	and.w	r3, r3, #24
 8007d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	2b18      	cmp	r3, #24
 8007d80:	d86a      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007ded 	.word	0x08007ded
 8007d8c:	08007e59 	.word	0x08007e59
 8007d90:	08007e59 	.word	0x08007e59
 8007d94:	08007e59 	.word	0x08007e59
 8007d98:	08007e59 	.word	0x08007e59
 8007d9c:	08007e59 	.word	0x08007e59
 8007da0:	08007e59 	.word	0x08007e59
 8007da4:	08007e59 	.word	0x08007e59
 8007da8:	08007df5 	.word	0x08007df5
 8007dac:	08007e59 	.word	0x08007e59
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e59 	.word	0x08007e59
 8007db8:	08007e59 	.word	0x08007e59
 8007dbc:	08007e59 	.word	0x08007e59
 8007dc0:	08007e59 	.word	0x08007e59
 8007dc4:	08007e59 	.word	0x08007e59
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007e59 	.word	0x08007e59
 8007dd0:	08007e59 	.word	0x08007e59
 8007dd4:	08007e59 	.word	0x08007e59
 8007dd8:	08007e59 	.word	0x08007e59
 8007ddc:	08007e59 	.word	0x08007e59
 8007de0:	08007e59 	.word	0x08007e59
 8007de4:	08007e59 	.word	0x08007e59
 8007de8:	08007e17 	.word	0x08007e17
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007dec:	f7fd fdec 	bl	80059c8 <HAL_RCC_GetPCLK3Freq>
 8007df0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007df2:	e102      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007df4:	f7fd fca4 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007df8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007dfa:	e0fe      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dfc:	4b81      	ldr	r3, [pc, #516]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8007e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e0e:	e0f4      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e14:	e0f1      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e16:	4b7b      	ldr	r3, [pc, #492]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d117      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e22:	4b78      	ldr	r3, [pc, #480]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007e2e:	4b75      	ldr	r3, [pc, #468]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8007e3a:	4b72      	ldr	r3, [pc, #456]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a70      	ldr	r2, [pc, #448]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e50:	e0d3      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	e0d0      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5c:	e0cd      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007e66:	430b      	orrs	r3, r1
 8007e68:	d155      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007e6a:	4b66      	ldr	r3, [pc, #408]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007e6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e7c:	d013      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e84:	d844      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8c:	d013      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e94:	d83c      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d014      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea2:	d014      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007ea4:	e034      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fcbe 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eb4:	e0a1      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fb5c 	bl	8006578 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ec4:	e099      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ec6:	f7fd fc3b 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007eca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ecc:	e095      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ece:	4b4d      	ldr	r3, [pc, #308]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d117      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007eda:	4b4a      	ldr	r3, [pc, #296]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8007ee6:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0e1b      	lsrs	r3, r3, #24
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8007ef2:	4b44      	ldr	r3, [pc, #272]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	0e1b      	lsrs	r3, r3, #24
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	4a42      	ldr	r2, [pc, #264]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f08:	e077      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0e:	e074      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f14:	e071      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f1a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	d131      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007f22:	4b38      	ldr	r3, [pc, #224]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007f2e:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8007f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f48:	e057      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f58:	d112      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f60:	d10e      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f62:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8007f72:	23fa      	movs	r3, #250	@ 0xfa
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f76:	e040      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f7e:	e03c      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f84:	e039      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	d131      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f92:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f98:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f9c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007f9e:	4b19      	ldr	r3, [pc, #100]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007faa:	d105      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8007fb2:	4b17      	ldr	r3, [pc, #92]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb6:	e020      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007fb8:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007fce:	4b11      	ldr	r3, [pc, #68]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd2:	e012      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe0:	d106      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8007fea:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fee:	e004      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff4:	e001      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3738      	adds	r7, #56	@ 0x38
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	46020c00 	.word	0x46020c00
 8008008:	00f42400 	.word	0x00f42400
 800800c:	0800c4c8 	.word	0x0800c4c8
 8008010:	02dc6c00 	.word	0x02dc6c00
 8008014:	016e3600 	.word	0x016e3600

08008018 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008020:	4b47      	ldr	r3, [pc, #284]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a46      	ldr	r2, [pc, #280]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800802a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800802c:	f7fa ff46 	bl	8002ebc <HAL_GetTick>
 8008030:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008032:	e008      	b.n	8008046 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008034:	f7fa ff42 	bl	8002ebc <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e077      	b.n	8008136 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008046:	4b3e      	ldr	r3, [pc, #248]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008052:	4b3b      	ldr	r3, [pc, #236]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008056:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6811      	ldr	r1, [r2, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6852      	ldr	r2, [r2, #4]
 8008066:	3a01      	subs	r2, #1
 8008068:	0212      	lsls	r2, r2, #8
 800806a:	430a      	orrs	r2, r1
 800806c:	4934      	ldr	r1, [pc, #208]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 800806e:	4313      	orrs	r3, r2
 8008070:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008072:	4b33      	ldr	r3, [pc, #204]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008076:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <RCCEx_PLL2_Config+0x12c>)
 8008078:	4013      	ands	r3, r2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6892      	ldr	r2, [r2, #8]
 800807e:	3a01      	subs	r2, #1
 8008080:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68d2      	ldr	r2, [r2, #12]
 8008088:	3a01      	subs	r2, #1
 800808a:	0252      	lsls	r2, r2, #9
 800808c:	b292      	uxth	r2, r2
 800808e:	4311      	orrs	r1, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6912      	ldr	r2, [r2, #16]
 8008094:	3a01      	subs	r2, #1
 8008096:	0412      	lsls	r2, r2, #16
 8008098:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800809c:	4311      	orrs	r1, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6952      	ldr	r2, [r2, #20]
 80080a2:	3a01      	subs	r2, #1
 80080a4:	0612      	lsls	r2, r2, #24
 80080a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80080aa:	430a      	orrs	r2, r1
 80080ac:	4924      	ldr	r1, [pc, #144]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80080b2:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b6:	f023 020c 	bic.w	r2, r3, #12
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	4920      	ldr	r1, [pc, #128]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80080c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	491c      	ldr	r1, [pc, #112]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80080d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080d8:	f023 0310 	bic.w	r3, r3, #16
 80080dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080de:	4b18      	ldr	r3, [pc, #96]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	69d2      	ldr	r2, [r2, #28]
 80080ee:	00d2      	lsls	r2, r2, #3
 80080f0:	4913      	ldr	r1, [pc, #76]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80080f6:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fa:	4a11      	ldr	r2, [pc, #68]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 80080fc:	f043 0310 	orr.w	r3, r3, #16
 8008100:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008102:	4b0f      	ldr	r3, [pc, #60]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a0e      	ldr	r2, [pc, #56]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 8008108:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800810c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800810e:	f7fa fed5 	bl	8002ebc <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008114:	e008      	b.n	8008128 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008116:	f7fa fed1 	bl	8002ebc <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e006      	b.n	8008136 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <RCCEx_PLL2_Config+0x128>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008134:	2300      	movs	r3, #0

}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	46020c00 	.word	0x46020c00
 8008144:	80800000 	.word	0x80800000

08008148 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008150:	4b47      	ldr	r3, [pc, #284]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a46      	ldr	r2, [pc, #280]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800815a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800815c:	f7fa feae 	bl	8002ebc <HAL_GetTick>
 8008160:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008162:	e008      	b.n	8008176 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008164:	f7fa feaa 	bl	8002ebc <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e077      	b.n	8008266 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008176:	4b3e      	ldr	r3, [pc, #248]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008182:	4b3b      	ldr	r3, [pc, #236]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008186:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6811      	ldr	r1, [r2, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6852      	ldr	r2, [r2, #4]
 8008196:	3a01      	subs	r2, #1
 8008198:	0212      	lsls	r2, r2, #8
 800819a:	430a      	orrs	r2, r1
 800819c:	4934      	ldr	r1, [pc, #208]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	630b      	str	r3, [r1, #48]	@ 0x30
 80081a2:	4b33      	ldr	r3, [pc, #204]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081a6:	4b33      	ldr	r3, [pc, #204]	@ (8008274 <RCCEx_PLL3_Config+0x12c>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6892      	ldr	r2, [r2, #8]
 80081ae:	3a01      	subs	r2, #1
 80081b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68d2      	ldr	r2, [r2, #12]
 80081b8:	3a01      	subs	r2, #1
 80081ba:	0252      	lsls	r2, r2, #9
 80081bc:	b292      	uxth	r2, r2
 80081be:	4311      	orrs	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6912      	ldr	r2, [r2, #16]
 80081c4:	3a01      	subs	r2, #1
 80081c6:	0412      	lsls	r2, r2, #16
 80081c8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80081cc:	4311      	orrs	r1, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6952      	ldr	r2, [r2, #20]
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0612      	lsls	r2, r2, #24
 80081d6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80081da:	430a      	orrs	r2, r1
 80081dc:	4924      	ldr	r1, [pc, #144]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80081e2:	4b23      	ldr	r3, [pc, #140]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e6:	f023 020c 	bic.w	r2, r3, #12
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	4920      	ldr	r1, [pc, #128]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80081f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	491c      	ldr	r1, [pc, #112]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008202:	4b1b      	ldr	r3, [pc, #108]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	4a1a      	ldr	r2, [pc, #104]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008208:	f023 0310 	bic.w	r3, r3, #16
 800820c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800820e:	4b18      	ldr	r3, [pc, #96]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008216:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	69d2      	ldr	r2, [r2, #28]
 800821e:	00d2      	lsls	r2, r2, #3
 8008220:	4913      	ldr	r1, [pc, #76]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008222:	4313      	orrs	r3, r2
 8008224:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008226:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822a:	4a11      	ldr	r2, [pc, #68]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 800822c:	f043 0310 	orr.w	r3, r3, #16
 8008230:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008232:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a0e      	ldr	r2, [pc, #56]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 8008238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800823c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800823e:	f7fa fe3d 	bl	8002ebc <HAL_GetTick>
 8008242:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008244:	e008      	b.n	8008258 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008246:	f7fa fe39 	bl	8002ebc <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <RCCEx_PLL3_Config+0x128>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	46020c00 	.word	0x46020c00
 8008274:	80800000 	.word	0x80800000

08008278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e042      	b.n	8008310 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7fa fa95 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2224      	movs	r2, #36	@ 0x24
 80082a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0201 	bic.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fb6e 	bl	80089a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9d3 	bl	8008674 <UART_SetConfig>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e01b      	b.n	8008310 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0201 	orr.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbed 	bl	8008ae8 <UART_CheckIdleState>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e04a      	b.n	80083c0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fa fa45 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2224      	movs	r2, #36	@ 0x24
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb1e 	bl	80089a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f983 	bl	8008674 <UART_SetConfig>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e023      	b.n	80083c0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008396:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fb95 	bl	8008ae8 <UART_CheckIdleState>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	@ 0x28
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d17b      	bne.n	80084da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_UART_Transmit+0x26>
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e074      	b.n	80084dc <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2221      	movs	r2, #33	@ 0x21
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008402:	f7fa fd5b 	bl	8002ebc <HAL_GetTick>
 8008406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	88fa      	ldrh	r2, [r7, #6]
 800840c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008420:	d108      	bne.n	8008434 <HAL_UART_Transmit+0x6c>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	e003      	b.n	800843c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800843c:	e030      	b.n	80084a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2200      	movs	r2, #0
 8008446:	2180      	movs	r1, #128	@ 0x80
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fbf7 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e03d      	b.n	80084dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008474:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	3302      	adds	r3, #2
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	e007      	b.n	800848e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	781a      	ldrb	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	3301      	adds	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008494:	b29b      	uxth	r3, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1c8      	bne.n	800843e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2200      	movs	r2, #0
 80084b4:	2140      	movs	r1, #64	@ 0x40
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fbc0 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e006      	b.n	80084dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e000      	b.n	80084dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80084da:	2302      	movs	r3, #2
  }
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	@ 0x28
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	4613      	mov	r3, r2
 80084f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	f040 80b5 	bne.w	800866a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_UART_Receive+0x28>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0ad      	b.n	800866c <HAL_UART_Receive+0x188>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2222      	movs	r2, #34	@ 0x22
 800851c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008526:	f7fa fcc9 	bl	8002ebc <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008544:	d10e      	bne.n	8008564 <HAL_UART_Receive+0x80>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <HAL_UART_Receive+0x76>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008558:	e02d      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	22ff      	movs	r2, #255	@ 0xff
 800855e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008562:	e028      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10d      	bne.n	8008588 <HAL_UART_Receive+0xa4>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <HAL_UART_Receive+0x9a>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	22ff      	movs	r2, #255	@ 0xff
 8008578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800857c:	e01b      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	227f      	movs	r2, #127	@ 0x7f
 8008582:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008586:	e016      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008590:	d10d      	bne.n	80085ae <HAL_UART_Receive+0xca>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <HAL_UART_Receive+0xc0>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	227f      	movs	r2, #127	@ 0x7f
 800859e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085a2:	e008      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	223f      	movs	r2, #63	@ 0x3f
 80085a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085ac:	e003      	b.n	80085b6 <HAL_UART_Receive+0xd2>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085bc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c6:	d108      	bne.n	80085da <HAL_UART_Receive+0xf6>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d104      	bne.n	80085da <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	e003      	b.n	80085e2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80085e2:	e036      	b.n	8008652 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2200      	movs	r2, #0
 80085ec:	2120      	movs	r1, #32
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 fb24 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e032      	b.n	800866c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10c      	bne.n	8008626 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	b29a      	uxth	r2, r3
 8008614:	8a7b      	ldrh	r3, [r7, #18]
 8008616:	4013      	ands	r3, r2
 8008618:	b29a      	uxth	r2, r3
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	3302      	adds	r3, #2
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	e00c      	b.n	8008640 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	b2da      	uxtb	r2, r3
 800862e:	8a7b      	ldrh	r3, [r7, #18]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4013      	ands	r3, r2
 8008634:	b2da      	uxtb	r2, r3
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	3301      	adds	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1c2      	bne.n	80085e4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800866a:	2302      	movs	r3, #2
  }
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b094      	sub	sp, #80	@ 0x50
 800867a:	af00      	add	r7, sp, #0
 800867c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	4b9b      	ldr	r3, [pc, #620]	@ (80088f8 <UART_SetConfig+0x284>)
 800868a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	431a      	orrs	r2, r3
 8008696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	431a      	orrs	r2, r3
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4994      	ldr	r1, [pc, #592]	@ (80088fc <UART_SetConfig+0x288>)
 80086ac:	4019      	ands	r1, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	68d9      	ldr	r1, [r3, #12]
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	ea40 0301 	orr.w	r3, r0, r1
 80086ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b87      	ldr	r3, [pc, #540]	@ (80088f8 <UART_SetConfig+0x284>)
 80086dc:	429a      	cmp	r2, r3
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0x80>
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	4b86      	ldr	r3, [pc, #536]	@ (8008900 <UART_SetConfig+0x28c>)
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d004      	beq.n	80086f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f0:	4313      	orrs	r3, r2
 80086f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80086fe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008708:	430b      	orrs	r3, r1
 800870a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008712:	f023 000f 	bic.w	r0, r3, #15
 8008716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008718:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	ea40 0301 	orr.w	r3, r0, r1
 8008722:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	4b76      	ldr	r3, [pc, #472]	@ (8008904 <UART_SetConfig+0x290>)
 800872a:	429a      	cmp	r2, r3
 800872c:	d102      	bne.n	8008734 <UART_SetConfig+0xc0>
 800872e:	2301      	movs	r3, #1
 8008730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008732:	e021      	b.n	8008778 <UART_SetConfig+0x104>
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4b73      	ldr	r3, [pc, #460]	@ (8008908 <UART_SetConfig+0x294>)
 800873a:	429a      	cmp	r2, r3
 800873c:	d102      	bne.n	8008744 <UART_SetConfig+0xd0>
 800873e:	2304      	movs	r3, #4
 8008740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008742:	e019      	b.n	8008778 <UART_SetConfig+0x104>
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b70      	ldr	r3, [pc, #448]	@ (800890c <UART_SetConfig+0x298>)
 800874a:	429a      	cmp	r2, r3
 800874c:	d102      	bne.n	8008754 <UART_SetConfig+0xe0>
 800874e:	2308      	movs	r3, #8
 8008750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008752:	e011      	b.n	8008778 <UART_SetConfig+0x104>
 8008754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b6d      	ldr	r3, [pc, #436]	@ (8008910 <UART_SetConfig+0x29c>)
 800875a:	429a      	cmp	r2, r3
 800875c:	d102      	bne.n	8008764 <UART_SetConfig+0xf0>
 800875e:	2310      	movs	r3, #16
 8008760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008762:	e009      	b.n	8008778 <UART_SetConfig+0x104>
 8008764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4b63      	ldr	r3, [pc, #396]	@ (80088f8 <UART_SetConfig+0x284>)
 800876a:	429a      	cmp	r2, r3
 800876c:	d102      	bne.n	8008774 <UART_SetConfig+0x100>
 800876e:	2320      	movs	r3, #32
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008772:	e001      	b.n	8008778 <UART_SetConfig+0x104>
 8008774:	2300      	movs	r3, #0
 8008776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b5e      	ldr	r3, [pc, #376]	@ (80088f8 <UART_SetConfig+0x284>)
 800877e:	429a      	cmp	r2, r3
 8008780:	d004      	beq.n	800878c <UART_SetConfig+0x118>
 8008782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b5e      	ldr	r3, [pc, #376]	@ (8008900 <UART_SetConfig+0x28c>)
 8008788:	429a      	cmp	r2, r3
 800878a:	d172      	bne.n	8008872 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800878c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800878e:	2200      	movs	r2, #0
 8008790:	623b      	str	r3, [r7, #32]
 8008792:	627a      	str	r2, [r7, #36]	@ 0x24
 8008794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008798:	f7fe fafc 	bl	8006d94 <HAL_RCCEx_GetPeriphCLKFreq>
 800879c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800879e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80e7 	beq.w	8008974 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087aa:	4a5a      	ldr	r2, [pc, #360]	@ (8008914 <UART_SetConfig+0x2a0>)
 80087ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	4413      	add	r3, r2
 80087c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d305      	bcc.n	80087d6 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d903      	bls.n	80087de <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087dc:	e048      	b.n	8008870 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e0:	2200      	movs	r2, #0
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	61fa      	str	r2, [r7, #28]
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008914 <UART_SetConfig+0x2a0>)
 80087ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2200      	movs	r2, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	617a      	str	r2, [r7, #20]
 80087f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008800:	f7f8 fb34 	bl	8000e6c <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4610      	mov	r0, r2
 800880a:	4619      	mov	r1, r3
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	020b      	lsls	r3, r1, #8
 8008816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800881a:	0202      	lsls	r2, r0, #8
 800881c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800881e:	6849      	ldr	r1, [r1, #4]
 8008820:	0849      	lsrs	r1, r1, #1
 8008822:	2000      	movs	r0, #0
 8008824:	460c      	mov	r4, r1
 8008826:	4605      	mov	r5, r0
 8008828:	eb12 0804 	adds.w	r8, r2, r4
 800882c:	eb43 0905 	adc.w	r9, r3, r5
 8008830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	60bb      	str	r3, [r7, #8]
 8008838:	60fa      	str	r2, [r7, #12]
 800883a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f8 fb13 	bl	8000e6c <__aeabi_uldivmod>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4613      	mov	r3, r2
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008854:	d308      	bcc.n	8008868 <UART_SetConfig+0x1f4>
 8008856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800885c:	d204      	bcs.n	8008868 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800885e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008864:	60da      	str	r2, [r3, #12]
 8008866:	e003      	b.n	8008870 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800886e:	e081      	b.n	8008974 <UART_SetConfig+0x300>
 8008870:	e080      	b.n	8008974 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800887a:	d14d      	bne.n	8008918 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800887c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800887e:	2200      	movs	r2, #0
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008888:	f7fe fa84 	bl	8006d94 <HAL_RCCEx_GetPeriphCLKFreq>
 800888c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d06f      	beq.n	8008974 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008898:	4a1e      	ldr	r2, [pc, #120]	@ (8008914 <UART_SetConfig+0x2a0>)
 800889a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889e:	461a      	mov	r2, r3
 80088a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a6:	005a      	lsls	r2, r3, #1
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	441a      	add	r2, r3
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088bc:	2b0f      	cmp	r3, #15
 80088be:	d916      	bls.n	80088ee <UART_SetConfig+0x27a>
 80088c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c6:	d212      	bcs.n	80088ee <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f023 030f 	bic.w	r3, r3, #15
 80088d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	b29a      	uxth	r2, r3
 80088de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80088e0:	4313      	orrs	r3, r2
 80088e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80088ea:	60da      	str	r2, [r3, #12]
 80088ec:	e042      	b.n	8008974 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088f4:	e03e      	b.n	8008974 <UART_SetConfig+0x300>
 80088f6:	bf00      	nop
 80088f8:	46002400 	.word	0x46002400
 80088fc:	cfff69f3 	.word	0xcfff69f3
 8008900:	56002400 	.word	0x56002400
 8008904:	40013800 	.word	0x40013800
 8008908:	40004800 	.word	0x40004800
 800890c:	40004c00 	.word	0x40004c00
 8008910:	40005000 	.word	0x40005000
 8008914:	0800c588 	.word	0x0800c588
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800891a:	2200      	movs	r2, #0
 800891c:	469a      	mov	sl, r3
 800891e:	4693      	mov	fp, r2
 8008920:	4650      	mov	r0, sl
 8008922:	4659      	mov	r1, fp
 8008924:	f7fe fa36 	bl	8006d94 <HAL_RCCEx_GetPeriphCLKFreq>
 8008928:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800892a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d021      	beq.n	8008974 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	4a1a      	ldr	r2, [pc, #104]	@ (80089a0 <UART_SetConfig+0x32c>)
 8008936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800893a:	461a      	mov	r2, r3
 800893c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800893e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	441a      	add	r2, r3
 800894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008956:	2b0f      	cmp	r3, #15
 8008958:	d909      	bls.n	800896e <UART_SetConfig+0x2fa>
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008960:	d205      	bcs.n	800896e <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008964:	b29a      	uxth	r2, r3
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60da      	str	r2, [r3, #12]
 800896c:	e002      	b.n	8008974 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	2201      	movs	r2, #1
 8008978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897e:	2201      	movs	r2, #1
 8008980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	2200      	movs	r2, #0
 8008988:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	2200      	movs	r2, #0
 800898e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008990:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008994:	4618      	mov	r0, r3
 8008996:	3750      	adds	r7, #80	@ 0x50
 8008998:	46bd      	mov	sp, r7
 800899a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800899e:	bf00      	nop
 80089a0:	0800c588 	.word	0x0800c588

080089a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00a      	beq.n	8008a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01a      	beq.n	8008aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa2:	d10a      	bne.n	8008aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b098      	sub	sp, #96	@ 0x60
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008af8:	f7fa f9e0 	bl	8002ebc <HAL_GetTick>
 8008afc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d12f      	bne.n	8008b6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b14:	2200      	movs	r2, #0
 8008b16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f88e 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d022      	beq.n	8008b6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e063      	b.n	8008c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d149      	bne.n	8008c0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b82:	2200      	movs	r2, #0
 8008b84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f857 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d03c      	beq.n	8008c0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e6      	bne.n	8008b94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3308      	adds	r3, #8
 8008be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be6:	61fa      	str	r2, [r7, #28]
 8008be8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	69b9      	ldr	r1, [r7, #24]
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e5      	bne.n	8008bc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e012      	b.n	8008c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3758      	adds	r7, #88	@ 0x58
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	e04f      	b.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d04b      	beq.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c56:	f7fa f931 	bl	8002ebc <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d302      	bcc.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e04e      	b.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d037      	beq.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b80      	cmp	r3, #128	@ 0x80
 8008c82:	d034      	beq.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b40      	cmp	r3, #64	@ 0x40
 8008c88:	d031      	beq.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d110      	bne.n	8008cba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f838 	bl	8008d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2208      	movs	r2, #8
 8008caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e029      	b.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc8:	d111      	bne.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f81e 	bl	8008d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e00f      	b.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69da      	ldr	r2, [r3, #28]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	bf0c      	ite	eq
 8008cfe:	2301      	moveq	r3, #1
 8008d00:	2300      	movne	r3, #0
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d0a0      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b095      	sub	sp, #84	@ 0x54
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d66:	f023 0301 	bic.w	r3, r3, #1
 8008d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e3      	bne.n	8008d50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d118      	bne.n	8008dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f023 0310 	bic.w	r3, r3, #16
 8008da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dae:	61bb      	str	r3, [r7, #24]
 8008db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6979      	ldr	r1, [r7, #20]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	613b      	str	r3, [r7, #16]
   return(result);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e6      	bne.n	8008d90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008dd6:	bf00      	nop
 8008dd8:	3754      	adds	r7, #84	@ 0x54
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e027      	b.n	8008e48 <HAL_UARTEx_DisableFifoMode+0x66>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	@ 0x24
 8008e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e02d      	b.n	8008ec8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2224      	movs	r2, #36	@ 0x24
 8008e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0201 	bic.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f84f 	bl	8008f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e02d      	b.n	8008f44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2224      	movs	r2, #36	@ 0x24
 8008ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f811 	bl	8008f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2220      	movs	r2, #32
 8008f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d108      	bne.n	8008f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f6c:	e031      	b.n	8008fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f6e:	2308      	movs	r3, #8
 8008f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f72:	2308      	movs	r3, #8
 8008f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	0e5b      	lsrs	r3, r3, #25
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0307 	and.w	r3, r3, #7
 8008f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	0f5b      	lsrs	r3, r3, #29
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	7b3a      	ldrb	r2, [r7, #12]
 8008f9a:	4911      	ldr	r1, [pc, #68]	@ (8008fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f9c:	5c8a      	ldrb	r2, [r1, r2]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fa2:	7b3a      	ldrb	r2, [r7, #12]
 8008fa4:	490f      	ldr	r1, [pc, #60]	@ (8008fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8008fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	7b7a      	ldrb	r2, [r7, #13]
 8008fb8:	4909      	ldr	r1, [pc, #36]	@ (8008fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8008fba:	5c8a      	ldrb	r2, [r1, r2]
 8008fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fc0:	7b7a      	ldrb	r2, [r7, #13]
 8008fc2:	4908      	ldr	r1, [pc, #32]	@ (8008fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8008fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	0800c5a0 	.word	0x0800c5a0
 8008fe4:	0800c5a8 	.word	0x0800c5a8

08008fe8 <__cvt>:
 8008fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	ec57 6b10 	vmov	r6, r7, d0
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	bfb4      	ite	lt
 8008ffa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008ffe:	2300      	movge	r3, #0
 8009000:	4691      	mov	r9, r2
 8009002:	bfbf      	itttt	lt
 8009004:	4632      	movlt	r2, r6
 8009006:	461f      	movlt	r7, r3
 8009008:	232d      	movlt	r3, #45	@ 0x2d
 800900a:	4616      	movlt	r6, r2
 800900c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009010:	700b      	strb	r3, [r1, #0]
 8009012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009014:	f023 0820 	bic.w	r8, r3, #32
 8009018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800901c:	d005      	beq.n	800902a <__cvt+0x42>
 800901e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009022:	d100      	bne.n	8009026 <__cvt+0x3e>
 8009024:	3401      	adds	r4, #1
 8009026:	2102      	movs	r1, #2
 8009028:	e000      	b.n	800902c <__cvt+0x44>
 800902a:	2103      	movs	r1, #3
 800902c:	ab03      	add	r3, sp, #12
 800902e:	4622      	mov	r2, r4
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	ab02      	add	r3, sp, #8
 8009034:	ec47 6b10 	vmov	d0, r6, r7
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4653      	mov	r3, sl
 800903c:	f000 fe84 	bl	8009d48 <_dtoa_r>
 8009040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009044:	4605      	mov	r5, r0
 8009046:	d119      	bne.n	800907c <__cvt+0x94>
 8009048:	f019 0f01 	tst.w	r9, #1
 800904c:	d00e      	beq.n	800906c <__cvt+0x84>
 800904e:	eb00 0904 	add.w	r9, r0, r4
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	4630      	mov	r0, r6
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 fd39 	bl	8000ad0 <__aeabi_dcmpeq>
 800905e:	b108      	cbz	r0, 8009064 <__cvt+0x7c>
 8009060:	f8cd 900c 	str.w	r9, [sp, #12]
 8009064:	2230      	movs	r2, #48	@ 0x30
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	454b      	cmp	r3, r9
 800906a:	d31e      	bcc.n	80090aa <__cvt+0xc2>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	4628      	mov	r0, r5
 8009070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009072:	1b5b      	subs	r3, r3, r5
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	b004      	add	sp, #16
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009080:	eb00 0904 	add.w	r9, r0, r4
 8009084:	d1e5      	bne.n	8009052 <__cvt+0x6a>
 8009086:	7803      	ldrb	r3, [r0, #0]
 8009088:	2b30      	cmp	r3, #48	@ 0x30
 800908a:	d10a      	bne.n	80090a2 <__cvt+0xba>
 800908c:	2200      	movs	r2, #0
 800908e:	2300      	movs	r3, #0
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 fd1c 	bl	8000ad0 <__aeabi_dcmpeq>
 8009098:	b918      	cbnz	r0, 80090a2 <__cvt+0xba>
 800909a:	f1c4 0401 	rsb	r4, r4, #1
 800909e:	f8ca 4000 	str.w	r4, [sl]
 80090a2:	f8da 3000 	ldr.w	r3, [sl]
 80090a6:	4499      	add	r9, r3
 80090a8:	e7d3      	b.n	8009052 <__cvt+0x6a>
 80090aa:	1c59      	adds	r1, r3, #1
 80090ac:	9103      	str	r1, [sp, #12]
 80090ae:	701a      	strb	r2, [r3, #0]
 80090b0:	e7d9      	b.n	8009066 <__cvt+0x7e>

080090b2 <__exponent>:
 80090b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b4:	2900      	cmp	r1, #0
 80090b6:	7002      	strb	r2, [r0, #0]
 80090b8:	bfba      	itte	lt
 80090ba:	4249      	neglt	r1, r1
 80090bc:	232d      	movlt	r3, #45	@ 0x2d
 80090be:	232b      	movge	r3, #43	@ 0x2b
 80090c0:	2909      	cmp	r1, #9
 80090c2:	7043      	strb	r3, [r0, #1]
 80090c4:	dd28      	ble.n	8009118 <__exponent+0x66>
 80090c6:	f10d 0307 	add.w	r3, sp, #7
 80090ca:	270a      	movs	r7, #10
 80090cc:	461d      	mov	r5, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80090d6:	fb07 1416 	mls	r4, r7, r6, r1
 80090da:	3430      	adds	r4, #48	@ 0x30
 80090dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090e0:	460c      	mov	r4, r1
 80090e2:	4631      	mov	r1, r6
 80090e4:	2c63      	cmp	r4, #99	@ 0x63
 80090e6:	dcf2      	bgt.n	80090ce <__exponent+0x1c>
 80090e8:	3130      	adds	r1, #48	@ 0x30
 80090ea:	1e94      	subs	r4, r2, #2
 80090ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090f0:	1c41      	adds	r1, r0, #1
 80090f2:	4623      	mov	r3, r4
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	d30a      	bcc.n	800910e <__exponent+0x5c>
 80090f8:	f10d 0309 	add.w	r3, sp, #9
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	42ac      	cmp	r4, r5
 8009100:	bf88      	it	hi
 8009102:	2300      	movhi	r3, #0
 8009104:	3302      	adds	r3, #2
 8009106:	4403      	add	r3, r0
 8009108:	1a18      	subs	r0, r3, r0
 800910a:	b003      	add	sp, #12
 800910c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009112:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009116:	e7ed      	b.n	80090f4 <__exponent+0x42>
 8009118:	2330      	movs	r3, #48	@ 0x30
 800911a:	3130      	adds	r1, #48	@ 0x30
 800911c:	7083      	strb	r3, [r0, #2]
 800911e:	1d03      	adds	r3, r0, #4
 8009120:	70c1      	strb	r1, [r0, #3]
 8009122:	e7f1      	b.n	8009108 <__exponent+0x56>

08009124 <_printf_float>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	b08d      	sub	sp, #52	@ 0x34
 800912a:	460c      	mov	r4, r1
 800912c:	4616      	mov	r6, r2
 800912e:	461f      	mov	r7, r3
 8009130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009134:	4605      	mov	r5, r0
 8009136:	f000 fcf3 	bl	8009b20 <_localeconv_r>
 800913a:	6803      	ldr	r3, [r0, #0]
 800913c:	4618      	mov	r0, r3
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	f7f7 f89a 	bl	8000278 <strlen>
 8009144:	2300      	movs	r3, #0
 8009146:	9005      	str	r0, [sp, #20]
 8009148:	930a      	str	r3, [sp, #40]	@ 0x28
 800914a:	f8d8 3000 	ldr.w	r3, [r8]
 800914e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009152:	3307      	adds	r3, #7
 8009154:	f8d4 b000 	ldr.w	fp, [r4]
 8009158:	f023 0307 	bic.w	r3, r3, #7
 800915c:	f103 0208 	add.w	r2, r3, #8
 8009160:	f8c8 2000 	str.w	r2, [r8]
 8009164:	f04f 32ff 	mov.w	r2, #4294967295
 8009168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800916c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009170:	f8cd 8018 	str.w	r8, [sp, #24]
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	4b9d      	ldr	r3, [pc, #628]	@ (80093ec <_printf_float+0x2c8>)
 8009178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009180:	f7f7 fcd8 	bl	8000b34 <__aeabi_dcmpun>
 8009184:	bb70      	cbnz	r0, 80091e4 <_printf_float+0xc0>
 8009186:	f04f 32ff 	mov.w	r2, #4294967295
 800918a:	4b98      	ldr	r3, [pc, #608]	@ (80093ec <_printf_float+0x2c8>)
 800918c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009190:	f7f7 fcb2 	bl	8000af8 <__aeabi_dcmple>
 8009194:	bb30      	cbnz	r0, 80091e4 <_printf_float+0xc0>
 8009196:	2200      	movs	r2, #0
 8009198:	2300      	movs	r3, #0
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 fca1 	bl	8000ae4 <__aeabi_dcmplt>
 80091a2:	b110      	cbz	r0, 80091aa <_printf_float+0x86>
 80091a4:	232d      	movs	r3, #45	@ 0x2d
 80091a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091aa:	4a91      	ldr	r2, [pc, #580]	@ (80093f0 <_printf_float+0x2cc>)
 80091ac:	4b91      	ldr	r3, [pc, #580]	@ (80093f4 <_printf_float+0x2d0>)
 80091ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091b2:	bf94      	ite	ls
 80091b4:	4690      	movls	r8, r2
 80091b6:	4698      	movhi	r8, r3
 80091b8:	2303      	movs	r3, #3
 80091ba:	f04f 0900 	mov.w	r9, #0
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	f02b 0304 	bic.w	r3, fp, #4
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	4633      	mov	r3, r6
 80091c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	9700      	str	r7, [sp, #0]
 80091d0:	f000 f9d2 	bl	8009578 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f040 808d 	bne.w	80092f4 <_printf_float+0x1d0>
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	b00d      	add	sp, #52	@ 0x34
 80091e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e4:	4642      	mov	r2, r8
 80091e6:	464b      	mov	r3, r9
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f7 fca2 	bl	8000b34 <__aeabi_dcmpun>
 80091f0:	b140      	cbz	r0, 8009204 <_printf_float+0xe0>
 80091f2:	464b      	mov	r3, r9
 80091f4:	4a80      	ldr	r2, [pc, #512]	@ (80093f8 <_printf_float+0x2d4>)
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	bfbc      	itt	lt
 80091fa:	232d      	movlt	r3, #45	@ 0x2d
 80091fc:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009200:	4b7e      	ldr	r3, [pc, #504]	@ (80093fc <_printf_float+0x2d8>)
 8009202:	e7d4      	b.n	80091ae <_printf_float+0x8a>
 8009204:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009208:	6863      	ldr	r3, [r4, #4]
 800920a:	9206      	str	r2, [sp, #24]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	d13b      	bne.n	8009288 <_printf_float+0x164>
 8009210:	2306      	movs	r3, #6
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009218:	2300      	movs	r3, #0
 800921a:	4628      	mov	r0, r5
 800921c:	6022      	str	r2, [r4, #0]
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	ab0a      	add	r3, sp, #40	@ 0x28
 8009222:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009226:	ab09      	add	r3, sp, #36	@ 0x24
 8009228:	ec49 8b10 	vmov	d0, r8, r9
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009232:	6861      	ldr	r1, [r4, #4]
 8009234:	f7ff fed8 	bl	8008fe8 <__cvt>
 8009238:	9b06      	ldr	r3, [sp, #24]
 800923a:	4680      	mov	r8, r0
 800923c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800923e:	2b47      	cmp	r3, #71	@ 0x47
 8009240:	d129      	bne.n	8009296 <_printf_float+0x172>
 8009242:	1cc8      	adds	r0, r1, #3
 8009244:	db02      	blt.n	800924c <_printf_float+0x128>
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	4299      	cmp	r1, r3
 800924a:	dd41      	ble.n	80092d0 <_printf_float+0x1ac>
 800924c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009250:	fa5f fa8a 	uxtb.w	sl, sl
 8009254:	3901      	subs	r1, #1
 8009256:	4652      	mov	r2, sl
 8009258:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800925c:	9109      	str	r1, [sp, #36]	@ 0x24
 800925e:	f7ff ff28 	bl	80090b2 <__exponent>
 8009262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009264:	4681      	mov	r9, r0
 8009266:	1813      	adds	r3, r2, r0
 8009268:	2a01      	cmp	r2, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	dc02      	bgt.n	8009274 <_printf_float+0x150>
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	07d2      	lsls	r2, r2, #31
 8009272:	d501      	bpl.n	8009278 <_printf_float+0x154>
 8009274:	3301      	adds	r3, #1
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0a2      	beq.n	80091c6 <_printf_float+0xa2>
 8009280:	232d      	movs	r3, #45	@ 0x2d
 8009282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009286:	e79e      	b.n	80091c6 <_printf_float+0xa2>
 8009288:	9a06      	ldr	r2, [sp, #24]
 800928a:	2a47      	cmp	r2, #71	@ 0x47
 800928c:	d1c2      	bne.n	8009214 <_printf_float+0xf0>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1c0      	bne.n	8009214 <_printf_float+0xf0>
 8009292:	2301      	movs	r3, #1
 8009294:	e7bd      	b.n	8009212 <_printf_float+0xee>
 8009296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800929a:	d9db      	bls.n	8009254 <_printf_float+0x130>
 800929c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80092a0:	d118      	bne.n	80092d4 <_printf_float+0x1b0>
 80092a2:	2900      	cmp	r1, #0
 80092a4:	6863      	ldr	r3, [r4, #4]
 80092a6:	dd0b      	ble.n	80092c0 <_printf_float+0x19c>
 80092a8:	6121      	str	r1, [r4, #16]
 80092aa:	b913      	cbnz	r3, 80092b2 <_printf_float+0x18e>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	07d0      	lsls	r0, r2, #31
 80092b0:	d502      	bpl.n	80092b8 <_printf_float+0x194>
 80092b2:	3301      	adds	r3, #1
 80092b4:	440b      	add	r3, r1
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092be:	e7db      	b.n	8009278 <_printf_float+0x154>
 80092c0:	b913      	cbnz	r3, 80092c8 <_printf_float+0x1a4>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	07d2      	lsls	r2, r2, #31
 80092c6:	d501      	bpl.n	80092cc <_printf_float+0x1a8>
 80092c8:	3302      	adds	r3, #2
 80092ca:	e7f4      	b.n	80092b6 <_printf_float+0x192>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e7f2      	b.n	80092b6 <_printf_float+0x192>
 80092d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80092d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d6:	4299      	cmp	r1, r3
 80092d8:	db05      	blt.n	80092e6 <_printf_float+0x1c2>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	6121      	str	r1, [r4, #16]
 80092de:	07d8      	lsls	r0, r3, #31
 80092e0:	d5ea      	bpl.n	80092b8 <_printf_float+0x194>
 80092e2:	1c4b      	adds	r3, r1, #1
 80092e4:	e7e7      	b.n	80092b6 <_printf_float+0x192>
 80092e6:	2900      	cmp	r1, #0
 80092e8:	bfd4      	ite	le
 80092ea:	f1c1 0202 	rsble	r2, r1, #2
 80092ee:	2201      	movgt	r2, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	e7e0      	b.n	80092b6 <_printf_float+0x192>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	055a      	lsls	r2, r3, #21
 80092f8:	d407      	bmi.n	800930a <_printf_float+0x1e6>
 80092fa:	6923      	ldr	r3, [r4, #16]
 80092fc:	4642      	mov	r2, r8
 80092fe:	4631      	mov	r1, r6
 8009300:	4628      	mov	r0, r5
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	d12b      	bne.n	8009360 <_printf_float+0x23c>
 8009308:	e767      	b.n	80091da <_printf_float+0xb6>
 800930a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800930e:	f240 80dd 	bls.w	80094cc <_printf_float+0x3a8>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800931a:	f7f7 fbd9 	bl	8000ad0 <__aeabi_dcmpeq>
 800931e:	2800      	cmp	r0, #0
 8009320:	d033      	beq.n	800938a <_printf_float+0x266>
 8009322:	2301      	movs	r3, #1
 8009324:	4a36      	ldr	r2, [pc, #216]	@ (8009400 <_printf_float+0x2dc>)
 8009326:	4631      	mov	r1, r6
 8009328:	4628      	mov	r0, r5
 800932a:	47b8      	blx	r7
 800932c:	3001      	adds	r0, #1
 800932e:	f43f af54 	beq.w	80091da <_printf_float+0xb6>
 8009332:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009336:	4543      	cmp	r3, r8
 8009338:	db02      	blt.n	8009340 <_printf_float+0x21c>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	07d8      	lsls	r0, r3, #31
 800933e:	d50f      	bpl.n	8009360 <_printf_float+0x23c>
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009348:	47b8      	blx	r7
 800934a:	3001      	adds	r0, #1
 800934c:	f43f af45 	beq.w	80091da <_printf_float+0xb6>
 8009350:	f04f 0900 	mov.w	r9, #0
 8009354:	f108 38ff 	add.w	r8, r8, #4294967295
 8009358:	f104 0a1a 	add.w	sl, r4, #26
 800935c:	45c8      	cmp	r8, r9
 800935e:	dc09      	bgt.n	8009374 <_printf_float+0x250>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	079b      	lsls	r3, r3, #30
 8009364:	f100 8103 	bmi.w	800956e <_printf_float+0x44a>
 8009368:	68e0      	ldr	r0, [r4, #12]
 800936a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936c:	4298      	cmp	r0, r3
 800936e:	bfb8      	it	lt
 8009370:	4618      	movlt	r0, r3
 8009372:	e734      	b.n	80091de <_printf_float+0xba>
 8009374:	2301      	movs	r3, #1
 8009376:	4652      	mov	r2, sl
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af2b 	beq.w	80091da <_printf_float+0xb6>
 8009384:	f109 0901 	add.w	r9, r9, #1
 8009388:	e7e8      	b.n	800935c <_printf_float+0x238>
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	2b00      	cmp	r3, #0
 800938e:	dc39      	bgt.n	8009404 <_printf_float+0x2e0>
 8009390:	2301      	movs	r3, #1
 8009392:	4a1b      	ldr	r2, [pc, #108]	@ (8009400 <_printf_float+0x2dc>)
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	47b8      	blx	r7
 800939a:	3001      	adds	r0, #1
 800939c:	f43f af1d 	beq.w	80091da <_printf_float+0xb6>
 80093a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80093a4:	ea59 0303 	orrs.w	r3, r9, r3
 80093a8:	d102      	bne.n	80093b0 <_printf_float+0x28c>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	07d9      	lsls	r1, r3, #31
 80093ae:	d5d7      	bpl.n	8009360 <_printf_float+0x23c>
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f af0d 	beq.w	80091da <_printf_float+0xb6>
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	f104 0b1a 	add.w	fp, r4, #26
 80093c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ca:	425b      	negs	r3, r3
 80093cc:	4553      	cmp	r3, sl
 80093ce:	dc01      	bgt.n	80093d4 <_printf_float+0x2b0>
 80093d0:	464b      	mov	r3, r9
 80093d2:	e793      	b.n	80092fc <_printf_float+0x1d8>
 80093d4:	2301      	movs	r3, #1
 80093d6:	465a      	mov	r2, fp
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f aefb 	beq.w	80091da <_printf_float+0xb6>
 80093e4:	f10a 0a01 	add.w	sl, sl, #1
 80093e8:	e7ee      	b.n	80093c8 <_printf_float+0x2a4>
 80093ea:	bf00      	nop
 80093ec:	7fefffff 	.word	0x7fefffff
 80093f0:	0800c5b0 	.word	0x0800c5b0
 80093f4:	0800c5b4 	.word	0x0800c5b4
 80093f8:	0800c5b8 	.word	0x0800c5b8
 80093fc:	0800c5bc 	.word	0x0800c5bc
 8009400:	0800c5c0 	.word	0x0800c5c0
 8009404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800940a:	4553      	cmp	r3, sl
 800940c:	bfa8      	it	ge
 800940e:	4653      	movge	r3, sl
 8009410:	2b00      	cmp	r3, #0
 8009412:	4699      	mov	r9, r3
 8009414:	dc36      	bgt.n	8009484 <_printf_float+0x360>
 8009416:	f04f 0b00 	mov.w	fp, #0
 800941a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800941e:	f104 021a 	add.w	r2, r4, #26
 8009422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009424:	9306      	str	r3, [sp, #24]
 8009426:	eba3 0309 	sub.w	r3, r3, r9
 800942a:	455b      	cmp	r3, fp
 800942c:	dc31      	bgt.n	8009492 <_printf_float+0x36e>
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	459a      	cmp	sl, r3
 8009432:	dc3a      	bgt.n	80094aa <_printf_float+0x386>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	07da      	lsls	r2, r3, #31
 8009438:	d437      	bmi.n	80094aa <_printf_float+0x386>
 800943a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943c:	ebaa 0903 	sub.w	r9, sl, r3
 8009440:	9b06      	ldr	r3, [sp, #24]
 8009442:	ebaa 0303 	sub.w	r3, sl, r3
 8009446:	4599      	cmp	r9, r3
 8009448:	bfa8      	it	ge
 800944a:	4699      	movge	r9, r3
 800944c:	f1b9 0f00 	cmp.w	r9, #0
 8009450:	dc33      	bgt.n	80094ba <_printf_float+0x396>
 8009452:	f04f 0800 	mov.w	r8, #0
 8009456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800945a:	f104 0b1a 	add.w	fp, r4, #26
 800945e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009460:	ebaa 0303 	sub.w	r3, sl, r3
 8009464:	eba3 0309 	sub.w	r3, r3, r9
 8009468:	4543      	cmp	r3, r8
 800946a:	f77f af79 	ble.w	8009360 <_printf_float+0x23c>
 800946e:	2301      	movs	r3, #1
 8009470:	465a      	mov	r2, fp
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	f43f aeae 	beq.w	80091da <_printf_float+0xb6>
 800947e:	f108 0801 	add.w	r8, r8, #1
 8009482:	e7ec      	b.n	800945e <_printf_float+0x33a>
 8009484:	4642      	mov	r2, r8
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	d1c2      	bne.n	8009416 <_printf_float+0x2f2>
 8009490:	e6a3      	b.n	80091da <_printf_float+0xb6>
 8009492:	2301      	movs	r3, #1
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	9206      	str	r2, [sp, #24]
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f ae9c 	beq.w	80091da <_printf_float+0xb6>
 80094a2:	f10b 0b01 	add.w	fp, fp, #1
 80094a6:	9a06      	ldr	r2, [sp, #24]
 80094a8:	e7bb      	b.n	8009422 <_printf_float+0x2fe>
 80094aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	d1c0      	bne.n	800943a <_printf_float+0x316>
 80094b8:	e68f      	b.n	80091da <_printf_float+0xb6>
 80094ba:	9a06      	ldr	r2, [sp, #24]
 80094bc:	464b      	mov	r3, r9
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	4442      	add	r2, r8
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	d1c3      	bne.n	8009452 <_printf_float+0x32e>
 80094ca:	e686      	b.n	80091da <_printf_float+0xb6>
 80094cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094d0:	f1ba 0f01 	cmp.w	sl, #1
 80094d4:	dc01      	bgt.n	80094da <_printf_float+0x3b6>
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	d536      	bpl.n	8009548 <_printf_float+0x424>
 80094da:	2301      	movs	r3, #1
 80094dc:	4642      	mov	r2, r8
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	f43f ae78 	beq.w	80091da <_printf_float+0xb6>
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae70 	beq.w	80091da <_printf_float+0xb6>
 80094fa:	2200      	movs	r2, #0
 80094fc:	2300      	movs	r3, #0
 80094fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009506:	f7f7 fae3 	bl	8000ad0 <__aeabi_dcmpeq>
 800950a:	b9c0      	cbnz	r0, 800953e <_printf_float+0x41a>
 800950c:	4653      	mov	r3, sl
 800950e:	f108 0201 	add.w	r2, r8, #1
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	d10c      	bne.n	8009536 <_printf_float+0x412>
 800951c:	e65d      	b.n	80091da <_printf_float+0xb6>
 800951e:	2301      	movs	r3, #1
 8009520:	465a      	mov	r2, fp
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f ae56 	beq.w	80091da <_printf_float+0xb6>
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	45d0      	cmp	r8, sl
 8009534:	dbf3      	blt.n	800951e <_printf_float+0x3fa>
 8009536:	464b      	mov	r3, r9
 8009538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800953c:	e6df      	b.n	80092fe <_printf_float+0x1da>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	f104 0b1a 	add.w	fp, r4, #26
 8009546:	e7f4      	b.n	8009532 <_printf_float+0x40e>
 8009548:	2301      	movs	r3, #1
 800954a:	4642      	mov	r2, r8
 800954c:	e7e1      	b.n	8009512 <_printf_float+0x3ee>
 800954e:	2301      	movs	r3, #1
 8009550:	464a      	mov	r2, r9
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f ae3e 	beq.w	80091da <_printf_float+0xb6>
 800955e:	f108 0801 	add.w	r8, r8, #1
 8009562:	68e3      	ldr	r3, [r4, #12]
 8009564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009566:	1a5b      	subs	r3, r3, r1
 8009568:	4543      	cmp	r3, r8
 800956a:	dcf0      	bgt.n	800954e <_printf_float+0x42a>
 800956c:	e6fc      	b.n	8009368 <_printf_float+0x244>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	f104 0919 	add.w	r9, r4, #25
 8009576:	e7f4      	b.n	8009562 <_printf_float+0x43e>

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	4698      	mov	r8, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	4607      	mov	r7, r0
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	460c      	mov	r4, r1
 8009588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800958c:	4293      	cmp	r3, r2
 800958e:	bfb8      	it	lt
 8009590:	4613      	movlt	r3, r2
 8009592:	6033      	str	r3, [r6, #0]
 8009594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009598:	b10a      	cbz	r2, 800959e <_printf_common+0x26>
 800959a:	3301      	adds	r3, #1
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	0699      	lsls	r1, r3, #26
 80095a2:	bf42      	ittt	mi
 80095a4:	6833      	ldrmi	r3, [r6, #0]
 80095a6:	3302      	addmi	r3, #2
 80095a8:	6033      	strmi	r3, [r6, #0]
 80095aa:	6825      	ldr	r5, [r4, #0]
 80095ac:	f015 0506 	ands.w	r5, r5, #6
 80095b0:	d106      	bne.n	80095c0 <_printf_common+0x48>
 80095b2:	f104 0a19 	add.w	sl, r4, #25
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	6832      	ldr	r2, [r6, #0]
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dc2b      	bgt.n	8009618 <_printf_common+0xa0>
 80095c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095c4:	6822      	ldr	r2, [r4, #0]
 80095c6:	3b00      	subs	r3, #0
 80095c8:	bf18      	it	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	0692      	lsls	r2, r2, #26
 80095ce:	d430      	bmi.n	8009632 <_printf_common+0xba>
 80095d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095d4:	4641      	mov	r1, r8
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c8      	blx	r9
 80095da:	3001      	adds	r0, #1
 80095dc:	d023      	beq.n	8009626 <_printf_common+0xae>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	341a      	adds	r4, #26
 80095e2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80095e6:	f003 0306 	and.w	r3, r3, #6
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	bf0a      	itet	eq
 80095ee:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80095f2:	2500      	movne	r5, #0
 80095f4:	6833      	ldreq	r3, [r6, #0]
 80095f6:	f04f 0600 	mov.w	r6, #0
 80095fa:	bf08      	it	eq
 80095fc:	1aed      	subeq	r5, r5, r3
 80095fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009602:	bf08      	it	eq
 8009604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009608:	4293      	cmp	r3, r2
 800960a:	bfc4      	itt	gt
 800960c:	1a9b      	subgt	r3, r3, r2
 800960e:	18ed      	addgt	r5, r5, r3
 8009610:	42b5      	cmp	r5, r6
 8009612:	d11a      	bne.n	800964a <_printf_common+0xd2>
 8009614:	2000      	movs	r0, #0
 8009616:	e008      	b.n	800962a <_printf_common+0xb2>
 8009618:	2301      	movs	r3, #1
 800961a:	4652      	mov	r2, sl
 800961c:	4641      	mov	r1, r8
 800961e:	4638      	mov	r0, r7
 8009620:	47c8      	blx	r9
 8009622:	3001      	adds	r0, #1
 8009624:	d103      	bne.n	800962e <_printf_common+0xb6>
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	3501      	adds	r5, #1
 8009630:	e7c1      	b.n	80095b6 <_printf_common+0x3e>
 8009632:	18e1      	adds	r1, r4, r3
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	2030      	movs	r0, #48	@ 0x30
 8009638:	3302      	adds	r3, #2
 800963a:	4422      	add	r2, r4
 800963c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009648:	e7c2      	b.n	80095d0 <_printf_common+0x58>
 800964a:	2301      	movs	r3, #1
 800964c:	4622      	mov	r2, r4
 800964e:	4641      	mov	r1, r8
 8009650:	4638      	mov	r0, r7
 8009652:	47c8      	blx	r9
 8009654:	3001      	adds	r0, #1
 8009656:	d0e6      	beq.n	8009626 <_printf_common+0xae>
 8009658:	3601      	adds	r6, #1
 800965a:	e7d9      	b.n	8009610 <_printf_common+0x98>

0800965c <_printf_i>:
 800965c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	7e0f      	ldrb	r7, [r1, #24]
 8009662:	4691      	mov	r9, r2
 8009664:	4680      	mov	r8, r0
 8009666:	460c      	mov	r4, r1
 8009668:	2f78      	cmp	r7, #120	@ 0x78
 800966a:	469a      	mov	sl, r3
 800966c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800966e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009672:	d807      	bhi.n	8009684 <_printf_i+0x28>
 8009674:	2f62      	cmp	r7, #98	@ 0x62
 8009676:	d80a      	bhi.n	800968e <_printf_i+0x32>
 8009678:	2f00      	cmp	r7, #0
 800967a:	f000 80d2 	beq.w	8009822 <_printf_i+0x1c6>
 800967e:	2f58      	cmp	r7, #88	@ 0x58
 8009680:	f000 80b9 	beq.w	80097f6 <_printf_i+0x19a>
 8009684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800968c:	e03a      	b.n	8009704 <_printf_i+0xa8>
 800968e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009692:	2b15      	cmp	r3, #21
 8009694:	d8f6      	bhi.n	8009684 <_printf_i+0x28>
 8009696:	a101      	add	r1, pc, #4	@ (adr r1, 800969c <_printf_i+0x40>)
 8009698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	08009709 	.word	0x08009709
 80096a4:	08009685 	.word	0x08009685
 80096a8:	08009685 	.word	0x08009685
 80096ac:	08009685 	.word	0x08009685
 80096b0:	08009685 	.word	0x08009685
 80096b4:	08009709 	.word	0x08009709
 80096b8:	08009685 	.word	0x08009685
 80096bc:	08009685 	.word	0x08009685
 80096c0:	08009685 	.word	0x08009685
 80096c4:	08009685 	.word	0x08009685
 80096c8:	08009809 	.word	0x08009809
 80096cc:	08009733 	.word	0x08009733
 80096d0:	080097c3 	.word	0x080097c3
 80096d4:	08009685 	.word	0x08009685
 80096d8:	08009685 	.word	0x08009685
 80096dc:	0800982b 	.word	0x0800982b
 80096e0:	08009685 	.word	0x08009685
 80096e4:	08009733 	.word	0x08009733
 80096e8:	08009685 	.word	0x08009685
 80096ec:	08009685 	.word	0x08009685
 80096f0:	080097cb 	.word	0x080097cb
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	1d1a      	adds	r2, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6032      	str	r2, [r6, #0]
 80096fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009704:	2301      	movs	r3, #1
 8009706:	e09d      	b.n	8009844 <_printf_i+0x1e8>
 8009708:	6833      	ldr	r3, [r6, #0]
 800970a:	6820      	ldr	r0, [r4, #0]
 800970c:	1d19      	adds	r1, r3, #4
 800970e:	6031      	str	r1, [r6, #0]
 8009710:	0606      	lsls	r6, r0, #24
 8009712:	d501      	bpl.n	8009718 <_printf_i+0xbc>
 8009714:	681d      	ldr	r5, [r3, #0]
 8009716:	e003      	b.n	8009720 <_printf_i+0xc4>
 8009718:	0645      	lsls	r5, r0, #25
 800971a:	d5fb      	bpl.n	8009714 <_printf_i+0xb8>
 800971c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009720:	2d00      	cmp	r5, #0
 8009722:	da03      	bge.n	800972c <_printf_i+0xd0>
 8009724:	232d      	movs	r3, #45	@ 0x2d
 8009726:	426d      	negs	r5, r5
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800972c:	4859      	ldr	r0, [pc, #356]	@ (8009894 <_printf_i+0x238>)
 800972e:	230a      	movs	r3, #10
 8009730:	e011      	b.n	8009756 <_printf_i+0xfa>
 8009732:	6821      	ldr	r1, [r4, #0]
 8009734:	6833      	ldr	r3, [r6, #0]
 8009736:	0608      	lsls	r0, r1, #24
 8009738:	f853 5b04 	ldr.w	r5, [r3], #4
 800973c:	d402      	bmi.n	8009744 <_printf_i+0xe8>
 800973e:	0649      	lsls	r1, r1, #25
 8009740:	bf48      	it	mi
 8009742:	b2ad      	uxthmi	r5, r5
 8009744:	2f6f      	cmp	r7, #111	@ 0x6f
 8009746:	6033      	str	r3, [r6, #0]
 8009748:	4852      	ldr	r0, [pc, #328]	@ (8009894 <_printf_i+0x238>)
 800974a:	bf14      	ite	ne
 800974c:	230a      	movne	r3, #10
 800974e:	2308      	moveq	r3, #8
 8009750:	2100      	movs	r1, #0
 8009752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009756:	6866      	ldr	r6, [r4, #4]
 8009758:	2e00      	cmp	r6, #0
 800975a:	60a6      	str	r6, [r4, #8]
 800975c:	bfa2      	ittt	ge
 800975e:	6821      	ldrge	r1, [r4, #0]
 8009760:	f021 0104 	bicge.w	r1, r1, #4
 8009764:	6021      	strge	r1, [r4, #0]
 8009766:	b90d      	cbnz	r5, 800976c <_printf_i+0x110>
 8009768:	2e00      	cmp	r6, #0
 800976a:	d04b      	beq.n	8009804 <_printf_i+0x1a8>
 800976c:	4616      	mov	r6, r2
 800976e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009772:	fb03 5711 	mls	r7, r3, r1, r5
 8009776:	5dc7      	ldrb	r7, [r0, r7]
 8009778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800977c:	462f      	mov	r7, r5
 800977e:	460d      	mov	r5, r1
 8009780:	42bb      	cmp	r3, r7
 8009782:	d9f4      	bls.n	800976e <_printf_i+0x112>
 8009784:	2b08      	cmp	r3, #8
 8009786:	d10b      	bne.n	80097a0 <_printf_i+0x144>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	07df      	lsls	r7, r3, #31
 800978c:	d508      	bpl.n	80097a0 <_printf_i+0x144>
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	6861      	ldr	r1, [r4, #4]
 8009792:	4299      	cmp	r1, r3
 8009794:	bfde      	ittt	le
 8009796:	2330      	movle	r3, #48	@ 0x30
 8009798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800979c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097a0:	1b92      	subs	r2, r2, r6
 80097a2:	6122      	str	r2, [r4, #16]
 80097a4:	464b      	mov	r3, r9
 80097a6:	aa03      	add	r2, sp, #12
 80097a8:	4621      	mov	r1, r4
 80097aa:	4640      	mov	r0, r8
 80097ac:	f8cd a000 	str.w	sl, [sp]
 80097b0:	f7ff fee2 	bl	8009578 <_printf_common>
 80097b4:	3001      	adds	r0, #1
 80097b6:	d14a      	bne.n	800984e <_printf_i+0x1f2>
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	b004      	add	sp, #16
 80097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	f043 0320 	orr.w	r3, r3, #32
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	2778      	movs	r7, #120	@ 0x78
 80097cc:	4832      	ldr	r0, [pc, #200]	@ (8009898 <_printf_i+0x23c>)
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097d4:	061f      	lsls	r7, r3, #24
 80097d6:	6831      	ldr	r1, [r6, #0]
 80097d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80097dc:	d402      	bmi.n	80097e4 <_printf_i+0x188>
 80097de:	065f      	lsls	r7, r3, #25
 80097e0:	bf48      	it	mi
 80097e2:	b2ad      	uxthmi	r5, r5
 80097e4:	6031      	str	r1, [r6, #0]
 80097e6:	07d9      	lsls	r1, r3, #31
 80097e8:	bf44      	itt	mi
 80097ea:	f043 0320 	orrmi.w	r3, r3, #32
 80097ee:	6023      	strmi	r3, [r4, #0]
 80097f0:	b11d      	cbz	r5, 80097fa <_printf_i+0x19e>
 80097f2:	2310      	movs	r3, #16
 80097f4:	e7ac      	b.n	8009750 <_printf_i+0xf4>
 80097f6:	4827      	ldr	r0, [pc, #156]	@ (8009894 <_printf_i+0x238>)
 80097f8:	e7e9      	b.n	80097ce <_printf_i+0x172>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f023 0320 	bic.w	r3, r3, #32
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	e7f6      	b.n	80097f2 <_printf_i+0x196>
 8009804:	4616      	mov	r6, r2
 8009806:	e7bd      	b.n	8009784 <_printf_i+0x128>
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	6825      	ldr	r5, [r4, #0]
 800980c:	1d18      	adds	r0, r3, #4
 800980e:	6961      	ldr	r1, [r4, #20]
 8009810:	6030      	str	r0, [r6, #0]
 8009812:	062e      	lsls	r6, r5, #24
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	d501      	bpl.n	800981c <_printf_i+0x1c0>
 8009818:	6019      	str	r1, [r3, #0]
 800981a:	e002      	b.n	8009822 <_printf_i+0x1c6>
 800981c:	0668      	lsls	r0, r5, #25
 800981e:	d5fb      	bpl.n	8009818 <_printf_i+0x1bc>
 8009820:	8019      	strh	r1, [r3, #0]
 8009822:	2300      	movs	r3, #0
 8009824:	4616      	mov	r6, r2
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	e7bc      	b.n	80097a4 <_printf_i+0x148>
 800982a:	6833      	ldr	r3, [r6, #0]
 800982c:	2100      	movs	r1, #0
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	6032      	str	r2, [r6, #0]
 8009832:	681e      	ldr	r6, [r3, #0]
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	4630      	mov	r0, r6
 8009838:	f000 f9e9 	bl	8009c0e <memchr>
 800983c:	b108      	cbz	r0, 8009842 <_printf_i+0x1e6>
 800983e:	1b80      	subs	r0, r0, r6
 8009840:	6060      	str	r0, [r4, #4]
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	2300      	movs	r3, #0
 8009848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800984c:	e7aa      	b.n	80097a4 <_printf_i+0x148>
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	4632      	mov	r2, r6
 8009852:	4649      	mov	r1, r9
 8009854:	4640      	mov	r0, r8
 8009856:	47d0      	blx	sl
 8009858:	3001      	adds	r0, #1
 800985a:	d0ad      	beq.n	80097b8 <_printf_i+0x15c>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	079b      	lsls	r3, r3, #30
 8009860:	d413      	bmi.n	800988a <_printf_i+0x22e>
 8009862:	68e0      	ldr	r0, [r4, #12]
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	4298      	cmp	r0, r3
 8009868:	bfb8      	it	lt
 800986a:	4618      	movlt	r0, r3
 800986c:	e7a6      	b.n	80097bc <_printf_i+0x160>
 800986e:	2301      	movs	r3, #1
 8009870:	4632      	mov	r2, r6
 8009872:	4649      	mov	r1, r9
 8009874:	4640      	mov	r0, r8
 8009876:	47d0      	blx	sl
 8009878:	3001      	adds	r0, #1
 800987a:	d09d      	beq.n	80097b8 <_printf_i+0x15c>
 800987c:	3501      	adds	r5, #1
 800987e:	68e3      	ldr	r3, [r4, #12]
 8009880:	9903      	ldr	r1, [sp, #12]
 8009882:	1a5b      	subs	r3, r3, r1
 8009884:	42ab      	cmp	r3, r5
 8009886:	dcf2      	bgt.n	800986e <_printf_i+0x212>
 8009888:	e7eb      	b.n	8009862 <_printf_i+0x206>
 800988a:	2500      	movs	r5, #0
 800988c:	f104 0619 	add.w	r6, r4, #25
 8009890:	e7f5      	b.n	800987e <_printf_i+0x222>
 8009892:	bf00      	nop
 8009894:	0800c5c2 	.word	0x0800c5c2
 8009898:	0800c5d3 	.word	0x0800c5d3

0800989c <std>:
 800989c:	2300      	movs	r3, #0
 800989e:	b510      	push	{r4, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	6083      	str	r3, [r0, #8]
 80098a4:	8181      	strh	r1, [r0, #12]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6643      	str	r3, [r0, #100]	@ 0x64
 80098aa:	81c2      	strh	r2, [r0, #14]
 80098ac:	2208      	movs	r2, #8
 80098ae:	6183      	str	r3, [r0, #24]
 80098b0:	e9c0 3300 	strd	r3, r3, [r0]
 80098b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098b8:	305c      	adds	r0, #92	@ 0x5c
 80098ba:	f000 f928 	bl	8009b0e <memset>
 80098be:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <std+0x58>)
 80098c0:	6224      	str	r4, [r4, #32]
 80098c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80098c4:	4b0c      	ldr	r3, [pc, #48]	@ (80098f8 <std+0x5c>)
 80098c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098c8:	4b0c      	ldr	r3, [pc, #48]	@ (80098fc <std+0x60>)
 80098ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009900 <std+0x64>)
 80098ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80098d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009904 <std+0x68>)
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d006      	beq.n	80098e4 <std+0x48>
 80098d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80098da:	4294      	cmp	r4, r2
 80098dc:	d002      	beq.n	80098e4 <std+0x48>
 80098de:	33d0      	adds	r3, #208	@ 0xd0
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d105      	bne.n	80098f0 <std+0x54>
 80098e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ec:	f000 b98c 	b.w	8009c08 <__retarget_lock_init_recursive>
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	bf00      	nop
 80098f4:	08009a89 	.word	0x08009a89
 80098f8:	08009aab 	.word	0x08009aab
 80098fc:	08009ae3 	.word	0x08009ae3
 8009900:	08009b07 	.word	0x08009b07
 8009904:	20000978 	.word	0x20000978

08009908 <stdio_exit_handler>:
 8009908:	4a02      	ldr	r2, [pc, #8]	@ (8009914 <stdio_exit_handler+0xc>)
 800990a:	4903      	ldr	r1, [pc, #12]	@ (8009918 <stdio_exit_handler+0x10>)
 800990c:	4803      	ldr	r0, [pc, #12]	@ (800991c <stdio_exit_handler+0x14>)
 800990e:	f000 b869 	b.w	80099e4 <_fwalk_sglue>
 8009912:	bf00      	nop
 8009914:	20000014 	.word	0x20000014
 8009918:	0800b599 	.word	0x0800b599
 800991c:	20000024 	.word	0x20000024

08009920 <cleanup_stdio>:
 8009920:	6841      	ldr	r1, [r0, #4]
 8009922:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <cleanup_stdio+0x34>)
 8009924:	4299      	cmp	r1, r3
 8009926:	b510      	push	{r4, lr}
 8009928:	4604      	mov	r4, r0
 800992a:	d001      	beq.n	8009930 <cleanup_stdio+0x10>
 800992c:	f001 fe34 	bl	800b598 <_fflush_r>
 8009930:	68a1      	ldr	r1, [r4, #8]
 8009932:	4b09      	ldr	r3, [pc, #36]	@ (8009958 <cleanup_stdio+0x38>)
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <cleanup_stdio+0x1e>
 8009938:	4620      	mov	r0, r4
 800993a:	f001 fe2d 	bl	800b598 <_fflush_r>
 800993e:	68e1      	ldr	r1, [r4, #12]
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <cleanup_stdio+0x3c>)
 8009942:	4299      	cmp	r1, r3
 8009944:	d004      	beq.n	8009950 <cleanup_stdio+0x30>
 8009946:	4620      	mov	r0, r4
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f001 be24 	b.w	800b598 <_fflush_r>
 8009950:	bd10      	pop	{r4, pc}
 8009952:	bf00      	nop
 8009954:	20000978 	.word	0x20000978
 8009958:	200009e0 	.word	0x200009e0
 800995c:	20000a48 	.word	0x20000a48

08009960 <global_stdio_init.part.0>:
 8009960:	b510      	push	{r4, lr}
 8009962:	4b0b      	ldr	r3, [pc, #44]	@ (8009990 <global_stdio_init.part.0+0x30>)
 8009964:	2104      	movs	r1, #4
 8009966:	4c0b      	ldr	r4, [pc, #44]	@ (8009994 <global_stdio_init.part.0+0x34>)
 8009968:	4a0b      	ldr	r2, [pc, #44]	@ (8009998 <global_stdio_init.part.0+0x38>)
 800996a:	4620      	mov	r0, r4
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	f7ff ff94 	bl	800989c <std>
 8009974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009978:	2201      	movs	r2, #1
 800997a:	2109      	movs	r1, #9
 800997c:	f7ff ff8e 	bl	800989c <std>
 8009980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009984:	2202      	movs	r2, #2
 8009986:	2112      	movs	r1, #18
 8009988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998c:	f7ff bf86 	b.w	800989c <std>
 8009990:	20000ab0 	.word	0x20000ab0
 8009994:	20000978 	.word	0x20000978
 8009998:	08009909 	.word	0x08009909

0800999c <__sfp_lock_acquire>:
 800999c:	4801      	ldr	r0, [pc, #4]	@ (80099a4 <__sfp_lock_acquire+0x8>)
 800999e:	f000 b934 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000ab9 	.word	0x20000ab9

080099a8 <__sfp_lock_release>:
 80099a8:	4801      	ldr	r0, [pc, #4]	@ (80099b0 <__sfp_lock_release+0x8>)
 80099aa:	f000 b92f 	b.w	8009c0c <__retarget_lock_release_recursive>
 80099ae:	bf00      	nop
 80099b0:	20000ab9 	.word	0x20000ab9

080099b4 <__sinit>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	f7ff fff0 	bl	800999c <__sfp_lock_acquire>
 80099bc:	6a23      	ldr	r3, [r4, #32]
 80099be:	b11b      	cbz	r3, 80099c8 <__sinit+0x14>
 80099c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c4:	f7ff bff0 	b.w	80099a8 <__sfp_lock_release>
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <__sinit+0x28>)
 80099ca:	6223      	str	r3, [r4, #32]
 80099cc:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <__sinit+0x2c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f5      	bne.n	80099c0 <__sinit+0xc>
 80099d4:	f7ff ffc4 	bl	8009960 <global_stdio_init.part.0>
 80099d8:	e7f2      	b.n	80099c0 <__sinit+0xc>
 80099da:	bf00      	nop
 80099dc:	08009921 	.word	0x08009921
 80099e0:	20000ab0 	.word	0x20000ab0

080099e4 <_fwalk_sglue>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4607      	mov	r7, r0
 80099ea:	4688      	mov	r8, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	2600      	movs	r6, #0
 80099f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f4:	f1b9 0901 	subs.w	r9, r9, #1
 80099f8:	d505      	bpl.n	8009a06 <_fwalk_sglue+0x22>
 80099fa:	6824      	ldr	r4, [r4, #0]
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d1f7      	bne.n	80099f0 <_fwalk_sglue+0xc>
 8009a00:	4630      	mov	r0, r6
 8009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d907      	bls.n	8009a1c <_fwalk_sglue+0x38>
 8009a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a10:	3301      	adds	r3, #1
 8009a12:	d003      	beq.n	8009a1c <_fwalk_sglue+0x38>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4638      	mov	r0, r7
 8009a18:	47c0      	blx	r8
 8009a1a:	4306      	orrs	r6, r0
 8009a1c:	3568      	adds	r5, #104	@ 0x68
 8009a1e:	e7e9      	b.n	80099f4 <_fwalk_sglue+0x10>

08009a20 <sniprintf>:
 8009a20:	b40c      	push	{r2, r3}
 8009a22:	4b18      	ldr	r3, [pc, #96]	@ (8009a84 <sniprintf+0x64>)
 8009a24:	b530      	push	{r4, r5, lr}
 8009a26:	1e0c      	subs	r4, r1, #0
 8009a28:	b09d      	sub	sp, #116	@ 0x74
 8009a2a:	681d      	ldr	r5, [r3, #0]
 8009a2c:	da08      	bge.n	8009a40 <sniprintf+0x20>
 8009a2e:	238b      	movs	r3, #139	@ 0x8b
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	b01d      	add	sp, #116	@ 0x74
 8009a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a3c:	b002      	add	sp, #8
 8009a3e:	4770      	bx	lr
 8009a40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009a44:	9002      	str	r0, [sp, #8]
 8009a46:	9006      	str	r0, [sp, #24]
 8009a48:	a902      	add	r1, sp, #8
 8009a4a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009a4e:	bf14      	ite	ne
 8009a50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a54:	4623      	moveq	r3, r4
 8009a56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009a58:	4628      	mov	r0, r5
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9307      	str	r3, [sp, #28]
 8009a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a66:	ab21      	add	r3, sp, #132	@ 0x84
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	f001 fc15 	bl	800b298 <_svfiprintf_r>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	bfbc      	itt	lt
 8009a72:	238b      	movlt	r3, #139	@ 0x8b
 8009a74:	602b      	strlt	r3, [r5, #0]
 8009a76:	2c00      	cmp	r4, #0
 8009a78:	d0dd      	beq.n	8009a36 <sniprintf+0x16>
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
 8009a80:	e7d9      	b.n	8009a36 <sniprintf+0x16>
 8009a82:	bf00      	nop
 8009a84:	20000020 	.word	0x20000020

08009a88 <__sread>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a90:	f000 f86c 	bl	8009b6c <_read_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	bfab      	itete	ge
 8009a98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a9c:	181b      	addge	r3, r3, r0
 8009a9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009aa2:	bfac      	ite	ge
 8009aa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009aa6:	81a3      	strhlt	r3, [r4, #12]
 8009aa8:	bd10      	pop	{r4, pc}

08009aaa <__swrite>:
 8009aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aae:	461f      	mov	r7, r3
 8009ab0:	898b      	ldrh	r3, [r1, #12]
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	05db      	lsls	r3, r3, #23
 8009ab8:	4616      	mov	r6, r2
 8009aba:	d505      	bpl.n	8009ac8 <__swrite+0x1e>
 8009abc:	2302      	movs	r3, #2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac4:	f000 f840 	bl	8009b48 <_lseek_r>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	4632      	mov	r2, r6
 8009acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	463b      	mov	r3, r7
 8009ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ade:	f000 b857 	b.w	8009b90 <_write_r>

08009ae2 <__sseek>:
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aea:	f000 f82d 	bl	8009b48 <_lseek_r>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	bf15      	itete	ne
 8009af4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009af6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009afa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009afe:	81a3      	strheq	r3, [r4, #12]
 8009b00:	bf18      	it	ne
 8009b02:	81a3      	strhne	r3, [r4, #12]
 8009b04:	bd10      	pop	{r4, pc}

08009b06 <__sclose>:
 8009b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b0a:	f000 b80d 	b.w	8009b28 <_close_r>

08009b0e <memset>:
 8009b0e:	4402      	add	r2, r0
 8009b10:	4603      	mov	r3, r0
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d100      	bne.n	8009b18 <memset+0xa>
 8009b16:	4770      	bx	lr
 8009b18:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1c:	e7f9      	b.n	8009b12 <memset+0x4>
	...

08009b20 <_localeconv_r>:
 8009b20:	4800      	ldr	r0, [pc, #0]	@ (8009b24 <_localeconv_r+0x4>)
 8009b22:	4770      	bx	lr
 8009b24:	20000160 	.word	0x20000160

08009b28 <_close_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4d05      	ldr	r5, [pc, #20]	@ (8009b44 <_close_r+0x1c>)
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	602b      	str	r3, [r5, #0]
 8009b34:	f7f9 f80a 	bl	8002b4c <_close>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_close_r+0x1a>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_close_r+0x1a>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20000ab4 	.word	0x20000ab4

08009b48 <_lseek_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4d06      	ldr	r5, [pc, #24]	@ (8009b68 <_lseek_r+0x20>)
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7f9 f81f 	bl	8002b9a <_lseek>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_lseek_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_lseek_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20000ab4 	.word	0x20000ab4

08009b6c <_read_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4d06      	ldr	r5, [pc, #24]	@ (8009b8c <_read_r+0x20>)
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	602a      	str	r2, [r5, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f7f8 ffad 	bl	8002ada <_read>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_read_r+0x1e>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_read_r+0x1e>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20000ab4 	.word	0x20000ab4

08009b90 <_write_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4604      	mov	r4, r0
 8009b94:	4d06      	ldr	r5, [pc, #24]	@ (8009bb0 <_write_r+0x20>)
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f8 ffb8 	bl	8002b14 <_write>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_write_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_write_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000ab4 	.word	0x20000ab4

08009bb4 <__errno>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	@ (8009bbc <__errno+0x8>)
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000020 	.word	0x20000020

08009bc0 <__libc_init_array>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8009bf8 <__libc_init_array+0x38>)
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8009bfc <__libc_init_array+0x3c>)
 8009bc8:	1b64      	subs	r4, r4, r5
 8009bca:	10a4      	asrs	r4, r4, #2
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	d109      	bne.n	8009be4 <__libc_init_array+0x24>
 8009bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8009c00 <__libc_init_array+0x40>)
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8009c04 <__libc_init_array+0x44>)
 8009bd6:	f002 f87d 	bl	800bcd4 <_init>
 8009bda:	1b64      	subs	r4, r4, r5
 8009bdc:	10a4      	asrs	r4, r4, #2
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	d105      	bne.n	8009bee <__libc_init_array+0x2e>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be8:	3601      	adds	r6, #1
 8009bea:	4798      	blx	r3
 8009bec:	e7ee      	b.n	8009bcc <__libc_init_array+0xc>
 8009bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	4798      	blx	r3
 8009bf6:	e7f2      	b.n	8009bde <__libc_init_array+0x1e>
 8009bf8:	0800c928 	.word	0x0800c928
 8009bfc:	0800c928 	.word	0x0800c928
 8009c00:	0800c928 	.word	0x0800c928
 8009c04:	0800c92c 	.word	0x0800c92c

08009c08 <__retarget_lock_init_recursive>:
 8009c08:	4770      	bx	lr

08009c0a <__retarget_lock_acquire_recursive>:
 8009c0a:	4770      	bx	lr

08009c0c <__retarget_lock_release_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <memchr>:
 8009c0e:	b2c9      	uxtb	r1, r1
 8009c10:	4603      	mov	r3, r0
 8009c12:	4402      	add	r2, r0
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4293      	cmp	r3, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	d101      	bne.n	8009c20 <memchr+0x12>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e003      	b.n	8009c28 <memchr+0x1a>
 8009c20:	7804      	ldrb	r4, [r0, #0]
 8009c22:	3301      	adds	r3, #1
 8009c24:	428c      	cmp	r4, r1
 8009c26:	d1f6      	bne.n	8009c16 <memchr+0x8>
 8009c28:	bd10      	pop	{r4, pc}

08009c2a <quorem>:
 8009c2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2e:	6903      	ldr	r3, [r0, #16]
 8009c30:	4607      	mov	r7, r0
 8009c32:	690c      	ldr	r4, [r1, #16]
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	f2c0 8083 	blt.w	8009d40 <quorem+0x116>
 8009c3a:	3c01      	subs	r4, #1
 8009c3c:	f100 0514 	add.w	r5, r0, #20
 8009c40:	f101 0814 	add.w	r8, r1, #20
 8009c44:	00a3      	lsls	r3, r4, #2
 8009c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c62:	d331      	bcc.n	8009cc8 <quorem+0x9e>
 8009c64:	f04f 0a00 	mov.w	sl, #0
 8009c68:	46c4      	mov	ip, r8
 8009c6a:	46ae      	mov	lr, r5
 8009c6c:	46d3      	mov	fp, sl
 8009c6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c72:	b298      	uxth	r0, r3
 8009c74:	45e1      	cmp	r9, ip
 8009c76:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009c7a:	fb06 a000 	mla	r0, r6, r0, sl
 8009c7e:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009c82:	b280      	uxth	r0, r0
 8009c84:	fb06 2303 	mla	r3, r6, r3, r2
 8009c88:	f8de 2000 	ldr.w	r2, [lr]
 8009c8c:	b292      	uxth	r2, r2
 8009c8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c92:	eba2 0200 	sub.w	r2, r2, r0
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f8de 0000 	ldr.w	r0, [lr]
 8009c9c:	445a      	add	r2, fp
 8009c9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ca2:	b292      	uxth	r2, r2
 8009ca4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ca8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cb0:	f84e 2b04 	str.w	r2, [lr], #4
 8009cb4:	d2db      	bcs.n	8009c6e <quorem+0x44>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	58eb      	ldr	r3, [r5, r3]
 8009cba:	b92b      	cbnz	r3, 8009cc8 <quorem+0x9e>
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	3b04      	subs	r3, #4
 8009cc0:	429d      	cmp	r5, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	d330      	bcc.n	8009d28 <quorem+0xfe>
 8009cc6:	613c      	str	r4, [r7, #16]
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f001 f97d 	bl	800afc8 <__mcmp>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	db26      	blt.n	8009d20 <quorem+0xf6>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cda:	f8d1 c000 	ldr.w	ip, [r1]
 8009cde:	fa1f fe82 	uxth.w	lr, r2
 8009ce2:	45c1      	cmp	r9, r8
 8009ce4:	fa1f f38c 	uxth.w	r3, ip
 8009ce8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009cec:	eba3 030e 	sub.w	r3, r3, lr
 8009cf0:	4403      	add	r3, r0
 8009cf2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d04:	f841 3b04 	str.w	r3, [r1], #4
 8009d08:	d2e5      	bcs.n	8009cd6 <quorem+0xac>
 8009d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d12:	b922      	cbnz	r2, 8009d1e <quorem+0xf4>
 8009d14:	3b04      	subs	r3, #4
 8009d16:	429d      	cmp	r5, r3
 8009d18:	461a      	mov	r2, r3
 8009d1a:	d30b      	bcc.n	8009d34 <quorem+0x10a>
 8009d1c:	613c      	str	r4, [r7, #16]
 8009d1e:	3601      	adds	r6, #1
 8009d20:	4630      	mov	r0, r6
 8009d22:	b003      	add	sp, #12
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d1ca      	bne.n	8009cc6 <quorem+0x9c>
 8009d30:	3c01      	subs	r4, #1
 8009d32:	e7c5      	b.n	8009cc0 <quorem+0x96>
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	3b04      	subs	r3, #4
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d1ef      	bne.n	8009d1c <quorem+0xf2>
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	e7ea      	b.n	8009d16 <quorem+0xec>
 8009d40:	2000      	movs	r0, #0
 8009d42:	e7ee      	b.n	8009d22 <quorem+0xf8>
 8009d44:	0000      	movs	r0, r0
	...

08009d48 <_dtoa_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	69c7      	ldr	r7, [r0, #28]
 8009d4e:	b099      	sub	sp, #100	@ 0x64
 8009d50:	4683      	mov	fp, r0
 8009d52:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d54:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d56:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d5a:	ec55 4b10 	vmov	r4, r5, d0
 8009d5e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d62:	b97f      	cbnz	r7, 8009d84 <_dtoa_r+0x3c>
 8009d64:	2010      	movs	r0, #16
 8009d66:	f000 fdfd 	bl	800a964 <malloc>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d70:	b920      	cbnz	r0, 8009d7c <_dtoa_r+0x34>
 8009d72:	4ba7      	ldr	r3, [pc, #668]	@ (800a010 <_dtoa_r+0x2c8>)
 8009d74:	21ef      	movs	r1, #239	@ 0xef
 8009d76:	48a7      	ldr	r0, [pc, #668]	@ (800a014 <_dtoa_r+0x2cc>)
 8009d78:	f001 fc6e 	bl	800b658 <__assert_func>
 8009d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d80:	6007      	str	r7, [r0, #0]
 8009d82:	60c7      	str	r7, [r0, #12]
 8009d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d88:	6819      	ldr	r1, [r3, #0]
 8009d8a:	b159      	cbz	r1, 8009da4 <_dtoa_r+0x5c>
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4658      	mov	r0, fp
 8009d92:	4093      	lsls	r3, r2
 8009d94:	604a      	str	r2, [r1, #4]
 8009d96:	608b      	str	r3, [r1, #8]
 8009d98:	f000 feda 	bl	800ab50 <_Bfree>
 8009d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	1e2b      	subs	r3, r5, #0
 8009da6:	bfb7      	itett	lt
 8009da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dac:	2300      	movge	r3, #0
 8009dae:	2201      	movlt	r2, #1
 8009db0:	9303      	strlt	r3, [sp, #12]
 8009db2:	bfa8      	it	ge
 8009db4:	6033      	strge	r3, [r6, #0]
 8009db6:	9f03      	ldr	r7, [sp, #12]
 8009db8:	4b97      	ldr	r3, [pc, #604]	@ (800a018 <_dtoa_r+0x2d0>)
 8009dba:	bfb8      	it	lt
 8009dbc:	6032      	strlt	r2, [r6, #0]
 8009dbe:	43bb      	bics	r3, r7
 8009dc0:	d112      	bne.n	8009de8 <_dtoa_r+0xa0>
 8009dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dce:	4323      	orrs	r3, r4
 8009dd0:	f000 854c 	beq.w	800a86c <_dtoa_r+0xb24>
 8009dd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dd6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a02c <_dtoa_r+0x2e4>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 854e 	beq.w	800a87c <_dtoa_r+0xb34>
 8009de0:	f10a 0303 	add.w	r3, sl, #3
 8009de4:	f000 bd48 	b.w	800a878 <_dtoa_r+0xb30>
 8009de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dec:	2200      	movs	r2, #0
 8009dee:	2300      	movs	r3, #0
 8009df0:	ec51 0b17 	vmov	r0, r1, d7
 8009df4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009df8:	f7f6 fe6a 	bl	8000ad0 <__aeabi_dcmpeq>
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	b158      	cbz	r0, 8009e18 <_dtoa_r+0xd0>
 8009e00:	2301      	movs	r3, #1
 8009e02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e08:	b113      	cbz	r3, 8009e10 <_dtoa_r+0xc8>
 8009e0a:	4b84      	ldr	r3, [pc, #528]	@ (800a01c <_dtoa_r+0x2d4>)
 8009e0c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800a030 <_dtoa_r+0x2e8>
 8009e14:	f000 bd32 	b.w	800a87c <_dtoa_r+0xb34>
 8009e18:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e1c:	aa16      	add	r2, sp, #88	@ 0x58
 8009e1e:	a917      	add	r1, sp, #92	@ 0x5c
 8009e20:	4658      	mov	r0, fp
 8009e22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e26:	f001 f983 	bl	800b130 <__d2b>
 8009e2a:	4681      	mov	r9, r0
 8009e2c:	2e00      	cmp	r6, #0
 8009e2e:	d075      	beq.n	8009f1c <_dtoa_r+0x1d4>
 8009e30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e32:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e36:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e3e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e46:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4b74      	ldr	r3, [pc, #464]	@ (800a020 <_dtoa_r+0x2d8>)
 8009e50:	f7f6 fa1e 	bl	8000290 <__aeabi_dsub>
 8009e54:	a368      	add	r3, pc, #416	@ (adr r3, 8009ff8 <_dtoa_r+0x2b0>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fbd1 	bl	8000600 <__aeabi_dmul>
 8009e5e:	a368      	add	r3, pc, #416	@ (adr r3, 800a000 <_dtoa_r+0x2b8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 fa16 	bl	8000294 <__adddf3>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7f6 fb5d 	bl	800052c <__aeabi_i2d>
 8009e72:	a365      	add	r3, pc, #404	@ (adr r3, 800a008 <_dtoa_r+0x2c0>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fbc2 	bl	8000600 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 fa06 	bl	8000294 <__adddf3>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	f7f6 fe68 	bl	8000b60 <__aeabi_d2iz>
 8009e90:	2200      	movs	r2, #0
 8009e92:	4607      	mov	r7, r0
 8009e94:	2300      	movs	r3, #0
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fe23 	bl	8000ae4 <__aeabi_dcmplt>
 8009e9e:	b140      	cbz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7f6 fb43 	bl	800052c <__aeabi_i2d>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	f7f6 fe11 	bl	8000ad0 <__aeabi_dcmpeq>
 8009eae:	b900      	cbnz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009eb0:	3f01      	subs	r7, #1
 8009eb2:	2f16      	cmp	r7, #22
 8009eb4:	d851      	bhi.n	8009f5a <_dtoa_r+0x212>
 8009eb6:	4b5b      	ldr	r3, [pc, #364]	@ (800a024 <_dtoa_r+0x2dc>)
 8009eb8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fe0e 	bl	8000ae4 <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d048      	beq.n	8009f5e <_dtoa_r+0x216>
 8009ecc:	3f01      	subs	r7, #1
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ed2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ed4:	1b9b      	subs	r3, r3, r6
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	bf46      	itte	mi
 8009eda:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ede:	2300      	movmi	r3, #0
 8009ee0:	f04f 0800 	movpl.w	r8, #0
 8009ee4:	9208      	str	r2, [sp, #32]
 8009ee6:	bf48      	it	mi
 8009ee8:	9308      	strmi	r3, [sp, #32]
 8009eea:	2f00      	cmp	r7, #0
 8009eec:	db39      	blt.n	8009f62 <_dtoa_r+0x21a>
 8009eee:	9b08      	ldr	r3, [sp, #32]
 8009ef0:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ef2:	443b      	add	r3, r7
 8009ef4:	9308      	str	r3, [sp, #32]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d864      	bhi.n	8009fca <_dtoa_r+0x282>
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	bfc5      	ittet	gt
 8009f04:	3b04      	subgt	r3, #4
 8009f06:	2400      	movgt	r4, #0
 8009f08:	2401      	movle	r4, #1
 8009f0a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0e:	3b02      	subs	r3, #2
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d865      	bhi.n	8009fe0 <_dtoa_r+0x298>
 8009f14:	e8df f003 	tbb	[pc, r3]
 8009f18:	5737392c 	.word	0x5737392c
 8009f1c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009f20:	441e      	add	r6, r3
 8009f22:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	bfc9      	itett	gt
 8009f2a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f2e:	f1c3 0320 	rsble	r3, r3, #32
 8009f32:	409f      	lslgt	r7, r3
 8009f34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f38:	bfd8      	it	le
 8009f3a:	fa04 f003 	lslle.w	r0, r4, r3
 8009f3e:	f106 36ff 	add.w	r6, r6, #4294967295
 8009f42:	bfc4      	itt	gt
 8009f44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f48:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f4c:	f7f6 fade 	bl	800050c <__aeabi_ui2d>
 8009f50:	2201      	movs	r2, #1
 8009f52:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f56:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f58:	e777      	b.n	8009e4a <_dtoa_r+0x102>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e7b8      	b.n	8009ed0 <_dtoa_r+0x188>
 8009f5e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f60:	e7b7      	b.n	8009ed2 <_dtoa_r+0x18a>
 8009f62:	427b      	negs	r3, r7
 8009f64:	eba8 0807 	sub.w	r8, r8, r7
 8009f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f6e:	e7c4      	b.n	8009efa <_dtoa_r+0x1b2>
 8009f70:	2300      	movs	r3, #0
 8009f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dc35      	bgt.n	8009fe6 <_dtoa_r+0x29e>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f84:	e00b      	b.n	8009f9e <_dtoa_r+0x256>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7f3      	b.n	8009f72 <_dtoa_r+0x22a>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f90:	18fb      	adds	r3, r7, r3
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	2301      	movlt	r3, #1
 8009f9e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	f102 0514 	add.w	r5, r2, #20
 8009faa:	429d      	cmp	r5, r3
 8009fac:	d91f      	bls.n	8009fee <_dtoa_r+0x2a6>
 8009fae:	6041      	str	r1, [r0, #4]
 8009fb0:	4658      	mov	r0, fp
 8009fb2:	f000 fd8d 	bl	800aad0 <_Balloc>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d13b      	bne.n	800a034 <_dtoa_r+0x2ec>
 8009fbc:	4b1a      	ldr	r3, [pc, #104]	@ (800a028 <_dtoa_r+0x2e0>)
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fc4:	e6d7      	b.n	8009d76 <_dtoa_r+0x2e>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e7e0      	b.n	8009f8c <_dtoa_r+0x244>
 8009fca:	2401      	movs	r4, #1
 8009fcc:	2300      	movs	r3, #0
 8009fce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	2312      	movs	r3, #18
 8009fde:	e7d0      	b.n	8009f82 <_dtoa_r+0x23a>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe4:	e7f5      	b.n	8009fd2 <_dtoa_r+0x28a>
 8009fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	e7d7      	b.n	8009f9e <_dtoa_r+0x256>
 8009fee:	3101      	adds	r1, #1
 8009ff0:	0052      	lsls	r2, r2, #1
 8009ff2:	e7d8      	b.n	8009fa6 <_dtoa_r+0x25e>
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	636f4361 	.word	0x636f4361
 8009ffc:	3fd287a7 	.word	0x3fd287a7
 800a000:	8b60c8b3 	.word	0x8b60c8b3
 800a004:	3fc68a28 	.word	0x3fc68a28
 800a008:	509f79fb 	.word	0x509f79fb
 800a00c:	3fd34413 	.word	0x3fd34413
 800a010:	0800c5f1 	.word	0x0800c5f1
 800a014:	0800c608 	.word	0x0800c608
 800a018:	7ff00000 	.word	0x7ff00000
 800a01c:	0800c5c1 	.word	0x0800c5c1
 800a020:	3ff80000 	.word	0x3ff80000
 800a024:	0800c700 	.word	0x0800c700
 800a028:	0800c660 	.word	0x0800c660
 800a02c:	0800c5ed 	.word	0x0800c5ed
 800a030:	0800c5c0 	.word	0x0800c5c0
 800a034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a038:	6018      	str	r0, [r3, #0]
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	2b0e      	cmp	r3, #14
 800a03e:	f200 80a4 	bhi.w	800a18a <_dtoa_r+0x442>
 800a042:	2c00      	cmp	r4, #0
 800a044:	f000 80a1 	beq.w	800a18a <_dtoa_r+0x442>
 800a048:	2f00      	cmp	r7, #0
 800a04a:	dd33      	ble.n	800a0b4 <_dtoa_r+0x36c>
 800a04c:	f007 020f 	and.w	r2, r7, #15
 800a050:	4bac      	ldr	r3, [pc, #688]	@ (800a304 <_dtoa_r+0x5bc>)
 800a052:	05f8      	lsls	r0, r7, #23
 800a054:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a05c:	ed93 7b00 	vldr	d7, [r3]
 800a060:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a064:	d516      	bpl.n	800a094 <_dtoa_r+0x34c>
 800a066:	4ba8      	ldr	r3, [pc, #672]	@ (800a308 <_dtoa_r+0x5c0>)
 800a068:	f004 040f 	and.w	r4, r4, #15
 800a06c:	2603      	movs	r6, #3
 800a06e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a076:	f7f6 fbed 	bl	8000854 <__aeabi_ddiv>
 800a07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07e:	4da2      	ldr	r5, [pc, #648]	@ (800a308 <_dtoa_r+0x5c0>)
 800a080:	b954      	cbnz	r4, 800a098 <_dtoa_r+0x350>
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fbe3 	bl	8000854 <__aeabi_ddiv>
 800a08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a092:	e028      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a094:	2602      	movs	r6, #2
 800a096:	e7f2      	b.n	800a07e <_dtoa_r+0x336>
 800a098:	07e1      	lsls	r1, r4, #31
 800a09a:	d508      	bpl.n	800a0ae <_dtoa_r+0x366>
 800a09c:	3601      	adds	r6, #1
 800a09e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0a6:	f7f6 faab 	bl	8000600 <__aeabi_dmul>
 800a0aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ae:	1064      	asrs	r4, r4, #1
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	e7e5      	b.n	800a080 <_dtoa_r+0x338>
 800a0b4:	f000 80d2 	beq.w	800a25c <_dtoa_r+0x514>
 800a0b8:	427c      	negs	r4, r7
 800a0ba:	4b92      	ldr	r3, [pc, #584]	@ (800a304 <_dtoa_r+0x5bc>)
 800a0bc:	4d92      	ldr	r5, [pc, #584]	@ (800a308 <_dtoa_r+0x5c0>)
 800a0be:	2602      	movs	r6, #2
 800a0c0:	f004 020f 	and.w	r2, r4, #15
 800a0c4:	1124      	asrs	r4, r4, #4
 800a0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 fa95 	bl	8000600 <__aeabi_dmul>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	f040 80b2 	bne.w	800a246 <_dtoa_r+0x4fe>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1d3      	bne.n	800a08e <_dtoa_r+0x346>
 800a0e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80b7 	beq.w	800a260 <_dtoa_r+0x518>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4b85      	ldr	r3, [pc, #532]	@ (800a30c <_dtoa_r+0x5c4>)
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f7f6 fcf3 	bl	8000ae4 <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f000 80ae 	beq.w	800a260 <_dtoa_r+0x518>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80aa 	beq.w	800a260 <_dtoa_r+0x518>
 800a10c:	9b00      	ldr	r3, [sp, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dd37      	ble.n	800a182 <_dtoa_r+0x43a>
 800a112:	1e7b      	subs	r3, r7, #1
 800a114:	4620      	mov	r0, r4
 800a116:	2200      	movs	r2, #0
 800a118:	4629      	mov	r1, r5
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	3601      	adds	r6, #1
 800a11e:	4b7c      	ldr	r3, [pc, #496]	@ (800a310 <_dtoa_r+0x5c8>)
 800a120:	f7f6 fa6e 	bl	8000600 <__aeabi_dmul>
 800a124:	9c00      	ldr	r4, [sp, #0]
 800a126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7f6 f9fe 	bl	800052c <__aeabi_i2d>
 800a130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a134:	f7f6 fa64 	bl	8000600 <__aeabi_dmul>
 800a138:	2200      	movs	r2, #0
 800a13a:	4b76      	ldr	r3, [pc, #472]	@ (800a314 <_dtoa_r+0x5cc>)
 800a13c:	f7f6 f8aa 	bl	8000294 <__adddf3>
 800a140:	4605      	mov	r5, r0
 800a142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a146:	2c00      	cmp	r4, #0
 800a148:	f040 808d 	bne.w	800a266 <_dtoa_r+0x51e>
 800a14c:	2200      	movs	r2, #0
 800a14e:	4b72      	ldr	r3, [pc, #456]	@ (800a318 <_dtoa_r+0x5d0>)
 800a150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a154:	f7f6 f89c 	bl	8000290 <__aeabi_dsub>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a160:	462a      	mov	r2, r5
 800a162:	4633      	mov	r3, r6
 800a164:	f7f6 fcdc 	bl	8000b20 <__aeabi_dcmpgt>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f040 828b 	bne.w	800a684 <_dtoa_r+0x93c>
 800a16e:	462a      	mov	r2, r5
 800a170:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	f7f6 fcb4 	bl	8000ae4 <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f040 8128 	bne.w	800a3d2 <_dtoa_r+0x68a>
 800a182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a18a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f2c0 815a 	blt.w	800a446 <_dtoa_r+0x6fe>
 800a192:	2f0e      	cmp	r7, #14
 800a194:	f300 8157 	bgt.w	800a446 <_dtoa_r+0x6fe>
 800a198:	4b5a      	ldr	r3, [pc, #360]	@ (800a304 <_dtoa_r+0x5bc>)
 800a19a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a19e:	ed93 7b00 	vldr	d7, [r3]
 800a1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	ed8d 7b00 	vstr	d7, [sp]
 800a1aa:	da03      	bge.n	800a1b4 <_dtoa_r+0x46c>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f340 8101 	ble.w	800a3b6 <_dtoa_r+0x66e>
 800a1b4:	4656      	mov	r6, sl
 800a1b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fb47 	bl	8000854 <__aeabi_ddiv>
 800a1c6:	f7f6 fccb 	bl	8000b60 <__aeabi_d2iz>
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	f7f6 f9ae 	bl	800052c <__aeabi_i2d>
 800a1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d4:	f7f6 fa14 	bl	8000600 <__aeabi_dmul>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 f854 	bl	8000290 <__aeabi_dsub>
 800a1e8:	9d07      	ldr	r5, [sp, #28]
 800a1ea:	f806 4b01 	strb.w	r4, [r6], #1
 800a1ee:	eba6 040a 	sub.w	r4, r6, sl
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	42a5      	cmp	r5, r4
 800a1f8:	f040 8117 	bne.w	800a42a <_dtoa_r+0x6e2>
 800a1fc:	f7f6 f84a 	bl	8000294 <__adddf3>
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a208:	f7f6 fc8a 	bl	8000b20 <__aeabi_dcmpgt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 80f9 	bne.w	800a404 <_dtoa_r+0x6bc>
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21a:	f7f6 fc59 	bl	8000ad0 <__aeabi_dcmpeq>
 800a21e:	b118      	cbz	r0, 800a228 <_dtoa_r+0x4e0>
 800a220:	f018 0f01 	tst.w	r8, #1
 800a224:	f040 80ee 	bne.w	800a404 <_dtoa_r+0x6bc>
 800a228:	4649      	mov	r1, r9
 800a22a:	4658      	mov	r0, fp
 800a22c:	f000 fc90 	bl	800ab50 <_Bfree>
 800a230:	2300      	movs	r3, #0
 800a232:	3701      	adds	r7, #1
 800a234:	7033      	strb	r3, [r6, #0]
 800a236:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a238:	601f      	str	r7, [r3, #0]
 800a23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 831d 	beq.w	800a87c <_dtoa_r+0xb34>
 800a242:	601e      	str	r6, [r3, #0]
 800a244:	e31a      	b.n	800a87c <_dtoa_r+0xb34>
 800a246:	07e2      	lsls	r2, r4, #31
 800a248:	d505      	bpl.n	800a256 <_dtoa_r+0x50e>
 800a24a:	3601      	adds	r6, #1
 800a24c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a250:	f7f6 f9d6 	bl	8000600 <__aeabi_dmul>
 800a254:	2301      	movs	r3, #1
 800a256:	1064      	asrs	r4, r4, #1
 800a258:	3508      	adds	r5, #8
 800a25a:	e73f      	b.n	800a0dc <_dtoa_r+0x394>
 800a25c:	2602      	movs	r6, #2
 800a25e:	e742      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a260:	9c07      	ldr	r4, [sp, #28]
 800a262:	9704      	str	r7, [sp, #16]
 800a264:	e761      	b.n	800a12a <_dtoa_r+0x3e2>
 800a266:	4b27      	ldr	r3, [pc, #156]	@ (800a304 <_dtoa_r+0x5bc>)
 800a268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a26a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a26e:	4454      	add	r4, sl
 800a270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a274:	2900      	cmp	r1, #0
 800a276:	d053      	beq.n	800a320 <_dtoa_r+0x5d8>
 800a278:	2000      	movs	r0, #0
 800a27a:	4928      	ldr	r1, [pc, #160]	@ (800a31c <_dtoa_r+0x5d4>)
 800a27c:	f7f6 faea 	bl	8000854 <__aeabi_ddiv>
 800a280:	4633      	mov	r3, r6
 800a282:	4656      	mov	r6, sl
 800a284:	462a      	mov	r2, r5
 800a286:	f7f6 f803 	bl	8000290 <__aeabi_dsub>
 800a28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a292:	f7f6 fc65 	bl	8000b60 <__aeabi_d2iz>
 800a296:	4605      	mov	r5, r0
 800a298:	f7f6 f948 	bl	800052c <__aeabi_i2d>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	3530      	adds	r5, #48	@ 0x30
 800a2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a6:	f7f5 fff3 	bl	8000290 <__aeabi_dsub>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	f806 5b01 	strb.w	r5, [r6], #1
 800a2b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2ba:	f7f6 fc13 	bl	8000ae4 <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d171      	bne.n	800a3a6 <_dtoa_r+0x65e>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	4911      	ldr	r1, [pc, #68]	@ (800a30c <_dtoa_r+0x5c4>)
 800a2c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ca:	f7f5 ffe1 	bl	8000290 <__aeabi_dsub>
 800a2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2d2:	f7f6 fc07 	bl	8000ae4 <__aeabi_dcmplt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f040 8095 	bne.w	800a406 <_dtoa_r+0x6be>
 800a2dc:	42a6      	cmp	r6, r4
 800a2de:	f43f af50 	beq.w	800a182 <_dtoa_r+0x43a>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a310 <_dtoa_r+0x5c8>)
 800a2e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2ea:	f7f6 f989 	bl	8000600 <__aeabi_dmul>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4b07      	ldr	r3, [pc, #28]	@ (800a310 <_dtoa_r+0x5c8>)
 800a2f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fa:	f7f6 f981 	bl	8000600 <__aeabi_dmul>
 800a2fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a302:	e7c4      	b.n	800a28e <_dtoa_r+0x546>
 800a304:	0800c700 	.word	0x0800c700
 800a308:	0800c6d8 	.word	0x0800c6d8
 800a30c:	3ff00000 	.word	0x3ff00000
 800a310:	40240000 	.word	0x40240000
 800a314:	401c0000 	.word	0x401c0000
 800a318:	40140000 	.word	0x40140000
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	4631      	mov	r1, r6
 800a322:	4656      	mov	r6, sl
 800a324:	4628      	mov	r0, r5
 800a326:	f7f6 f96b 	bl	8000600 <__aeabi_dmul>
 800a32a:	9415      	str	r4, [sp, #84]	@ 0x54
 800a32c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a334:	f7f6 fc14 	bl	8000b60 <__aeabi_d2iz>
 800a338:	4605      	mov	r5, r0
 800a33a:	f7f6 f8f7 	bl	800052c <__aeabi_i2d>
 800a33e:	4602      	mov	r2, r0
 800a340:	3530      	adds	r5, #48	@ 0x30
 800a342:	460b      	mov	r3, r1
 800a344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a348:	f7f5 ffa2 	bl	8000290 <__aeabi_dsub>
 800a34c:	f806 5b01 	strb.w	r5, [r6], #1
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	42a6      	cmp	r6, r4
 800a356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a35a:	f04f 0200 	mov.w	r2, #0
 800a35e:	d124      	bne.n	800a3aa <_dtoa_r+0x662>
 800a360:	4bac      	ldr	r3, [pc, #688]	@ (800a614 <_dtoa_r+0x8cc>)
 800a362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a366:	f7f5 ff95 	bl	8000294 <__adddf3>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a372:	f7f6 fbd5 	bl	8000b20 <__aeabi_dcmpgt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d145      	bne.n	800a406 <_dtoa_r+0x6be>
 800a37a:	2000      	movs	r0, #0
 800a37c:	49a5      	ldr	r1, [pc, #660]	@ (800a614 <_dtoa_r+0x8cc>)
 800a37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a382:	f7f5 ff85 	bl	8000290 <__aeabi_dsub>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38e:	f7f6 fba9 	bl	8000ae4 <__aeabi_dcmplt>
 800a392:	2800      	cmp	r0, #0
 800a394:	f43f aef5 	beq.w	800a182 <_dtoa_r+0x43a>
 800a398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a39a:	1e73      	subs	r3, r6, #1
 800a39c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a39e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3a2:	2b30      	cmp	r3, #48	@ 0x30
 800a3a4:	d0f8      	beq.n	800a398 <_dtoa_r+0x650>
 800a3a6:	9f04      	ldr	r7, [sp, #16]
 800a3a8:	e73e      	b.n	800a228 <_dtoa_r+0x4e0>
 800a3aa:	4b9b      	ldr	r3, [pc, #620]	@ (800a618 <_dtoa_r+0x8d0>)
 800a3ac:	f7f6 f928 	bl	8000600 <__aeabi_dmul>
 800a3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b4:	e7bc      	b.n	800a330 <_dtoa_r+0x5e8>
 800a3b6:	d10c      	bne.n	800a3d2 <_dtoa_r+0x68a>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4b98      	ldr	r3, [pc, #608]	@ (800a61c <_dtoa_r+0x8d4>)
 800a3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c0:	f7f6 f91e 	bl	8000600 <__aeabi_dmul>
 800a3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c8:	f7f6 fba0 	bl	8000b0c <__aeabi_dcmpge>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f000 8157 	beq.w	800a680 <_dtoa_r+0x938>
 800a3d2:	2400      	movs	r4, #0
 800a3d4:	4625      	mov	r5, r4
 800a3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d8:	4656      	mov	r6, sl
 800a3da:	43db      	mvns	r3, r3
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	2700      	movs	r7, #0
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	4658      	mov	r0, fp
 800a3e4:	f000 fbb4 	bl	800ab50 <_Bfree>
 800a3e8:	2d00      	cmp	r5, #0
 800a3ea:	d0dc      	beq.n	800a3a6 <_dtoa_r+0x65e>
 800a3ec:	b12f      	cbz	r7, 800a3fa <_dtoa_r+0x6b2>
 800a3ee:	42af      	cmp	r7, r5
 800a3f0:	d003      	beq.n	800a3fa <_dtoa_r+0x6b2>
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	4658      	mov	r0, fp
 800a3f6:	f000 fbab 	bl	800ab50 <_Bfree>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4658      	mov	r0, fp
 800a3fe:	f000 fba7 	bl	800ab50 <_Bfree>
 800a402:	e7d0      	b.n	800a3a6 <_dtoa_r+0x65e>
 800a404:	9704      	str	r7, [sp, #16]
 800a406:	4633      	mov	r3, r6
 800a408:	461e      	mov	r6, r3
 800a40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a40e:	2a39      	cmp	r2, #57	@ 0x39
 800a410:	d107      	bne.n	800a422 <_dtoa_r+0x6da>
 800a412:	459a      	cmp	sl, r3
 800a414:	d1f8      	bne.n	800a408 <_dtoa_r+0x6c0>
 800a416:	9a04      	ldr	r2, [sp, #16]
 800a418:	3201      	adds	r2, #1
 800a41a:	9204      	str	r2, [sp, #16]
 800a41c:	2230      	movs	r2, #48	@ 0x30
 800a41e:	f88a 2000 	strb.w	r2, [sl]
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	3201      	adds	r2, #1
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e7bd      	b.n	800a3a6 <_dtoa_r+0x65e>
 800a42a:	2200      	movs	r2, #0
 800a42c:	4b7a      	ldr	r3, [pc, #488]	@ (800a618 <_dtoa_r+0x8d0>)
 800a42e:	f7f6 f8e7 	bl	8000600 <__aeabi_dmul>
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	4604      	mov	r4, r0
 800a438:	460d      	mov	r5, r1
 800a43a:	f7f6 fb49 	bl	8000ad0 <__aeabi_dcmpeq>
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f aebb 	beq.w	800a1ba <_dtoa_r+0x472>
 800a444:	e6f0      	b.n	800a228 <_dtoa_r+0x4e0>
 800a446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a448:	2a00      	cmp	r2, #0
 800a44a:	f000 80db 	beq.w	800a604 <_dtoa_r+0x8bc>
 800a44e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a450:	2a01      	cmp	r2, #1
 800a452:	f300 80bf 	bgt.w	800a5d4 <_dtoa_r+0x88c>
 800a456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a458:	2a00      	cmp	r2, #0
 800a45a:	f000 80b7 	beq.w	800a5cc <_dtoa_r+0x884>
 800a45e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a464:	4646      	mov	r6, r8
 800a466:	9a08      	ldr	r2, [sp, #32]
 800a468:	2101      	movs	r1, #1
 800a46a:	4658      	mov	r0, fp
 800a46c:	4498      	add	r8, r3
 800a46e:	441a      	add	r2, r3
 800a470:	9208      	str	r2, [sp, #32]
 800a472:	f000 fc23 	bl	800acbc <__i2b>
 800a476:	4605      	mov	r5, r0
 800a478:	b15e      	cbz	r6, 800a492 <_dtoa_r+0x74a>
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd08      	ble.n	800a492 <_dtoa_r+0x74a>
 800a480:	42b3      	cmp	r3, r6
 800a482:	9a08      	ldr	r2, [sp, #32]
 800a484:	bfa8      	it	ge
 800a486:	4633      	movge	r3, r6
 800a488:	eba8 0803 	sub.w	r8, r8, r3
 800a48c:	1af6      	subs	r6, r6, r3
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	9308      	str	r3, [sp, #32]
 800a492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a494:	b1f3      	cbz	r3, 800a4d4 <_dtoa_r+0x78c>
 800a496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80b7 	beq.w	800a60c <_dtoa_r+0x8c4>
 800a49e:	b18c      	cbz	r4, 800a4c4 <_dtoa_r+0x77c>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	f000 fcc9 	bl	800ae3c <__pow5mult>
 800a4aa:	464a      	mov	r2, r9
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	4658      	mov	r0, fp
 800a4b2:	f000 fc19 	bl	800ace8 <__multiply>
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	9004      	str	r0, [sp, #16]
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fb48 	bl	800ab50 <_Bfree>
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	4699      	mov	r9, r3
 800a4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4c6:	1b1a      	subs	r2, r3, r4
 800a4c8:	d004      	beq.n	800a4d4 <_dtoa_r+0x78c>
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 fcb5 	bl	800ae3c <__pow5mult>
 800a4d2:	4681      	mov	r9, r0
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4658      	mov	r0, fp
 800a4d8:	f000 fbf0 	bl	800acbc <__i2b>
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	4604      	mov	r4, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 81cf 	beq.w	800a884 <_dtoa_r+0xb3c>
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	4658      	mov	r0, fp
 800a4ec:	f000 fca6 	bl	800ae3c <__pow5mult>
 800a4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	f300 8095 	bgt.w	800a624 <_dtoa_r+0x8dc>
 800a4fa:	9b02      	ldr	r3, [sp, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 8087 	bne.w	800a610 <_dtoa_r+0x8c8>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f040 8089 	bne.w	800a620 <_dtoa_r+0x8d8>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a514:	0d1b      	lsrs	r3, r3, #20
 800a516:	051b      	lsls	r3, r3, #20
 800a518:	b12b      	cbz	r3, 800a526 <_dtoa_r+0x7de>
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	f108 0801 	add.w	r8, r8, #1
 800a520:	3301      	adds	r3, #1
 800a522:	9308      	str	r3, [sp, #32]
 800a524:	2301      	movs	r3, #1
 800a526:	930a      	str	r3, [sp, #40]	@ 0x28
 800a528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 81b0 	beq.w	800a890 <_dtoa_r+0xb48>
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a536:	6918      	ldr	r0, [r3, #16]
 800a538:	f000 fb74 	bl	800ac24 <__hi0bits>
 800a53c:	f1c0 0020 	rsb	r0, r0, #32
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	4418      	add	r0, r3
 800a544:	f010 001f 	ands.w	r0, r0, #31
 800a548:	d077      	beq.n	800a63a <_dtoa_r+0x8f2>
 800a54a:	f1c0 0320 	rsb	r3, r0, #32
 800a54e:	2b04      	cmp	r3, #4
 800a550:	dd6b      	ble.n	800a62a <_dtoa_r+0x8e2>
 800a552:	f1c0 001c 	rsb	r0, r0, #28
 800a556:	9b08      	ldr	r3, [sp, #32]
 800a558:	4480      	add	r8, r0
 800a55a:	4403      	add	r3, r0
 800a55c:	4406      	add	r6, r0
 800a55e:	9308      	str	r3, [sp, #32]
 800a560:	f1b8 0f00 	cmp.w	r8, #0
 800a564:	dd05      	ble.n	800a572 <_dtoa_r+0x82a>
 800a566:	4649      	mov	r1, r9
 800a568:	4642      	mov	r2, r8
 800a56a:	4658      	mov	r0, fp
 800a56c:	f000 fcc0 	bl	800aef0 <__lshift>
 800a570:	4681      	mov	r9, r0
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd05      	ble.n	800a584 <_dtoa_r+0x83c>
 800a578:	4621      	mov	r1, r4
 800a57a:	461a      	mov	r2, r3
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fcb7 	bl	800aef0 <__lshift>
 800a582:	4604      	mov	r4, r0
 800a584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a586:	2b00      	cmp	r3, #0
 800a588:	d059      	beq.n	800a63e <_dtoa_r+0x8f6>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4648      	mov	r0, r9
 800a58e:	f000 fd1b 	bl	800afc8 <__mcmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	da53      	bge.n	800a63e <_dtoa_r+0x8f6>
 800a596:	1e7b      	subs	r3, r7, #1
 800a598:	4649      	mov	r1, r9
 800a59a:	220a      	movs	r2, #10
 800a59c:	4658      	mov	r0, fp
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f000 faf7 	bl	800ab94 <__multadd>
 800a5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5a8:	4681      	mov	r9, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 8172 	beq.w	800a894 <_dtoa_r+0xb4c>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	220a      	movs	r2, #10
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	f000 faec 	bl	800ab94 <__multadd>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	4605      	mov	r5, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dc67      	bgt.n	800a694 <_dtoa_r+0x94c>
 800a5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	dc41      	bgt.n	800a64e <_dtoa_r+0x906>
 800a5ca:	e063      	b.n	800a694 <_dtoa_r+0x94c>
 800a5cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5d2:	e746      	b.n	800a462 <_dtoa_r+0x71a>
 800a5d4:	9b07      	ldr	r3, [sp, #28]
 800a5d6:	1e5c      	subs	r4, r3, #1
 800a5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5da:	42a3      	cmp	r3, r4
 800a5dc:	bfb7      	itett	lt
 800a5de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5e0:	1b1c      	subge	r4, r3, r4
 800a5e2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a5e4:	1ae3      	sublt	r3, r4, r3
 800a5e6:	bfbe      	ittt	lt
 800a5e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a5ea:	2400      	movlt	r4, #0
 800a5ec:	18d2      	addlt	r2, r2, r3
 800a5ee:	9b07      	ldr	r3, [sp, #28]
 800a5f0:	bfb8      	it	lt
 800a5f2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfb5      	itete	lt
 800a5f8:	eba8 0603 	sublt.w	r6, r8, r3
 800a5fc:	4646      	movge	r6, r8
 800a5fe:	2300      	movlt	r3, #0
 800a600:	9b07      	ldrge	r3, [sp, #28]
 800a602:	e730      	b.n	800a466 <_dtoa_r+0x71e>
 800a604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a606:	4646      	mov	r6, r8
 800a608:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a60a:	e735      	b.n	800a478 <_dtoa_r+0x730>
 800a60c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a60e:	e75c      	b.n	800a4ca <_dtoa_r+0x782>
 800a610:	2300      	movs	r3, #0
 800a612:	e788      	b.n	800a526 <_dtoa_r+0x7de>
 800a614:	3fe00000 	.word	0x3fe00000
 800a618:	40240000 	.word	0x40240000
 800a61c:	40140000 	.word	0x40140000
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	e780      	b.n	800a526 <_dtoa_r+0x7de>
 800a624:	2300      	movs	r3, #0
 800a626:	930a      	str	r3, [sp, #40]	@ 0x28
 800a628:	e782      	b.n	800a530 <_dtoa_r+0x7e8>
 800a62a:	d099      	beq.n	800a560 <_dtoa_r+0x818>
 800a62c:	331c      	adds	r3, #28
 800a62e:	9a08      	ldr	r2, [sp, #32]
 800a630:	441a      	add	r2, r3
 800a632:	4498      	add	r8, r3
 800a634:	441e      	add	r6, r3
 800a636:	9208      	str	r2, [sp, #32]
 800a638:	e792      	b.n	800a560 <_dtoa_r+0x818>
 800a63a:	4603      	mov	r3, r0
 800a63c:	e7f6      	b.n	800a62c <_dtoa_r+0x8e4>
 800a63e:	9b07      	ldr	r3, [sp, #28]
 800a640:	9704      	str	r7, [sp, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dc20      	bgt.n	800a688 <_dtoa_r+0x940>
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	dd1e      	ble.n	800a68c <_dtoa_r+0x944>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f47f aec0 	bne.w	800a3d6 <_dtoa_r+0x68e>
 800a656:	4621      	mov	r1, r4
 800a658:	2205      	movs	r2, #5
 800a65a:	4658      	mov	r0, fp
 800a65c:	f000 fa9a 	bl	800ab94 <__multadd>
 800a660:	4601      	mov	r1, r0
 800a662:	4604      	mov	r4, r0
 800a664:	4648      	mov	r0, r9
 800a666:	f000 fcaf 	bl	800afc8 <__mcmp>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f77f aeb3 	ble.w	800a3d6 <_dtoa_r+0x68e>
 800a670:	2331      	movs	r3, #49	@ 0x31
 800a672:	4656      	mov	r6, sl
 800a674:	f806 3b01 	strb.w	r3, [r6], #1
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	3301      	adds	r3, #1
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	e6ae      	b.n	800a3de <_dtoa_r+0x696>
 800a680:	9c07      	ldr	r4, [sp, #28]
 800a682:	9704      	str	r7, [sp, #16]
 800a684:	4625      	mov	r5, r4
 800a686:	e7f3      	b.n	800a670 <_dtoa_r+0x928>
 800a688:	9b07      	ldr	r3, [sp, #28]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 8104 	beq.w	800a89c <_dtoa_r+0xb54>
 800a694:	2e00      	cmp	r6, #0
 800a696:	dd05      	ble.n	800a6a4 <_dtoa_r+0x95c>
 800a698:	4629      	mov	r1, r5
 800a69a:	4632      	mov	r2, r6
 800a69c:	4658      	mov	r0, fp
 800a69e:	f000 fc27 	bl	800aef0 <__lshift>
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d05a      	beq.n	800a760 <_dtoa_r+0xa18>
 800a6aa:	6869      	ldr	r1, [r5, #4]
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	f000 fa0f 	bl	800aad0 <_Balloc>
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <_dtoa_r+0x97a>
 800a6b6:	4b84      	ldr	r3, [pc, #528]	@ (800a8c8 <_dtoa_r+0xb80>)
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6be:	f7ff bb5a 	b.w	8009d76 <_dtoa_r+0x2e>
 800a6c2:	692a      	ldr	r2, [r5, #16]
 800a6c4:	f105 010c 	add.w	r1, r5, #12
 800a6c8:	300c      	adds	r0, #12
 800a6ca:	3202      	adds	r2, #2
 800a6cc:	0092      	lsls	r2, r2, #2
 800a6ce:	f000 ffb5 	bl	800b63c <memcpy>
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	f000 fc0a 	bl	800aef0 <__lshift>
 800a6dc:	f10a 0301 	add.w	r3, sl, #1
 800a6e0:	462f      	mov	r7, r5
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	9307      	str	r3, [sp, #28]
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	4453      	add	r3, sl
 800a6ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4648      	mov	r0, r9
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	f7ff fa94 	bl	8009c2a <quorem>
 800a702:	4639      	mov	r1, r7
 800a704:	9002      	str	r0, [sp, #8]
 800a706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a70a:	4648      	mov	r0, r9
 800a70c:	f000 fc5c 	bl	800afc8 <__mcmp>
 800a710:	462a      	mov	r2, r5
 800a712:	9008      	str	r0, [sp, #32]
 800a714:	4621      	mov	r1, r4
 800a716:	4658      	mov	r0, fp
 800a718:	f000 fc72 	bl	800b000 <__mdiff>
 800a71c:	68c2      	ldr	r2, [r0, #12]
 800a71e:	4606      	mov	r6, r0
 800a720:	bb02      	cbnz	r2, 800a764 <_dtoa_r+0xa1c>
 800a722:	4601      	mov	r1, r0
 800a724:	4648      	mov	r0, r9
 800a726:	f000 fc4f 	bl	800afc8 <__mcmp>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4631      	mov	r1, r6
 800a72e:	4658      	mov	r0, fp
 800a730:	920e      	str	r2, [sp, #56]	@ 0x38
 800a732:	f000 fa0d 	bl	800ab50 <_Bfree>
 800a736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a73a:	9e07      	ldr	r6, [sp, #28]
 800a73c:	ea43 0102 	orr.w	r1, r3, r2
 800a740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a742:	4319      	orrs	r1, r3
 800a744:	d110      	bne.n	800a768 <_dtoa_r+0xa20>
 800a746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a74a:	d029      	beq.n	800a7a0 <_dtoa_r+0xa58>
 800a74c:	9b08      	ldr	r3, [sp, #32]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dd02      	ble.n	800a758 <_dtoa_r+0xa10>
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a758:	9b00      	ldr	r3, [sp, #0]
 800a75a:	f883 8000 	strb.w	r8, [r3]
 800a75e:	e63f      	b.n	800a3e0 <_dtoa_r+0x698>
 800a760:	4628      	mov	r0, r5
 800a762:	e7bb      	b.n	800a6dc <_dtoa_r+0x994>
 800a764:	2201      	movs	r2, #1
 800a766:	e7e1      	b.n	800a72c <_dtoa_r+0x9e4>
 800a768:	9b08      	ldr	r3, [sp, #32]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db04      	blt.n	800a778 <_dtoa_r+0xa30>
 800a76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a770:	430b      	orrs	r3, r1
 800a772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a774:	430b      	orrs	r3, r1
 800a776:	d120      	bne.n	800a7ba <_dtoa_r+0xa72>
 800a778:	2a00      	cmp	r2, #0
 800a77a:	dded      	ble.n	800a758 <_dtoa_r+0xa10>
 800a77c:	4649      	mov	r1, r9
 800a77e:	2201      	movs	r2, #1
 800a780:	4658      	mov	r0, fp
 800a782:	f000 fbb5 	bl	800aef0 <__lshift>
 800a786:	4621      	mov	r1, r4
 800a788:	4681      	mov	r9, r0
 800a78a:	f000 fc1d 	bl	800afc8 <__mcmp>
 800a78e:	2800      	cmp	r0, #0
 800a790:	dc03      	bgt.n	800a79a <_dtoa_r+0xa52>
 800a792:	d1e1      	bne.n	800a758 <_dtoa_r+0xa10>
 800a794:	f018 0f01 	tst.w	r8, #1
 800a798:	d0de      	beq.n	800a758 <_dtoa_r+0xa10>
 800a79a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a79e:	d1d8      	bne.n	800a752 <_dtoa_r+0xa0a>
 800a7a0:	2339      	movs	r3, #57	@ 0x39
 800a7a2:	9a00      	ldr	r2, [sp, #0]
 800a7a4:	7013      	strb	r3, [r2, #0]
 800a7a6:	4633      	mov	r3, r6
 800a7a8:	461e      	mov	r6, r3
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7b0:	2a39      	cmp	r2, #57	@ 0x39
 800a7b2:	d052      	beq.n	800a85a <_dtoa_r+0xb12>
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	e612      	b.n	800a3e0 <_dtoa_r+0x698>
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	dd07      	ble.n	800a7ce <_dtoa_r+0xa86>
 800a7be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7c2:	d0ed      	beq.n	800a7a0 <_dtoa_r+0xa58>
 800a7c4:	f108 0301 	add.w	r3, r8, #1
 800a7c8:	9a00      	ldr	r2, [sp, #0]
 800a7ca:	7013      	strb	r3, [r2, #0]
 800a7cc:	e608      	b.n	800a3e0 <_dtoa_r+0x698>
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	9a07      	ldr	r2, [sp, #28]
 800a7d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d028      	beq.n	800a82e <_dtoa_r+0xae6>
 800a7dc:	4649      	mov	r1, r9
 800a7de:	2300      	movs	r3, #0
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	4658      	mov	r0, fp
 800a7e4:	f000 f9d6 	bl	800ab94 <__multadd>
 800a7e8:	42af      	cmp	r7, r5
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	f04f 0300 	mov.w	r3, #0
 800a7f0:	f04f 020a 	mov.w	r2, #10
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	d107      	bne.n	800a80a <_dtoa_r+0xac2>
 800a7fa:	f000 f9cb 	bl	800ab94 <__multadd>
 800a7fe:	4607      	mov	r7, r0
 800a800:	4605      	mov	r5, r0
 800a802:	9b07      	ldr	r3, [sp, #28]
 800a804:	3301      	adds	r3, #1
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	e774      	b.n	800a6f4 <_dtoa_r+0x9ac>
 800a80a:	f000 f9c3 	bl	800ab94 <__multadd>
 800a80e:	4629      	mov	r1, r5
 800a810:	4607      	mov	r7, r0
 800a812:	2300      	movs	r3, #0
 800a814:	220a      	movs	r2, #10
 800a816:	4658      	mov	r0, fp
 800a818:	f000 f9bc 	bl	800ab94 <__multadd>
 800a81c:	4605      	mov	r5, r0
 800a81e:	e7f0      	b.n	800a802 <_dtoa_r+0xaba>
 800a820:	9b00      	ldr	r3, [sp, #0]
 800a822:	2700      	movs	r7, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfcc      	ite	gt
 800a828:	461e      	movgt	r6, r3
 800a82a:	2601      	movle	r6, #1
 800a82c:	4456      	add	r6, sl
 800a82e:	4649      	mov	r1, r9
 800a830:	2201      	movs	r2, #1
 800a832:	4658      	mov	r0, fp
 800a834:	f000 fb5c 	bl	800aef0 <__lshift>
 800a838:	4621      	mov	r1, r4
 800a83a:	4681      	mov	r9, r0
 800a83c:	f000 fbc4 	bl	800afc8 <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	dcb0      	bgt.n	800a7a6 <_dtoa_r+0xa5e>
 800a844:	d102      	bne.n	800a84c <_dtoa_r+0xb04>
 800a846:	f018 0f01 	tst.w	r8, #1
 800a84a:	d1ac      	bne.n	800a7a6 <_dtoa_r+0xa5e>
 800a84c:	4633      	mov	r3, r6
 800a84e:	461e      	mov	r6, r3
 800a850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a854:	2a30      	cmp	r2, #48	@ 0x30
 800a856:	d0fa      	beq.n	800a84e <_dtoa_r+0xb06>
 800a858:	e5c2      	b.n	800a3e0 <_dtoa_r+0x698>
 800a85a:	459a      	cmp	sl, r3
 800a85c:	d1a4      	bne.n	800a7a8 <_dtoa_r+0xa60>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	2331      	movs	r3, #49	@ 0x31
 800a866:	f88a 3000 	strb.w	r3, [sl]
 800a86a:	e5b9      	b.n	800a3e0 <_dtoa_r+0x698>
 800a86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a86e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8cc <_dtoa_r+0xb84>
 800a872:	b11b      	cbz	r3, 800a87c <_dtoa_r+0xb34>
 800a874:	f10a 0308 	add.w	r3, sl, #8
 800a878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	4650      	mov	r0, sl
 800a87e:	b019      	add	sp, #100	@ 0x64
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a886:	2b01      	cmp	r3, #1
 800a888:	f77f ae37 	ble.w	800a4fa <_dtoa_r+0x7b2>
 800a88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a890:	2001      	movs	r0, #1
 800a892:	e655      	b.n	800a540 <_dtoa_r+0x7f8>
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f77f aed6 	ble.w	800a648 <_dtoa_r+0x900>
 800a89c:	4656      	mov	r6, sl
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4648      	mov	r0, r9
 800a8a2:	f7ff f9c2 	bl	8009c2a <quorem>
 800a8a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	f806 8b01 	strb.w	r8, [r6], #1
 800a8b0:	eba6 020a 	sub.w	r2, r6, sl
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	ddb3      	ble.n	800a820 <_dtoa_r+0xad8>
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	220a      	movs	r2, #10
 800a8be:	4658      	mov	r0, fp
 800a8c0:	f000 f968 	bl	800ab94 <__multadd>
 800a8c4:	4681      	mov	r9, r0
 800a8c6:	e7ea      	b.n	800a89e <_dtoa_r+0xb56>
 800a8c8:	0800c660 	.word	0x0800c660
 800a8cc:	0800c5e4 	.word	0x0800c5e4

0800a8d0 <_free_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	d041      	beq.n	800a95c <_free_r+0x8c>
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f0c      	subs	r4, r1, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfb8      	it	lt
 800a8e2:	18e4      	addlt	r4, r4, r3
 800a8e4:	f000 f8e8 	bl	800aab8 <__malloc_lock>
 800a8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a960 <_free_r+0x90>)
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	b933      	cbnz	r3, 800a8fc <_free_r+0x2c>
 800a8ee:	6063      	str	r3, [r4, #4]
 800a8f0:	6014      	str	r4, [r2, #0]
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8f8:	f000 b8e4 	b.w	800aac4 <__malloc_unlock>
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	d908      	bls.n	800a912 <_free_r+0x42>
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	1821      	adds	r1, r4, r0
 800a904:	428b      	cmp	r3, r1
 800a906:	bf01      	itttt	eq
 800a908:	6819      	ldreq	r1, [r3, #0]
 800a90a:	685b      	ldreq	r3, [r3, #4]
 800a90c:	1809      	addeq	r1, r1, r0
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	e7ed      	b.n	800a8ee <_free_r+0x1e>
 800a912:	461a      	mov	r2, r3
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	b10b      	cbz	r3, 800a91c <_free_r+0x4c>
 800a918:	42a3      	cmp	r3, r4
 800a91a:	d9fa      	bls.n	800a912 <_free_r+0x42>
 800a91c:	6811      	ldr	r1, [r2, #0]
 800a91e:	1850      	adds	r0, r2, r1
 800a920:	42a0      	cmp	r0, r4
 800a922:	d10b      	bne.n	800a93c <_free_r+0x6c>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	4401      	add	r1, r0
 800a928:	1850      	adds	r0, r2, r1
 800a92a:	6011      	str	r1, [r2, #0]
 800a92c:	4283      	cmp	r3, r0
 800a92e:	d1e0      	bne.n	800a8f2 <_free_r+0x22>
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	4408      	add	r0, r1
 800a936:	6053      	str	r3, [r2, #4]
 800a938:	6010      	str	r0, [r2, #0]
 800a93a:	e7da      	b.n	800a8f2 <_free_r+0x22>
 800a93c:	d902      	bls.n	800a944 <_free_r+0x74>
 800a93e:	230c      	movs	r3, #12
 800a940:	602b      	str	r3, [r5, #0]
 800a942:	e7d6      	b.n	800a8f2 <_free_r+0x22>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	1821      	adds	r1, r4, r0
 800a948:	428b      	cmp	r3, r1
 800a94a:	bf02      	ittt	eq
 800a94c:	6819      	ldreq	r1, [r3, #0]
 800a94e:	685b      	ldreq	r3, [r3, #4]
 800a950:	1809      	addeq	r1, r1, r0
 800a952:	6063      	str	r3, [r4, #4]
 800a954:	bf08      	it	eq
 800a956:	6021      	streq	r1, [r4, #0]
 800a958:	6054      	str	r4, [r2, #4]
 800a95a:	e7ca      	b.n	800a8f2 <_free_r+0x22>
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20000ac0 	.word	0x20000ac0

0800a964 <malloc>:
 800a964:	4b02      	ldr	r3, [pc, #8]	@ (800a970 <malloc+0xc>)
 800a966:	4601      	mov	r1, r0
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	f000 b825 	b.w	800a9b8 <_malloc_r>
 800a96e:	bf00      	nop
 800a970:	20000020 	.word	0x20000020

0800a974 <sbrk_aligned>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4e0f      	ldr	r6, [pc, #60]	@ (800a9b4 <sbrk_aligned+0x40>)
 800a978:	460c      	mov	r4, r1
 800a97a:	4605      	mov	r5, r0
 800a97c:	6831      	ldr	r1, [r6, #0]
 800a97e:	b911      	cbnz	r1, 800a986 <sbrk_aligned+0x12>
 800a980:	f000 fe4c 	bl	800b61c <_sbrk_r>
 800a984:	6030      	str	r0, [r6, #0]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 fe47 	bl	800b61c <_sbrk_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d103      	bne.n	800a99a <sbrk_aligned+0x26>
 800a992:	f04f 34ff 	mov.w	r4, #4294967295
 800a996:	4620      	mov	r0, r4
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	1cc4      	adds	r4, r0, #3
 800a99c:	f024 0403 	bic.w	r4, r4, #3
 800a9a0:	42a0      	cmp	r0, r4
 800a9a2:	d0f8      	beq.n	800a996 <sbrk_aligned+0x22>
 800a9a4:	1a21      	subs	r1, r4, r0
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 fe38 	bl	800b61c <_sbrk_r>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d1f2      	bne.n	800a996 <sbrk_aligned+0x22>
 800a9b0:	e7ef      	b.n	800a992 <sbrk_aligned+0x1e>
 800a9b2:	bf00      	nop
 800a9b4:	20000abc 	.word	0x20000abc

0800a9b8 <_malloc_r>:
 800a9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	1ccd      	adds	r5, r1, #3
 800a9be:	4606      	mov	r6, r0
 800a9c0:	f025 0503 	bic.w	r5, r5, #3
 800a9c4:	3508      	adds	r5, #8
 800a9c6:	2d0c      	cmp	r5, #12
 800a9c8:	bf38      	it	cc
 800a9ca:	250c      	movcc	r5, #12
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	db01      	blt.n	800a9d4 <_malloc_r+0x1c>
 800a9d0:	42a9      	cmp	r1, r5
 800a9d2:	d904      	bls.n	800a9de <_malloc_r+0x26>
 800a9d4:	230c      	movs	r3, #12
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aab4 <_malloc_r+0xfc>
 800a9e2:	f000 f869 	bl	800aab8 <__malloc_lock>
 800a9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ea:	461c      	mov	r4, r3
 800a9ec:	bb44      	cbnz	r4, 800aa40 <_malloc_r+0x88>
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff ffbf 	bl	800a974 <sbrk_aligned>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	d158      	bne.n	800aaae <_malloc_r+0xf6>
 800a9fc:	f8d8 4000 	ldr.w	r4, [r8]
 800aa00:	4627      	mov	r7, r4
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	d143      	bne.n	800aa8e <_malloc_r+0xd6>
 800aa06:	2c00      	cmp	r4, #0
 800aa08:	d04b      	beq.n	800aaa2 <_malloc_r+0xea>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4630      	mov	r0, r6
 800aa10:	eb04 0903 	add.w	r9, r4, r3
 800aa14:	f000 fe02 	bl	800b61c <_sbrk_r>
 800aa18:	4581      	cmp	r9, r0
 800aa1a:	d142      	bne.n	800aaa2 <_malloc_r+0xea>
 800aa1c:	6821      	ldr	r1, [r4, #0]
 800aa1e:	4630      	mov	r0, r6
 800aa20:	1a6d      	subs	r5, r5, r1
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7ff ffa6 	bl	800a974 <sbrk_aligned>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d03a      	beq.n	800aaa2 <_malloc_r+0xea>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	442b      	add	r3, r5
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	f8d8 3000 	ldr.w	r3, [r8]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	bb62      	cbnz	r2, 800aa94 <_malloc_r+0xdc>
 800aa3a:	f8c8 7000 	str.w	r7, [r8]
 800aa3e:	e00f      	b.n	800aa60 <_malloc_r+0xa8>
 800aa40:	6822      	ldr	r2, [r4, #0]
 800aa42:	1b52      	subs	r2, r2, r5
 800aa44:	d420      	bmi.n	800aa88 <_malloc_r+0xd0>
 800aa46:	2a0b      	cmp	r2, #11
 800aa48:	d917      	bls.n	800aa7a <_malloc_r+0xc2>
 800aa4a:	1961      	adds	r1, r4, r5
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	6025      	str	r5, [r4, #0]
 800aa50:	bf18      	it	ne
 800aa52:	6059      	strne	r1, [r3, #4]
 800aa54:	6863      	ldr	r3, [r4, #4]
 800aa56:	bf08      	it	eq
 800aa58:	f8c8 1000 	streq.w	r1, [r8]
 800aa5c:	5162      	str	r2, [r4, r5]
 800aa5e:	604b      	str	r3, [r1, #4]
 800aa60:	4630      	mov	r0, r6
 800aa62:	f000 f82f 	bl	800aac4 <__malloc_unlock>
 800aa66:	f104 000b 	add.w	r0, r4, #11
 800aa6a:	1d23      	adds	r3, r4, #4
 800aa6c:	f020 0007 	bic.w	r0, r0, #7
 800aa70:	1ac2      	subs	r2, r0, r3
 800aa72:	bf1c      	itt	ne
 800aa74:	1a1b      	subne	r3, r3, r0
 800aa76:	50a3      	strne	r3, [r4, r2]
 800aa78:	e7af      	b.n	800a9da <_malloc_r+0x22>
 800aa7a:	6862      	ldr	r2, [r4, #4]
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	bf0c      	ite	eq
 800aa80:	f8c8 2000 	streq.w	r2, [r8]
 800aa84:	605a      	strne	r2, [r3, #4]
 800aa86:	e7eb      	b.n	800aa60 <_malloc_r+0xa8>
 800aa88:	4623      	mov	r3, r4
 800aa8a:	6864      	ldr	r4, [r4, #4]
 800aa8c:	e7ae      	b.n	800a9ec <_malloc_r+0x34>
 800aa8e:	463c      	mov	r4, r7
 800aa90:	687f      	ldr	r7, [r7, #4]
 800aa92:	e7b6      	b.n	800aa02 <_malloc_r+0x4a>
 800aa94:	461a      	mov	r2, r3
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d1fb      	bne.n	800aa94 <_malloc_r+0xdc>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6053      	str	r3, [r2, #4]
 800aaa0:	e7de      	b.n	800aa60 <_malloc_r+0xa8>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	f000 f80c 	bl	800aac4 <__malloc_unlock>
 800aaac:	e794      	b.n	800a9d8 <_malloc_r+0x20>
 800aaae:	6005      	str	r5, [r0, #0]
 800aab0:	e7d6      	b.n	800aa60 <_malloc_r+0xa8>
 800aab2:	bf00      	nop
 800aab4:	20000ac0 	.word	0x20000ac0

0800aab8 <__malloc_lock>:
 800aab8:	4801      	ldr	r0, [pc, #4]	@ (800aac0 <__malloc_lock+0x8>)
 800aaba:	f7ff b8a6 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 800aabe:	bf00      	nop
 800aac0:	20000ab8 	.word	0x20000ab8

0800aac4 <__malloc_unlock>:
 800aac4:	4801      	ldr	r0, [pc, #4]	@ (800aacc <__malloc_unlock+0x8>)
 800aac6:	f7ff b8a1 	b.w	8009c0c <__retarget_lock_release_recursive>
 800aaca:	bf00      	nop
 800aacc:	20000ab8 	.word	0x20000ab8

0800aad0 <_Balloc>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	69c6      	ldr	r6, [r0, #28]
 800aad4:	4604      	mov	r4, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	b976      	cbnz	r6, 800aaf8 <_Balloc+0x28>
 800aada:	2010      	movs	r0, #16
 800aadc:	f7ff ff42 	bl	800a964 <malloc>
 800aae0:	4602      	mov	r2, r0
 800aae2:	61e0      	str	r0, [r4, #28]
 800aae4:	b920      	cbnz	r0, 800aaf0 <_Balloc+0x20>
 800aae6:	4b18      	ldr	r3, [pc, #96]	@ (800ab48 <_Balloc+0x78>)
 800aae8:	216b      	movs	r1, #107	@ 0x6b
 800aaea:	4818      	ldr	r0, [pc, #96]	@ (800ab4c <_Balloc+0x7c>)
 800aaec:	f000 fdb4 	bl	800b658 <__assert_func>
 800aaf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf4:	6006      	str	r6, [r0, #0]
 800aaf6:	60c6      	str	r6, [r0, #12]
 800aaf8:	69e6      	ldr	r6, [r4, #28]
 800aafa:	68f3      	ldr	r3, [r6, #12]
 800aafc:	b183      	cbz	r3, 800ab20 <_Balloc+0x50>
 800aafe:	69e3      	ldr	r3, [r4, #28]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab06:	b9b8      	cbnz	r0, 800ab38 <_Balloc+0x68>
 800ab08:	2101      	movs	r1, #1
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	fa01 f605 	lsl.w	r6, r1, r5
 800ab10:	1d72      	adds	r2, r6, #5
 800ab12:	0092      	lsls	r2, r2, #2
 800ab14:	f000 fdbe 	bl	800b694 <_calloc_r>
 800ab18:	b160      	cbz	r0, 800ab34 <_Balloc+0x64>
 800ab1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab1e:	e00e      	b.n	800ab3e <_Balloc+0x6e>
 800ab20:	2221      	movs	r2, #33	@ 0x21
 800ab22:	2104      	movs	r1, #4
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fdb5 	bl	800b694 <_calloc_r>
 800ab2a:	69e3      	ldr	r3, [r4, #28]
 800ab2c:	60f0      	str	r0, [r6, #12]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e4      	bne.n	800aafe <_Balloc+0x2e>
 800ab34:	2000      	movs	r0, #0
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	6802      	ldr	r2, [r0, #0]
 800ab3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab44:	e7f7      	b.n	800ab36 <_Balloc+0x66>
 800ab46:	bf00      	nop
 800ab48:	0800c5f1 	.word	0x0800c5f1
 800ab4c:	0800c671 	.word	0x0800c671

0800ab50 <_Bfree>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	69c6      	ldr	r6, [r0, #28]
 800ab54:	4605      	mov	r5, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	b976      	cbnz	r6, 800ab78 <_Bfree+0x28>
 800ab5a:	2010      	movs	r0, #16
 800ab5c:	f7ff ff02 	bl	800a964 <malloc>
 800ab60:	4602      	mov	r2, r0
 800ab62:	61e8      	str	r0, [r5, #28]
 800ab64:	b920      	cbnz	r0, 800ab70 <_Bfree+0x20>
 800ab66:	4b09      	ldr	r3, [pc, #36]	@ (800ab8c <_Bfree+0x3c>)
 800ab68:	218f      	movs	r1, #143	@ 0x8f
 800ab6a:	4809      	ldr	r0, [pc, #36]	@ (800ab90 <_Bfree+0x40>)
 800ab6c:	f000 fd74 	bl	800b658 <__assert_func>
 800ab70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab74:	6006      	str	r6, [r0, #0]
 800ab76:	60c6      	str	r6, [r0, #12]
 800ab78:	b13c      	cbz	r4, 800ab8a <_Bfree+0x3a>
 800ab7a:	69eb      	ldr	r3, [r5, #28]
 800ab7c:	6862      	ldr	r2, [r4, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab84:	6021      	str	r1, [r4, #0]
 800ab86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	0800c5f1 	.word	0x0800c5f1
 800ab90:	0800c671 	.word	0x0800c671

0800ab94 <__multadd>:
 800ab94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab98:	f101 0c14 	add.w	ip, r1, #20
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	461e      	mov	r6, r3
 800aba2:	690d      	ldr	r5, [r1, #16]
 800aba4:	2000      	movs	r0, #0
 800aba6:	f8dc 3000 	ldr.w	r3, [ip]
 800abaa:	3001      	adds	r0, #1
 800abac:	b299      	uxth	r1, r3
 800abae:	4285      	cmp	r5, r0
 800abb0:	fb02 6101 	mla	r1, r2, r1, r6
 800abb4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800abbc:	b289      	uxth	r1, r1
 800abbe:	fb02 3306 	mla	r3, r2, r6, r3
 800abc2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abca:	f84c 1b04 	str.w	r1, [ip], #4
 800abce:	dcea      	bgt.n	800aba6 <__multadd+0x12>
 800abd0:	b30e      	cbz	r6, 800ac16 <__multadd+0x82>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	42ab      	cmp	r3, r5
 800abd6:	dc19      	bgt.n	800ac0c <__multadd+0x78>
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	4638      	mov	r0, r7
 800abdc:	3101      	adds	r1, #1
 800abde:	f7ff ff77 	bl	800aad0 <_Balloc>
 800abe2:	4680      	mov	r8, r0
 800abe4:	b928      	cbnz	r0, 800abf2 <__multadd+0x5e>
 800abe6:	4602      	mov	r2, r0
 800abe8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac1c <__multadd+0x88>)
 800abea:	21ba      	movs	r1, #186	@ 0xba
 800abec:	480c      	ldr	r0, [pc, #48]	@ (800ac20 <__multadd+0x8c>)
 800abee:	f000 fd33 	bl	800b658 <__assert_func>
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	f104 010c 	add.w	r1, r4, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	3202      	adds	r2, #2
 800abfc:	0092      	lsls	r2, r2, #2
 800abfe:	f000 fd1d 	bl	800b63c <memcpy>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4644      	mov	r4, r8
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ffa2 	bl	800ab50 <_Bfree>
 800ac0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac10:	3501      	adds	r5, #1
 800ac12:	615e      	str	r6, [r3, #20]
 800ac14:	6125      	str	r5, [r4, #16]
 800ac16:	4620      	mov	r0, r4
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	0800c660 	.word	0x0800c660
 800ac20:	0800c671 	.word	0x0800c671

0800ac24 <__hi0bits>:
 800ac24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac28:	4603      	mov	r3, r0
 800ac2a:	bf36      	itet	cc
 800ac2c:	0403      	lslcc	r3, r0, #16
 800ac2e:	2000      	movcs	r0, #0
 800ac30:	2010      	movcc	r0, #16
 800ac32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac36:	bf3c      	itt	cc
 800ac38:	021b      	lslcc	r3, r3, #8
 800ac3a:	3008      	addcc	r0, #8
 800ac3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac40:	bf3c      	itt	cc
 800ac42:	011b      	lslcc	r3, r3, #4
 800ac44:	3004      	addcc	r0, #4
 800ac46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac4a:	bf3c      	itt	cc
 800ac4c:	009b      	lslcc	r3, r3, #2
 800ac4e:	3002      	addcc	r0, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	db05      	blt.n	800ac60 <__hi0bits+0x3c>
 800ac54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac58:	f100 0001 	add.w	r0, r0, #1
 800ac5c:	bf08      	it	eq
 800ac5e:	2020      	moveq	r0, #32
 800ac60:	4770      	bx	lr

0800ac62 <__lo0bits>:
 800ac62:	6803      	ldr	r3, [r0, #0]
 800ac64:	4602      	mov	r2, r0
 800ac66:	f013 0007 	ands.w	r0, r3, #7
 800ac6a:	d00b      	beq.n	800ac84 <__lo0bits+0x22>
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	d421      	bmi.n	800acb4 <__lo0bits+0x52>
 800ac70:	0798      	lsls	r0, r3, #30
 800ac72:	bf47      	ittee	mi
 800ac74:	085b      	lsrmi	r3, r3, #1
 800ac76:	2001      	movmi	r0, #1
 800ac78:	089b      	lsrpl	r3, r3, #2
 800ac7a:	2002      	movpl	r0, #2
 800ac7c:	bf4c      	ite	mi
 800ac7e:	6013      	strmi	r3, [r2, #0]
 800ac80:	6013      	strpl	r3, [r2, #0]
 800ac82:	4770      	bx	lr
 800ac84:	b299      	uxth	r1, r3
 800ac86:	b909      	cbnz	r1, 800ac8c <__lo0bits+0x2a>
 800ac88:	0c1b      	lsrs	r3, r3, #16
 800ac8a:	2010      	movs	r0, #16
 800ac8c:	b2d9      	uxtb	r1, r3
 800ac8e:	b909      	cbnz	r1, 800ac94 <__lo0bits+0x32>
 800ac90:	3008      	adds	r0, #8
 800ac92:	0a1b      	lsrs	r3, r3, #8
 800ac94:	0719      	lsls	r1, r3, #28
 800ac96:	bf04      	itt	eq
 800ac98:	091b      	lsreq	r3, r3, #4
 800ac9a:	3004      	addeq	r0, #4
 800ac9c:	0799      	lsls	r1, r3, #30
 800ac9e:	bf04      	itt	eq
 800aca0:	089b      	lsreq	r3, r3, #2
 800aca2:	3002      	addeq	r0, #2
 800aca4:	07d9      	lsls	r1, r3, #31
 800aca6:	d403      	bmi.n	800acb0 <__lo0bits+0x4e>
 800aca8:	085b      	lsrs	r3, r3, #1
 800acaa:	f100 0001 	add.w	r0, r0, #1
 800acae:	d003      	beq.n	800acb8 <__lo0bits+0x56>
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	4770      	bx	lr
 800acb4:	2000      	movs	r0, #0
 800acb6:	4770      	bx	lr
 800acb8:	2020      	movs	r0, #32
 800acba:	4770      	bx	lr

0800acbc <__i2b>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	2101      	movs	r1, #1
 800acc2:	f7ff ff05 	bl	800aad0 <_Balloc>
 800acc6:	4602      	mov	r2, r0
 800acc8:	b928      	cbnz	r0, 800acd6 <__i2b+0x1a>
 800acca:	4b05      	ldr	r3, [pc, #20]	@ (800ace0 <__i2b+0x24>)
 800accc:	f240 1145 	movw	r1, #325	@ 0x145
 800acd0:	4804      	ldr	r0, [pc, #16]	@ (800ace4 <__i2b+0x28>)
 800acd2:	f000 fcc1 	bl	800b658 <__assert_func>
 800acd6:	2301      	movs	r3, #1
 800acd8:	6144      	str	r4, [r0, #20]
 800acda:	6103      	str	r3, [r0, #16]
 800acdc:	bd10      	pop	{r4, pc}
 800acde:	bf00      	nop
 800ace0:	0800c660 	.word	0x0800c660
 800ace4:	0800c671 	.word	0x0800c671

0800ace8 <__multiply>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	4614      	mov	r4, r2
 800acee:	690a      	ldr	r2, [r1, #16]
 800acf0:	460f      	mov	r7, r1
 800acf2:	b085      	sub	sp, #20
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	bfa2      	ittt	ge
 800acfa:	4623      	movge	r3, r4
 800acfc:	460c      	movge	r4, r1
 800acfe:	461f      	movge	r7, r3
 800ad00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad04:	68a3      	ldr	r3, [r4, #8]
 800ad06:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad0a:	6861      	ldr	r1, [r4, #4]
 800ad0c:	eb0a 0609 	add.w	r6, sl, r9
 800ad10:	42b3      	cmp	r3, r6
 800ad12:	bfb8      	it	lt
 800ad14:	3101      	addlt	r1, #1
 800ad16:	f7ff fedb 	bl	800aad0 <_Balloc>
 800ad1a:	b930      	cbnz	r0, 800ad2a <__multiply+0x42>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b45      	ldr	r3, [pc, #276]	@ (800ae34 <__multiply+0x14c>)
 800ad20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad24:	4844      	ldr	r0, [pc, #272]	@ (800ae38 <__multiply+0x150>)
 800ad26:	f000 fc97 	bl	800b658 <__assert_func>
 800ad2a:	f100 0514 	add.w	r5, r0, #20
 800ad2e:	2200      	movs	r2, #0
 800ad30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad34:	462b      	mov	r3, r5
 800ad36:	4543      	cmp	r3, r8
 800ad38:	d321      	bcc.n	800ad7e <__multiply+0x96>
 800ad3a:	f107 0114 	add.w	r1, r7, #20
 800ad3e:	f104 0214 	add.w	r2, r4, #20
 800ad42:	f104 0715 	add.w	r7, r4, #21
 800ad46:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ad4a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	1b13      	subs	r3, r2, r4
 800ad52:	3b15      	subs	r3, #21
 800ad54:	f023 0303 	bic.w	r3, r3, #3
 800ad58:	3304      	adds	r3, #4
 800ad5a:	42ba      	cmp	r2, r7
 800ad5c:	bf38      	it	cc
 800ad5e:	2304      	movcc	r3, #4
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	9b02      	ldr	r3, [sp, #8]
 800ad64:	9103      	str	r1, [sp, #12]
 800ad66:	428b      	cmp	r3, r1
 800ad68:	d80c      	bhi.n	800ad84 <__multiply+0x9c>
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	dd03      	ble.n	800ad76 <__multiply+0x8e>
 800ad6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d05b      	beq.n	800ae2e <__multiply+0x146>
 800ad76:	6106      	str	r6, [r0, #16]
 800ad78:	b005      	add	sp, #20
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	f843 2b04 	str.w	r2, [r3], #4
 800ad82:	e7d8      	b.n	800ad36 <__multiply+0x4e>
 800ad84:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad88:	f1ba 0f00 	cmp.w	sl, #0
 800ad8c:	d024      	beq.n	800add8 <__multiply+0xf0>
 800ad8e:	f104 0e14 	add.w	lr, r4, #20
 800ad92:	46a9      	mov	r9, r5
 800ad94:	f04f 0c00 	mov.w	ip, #0
 800ad98:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad9c:	f8d9 3000 	ldr.w	r3, [r9]
 800ada0:	fa1f fb87 	uxth.w	fp, r7
 800ada4:	4572      	cmp	r2, lr
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	fb0a 330b 	mla	r3, sl, fp, r3
 800adac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800adb0:	f8d9 7000 	ldr.w	r7, [r9]
 800adb4:	4463      	add	r3, ip
 800adb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800adba:	fb0a c70b 	mla	r7, sl, fp, ip
 800adbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800adc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adcc:	f849 3b04 	str.w	r3, [r9], #4
 800add0:	d8e2      	bhi.n	800ad98 <__multiply+0xb0>
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	f845 c003 	str.w	ip, [r5, r3]
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	3104      	adds	r1, #4
 800addc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ade0:	f1b9 0f00 	cmp.w	r9, #0
 800ade4:	d021      	beq.n	800ae2a <__multiply+0x142>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	f104 0c14 	add.w	ip, r4, #20
 800adec:	46ae      	mov	lr, r5
 800adee:	f04f 0a00 	mov.w	sl, #0
 800adf2:	f8bc b000 	ldrh.w	fp, [ip]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800adfc:	fb09 770b 	mla	r7, r9, fp, r7
 800ae00:	4457      	add	r7, sl
 800ae02:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae06:	f84e 3b04 	str.w	r3, [lr], #4
 800ae0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae12:	f8be 3000 	ldrh.w	r3, [lr]
 800ae16:	4562      	cmp	r2, ip
 800ae18:	fb09 330a 	mla	r3, r9, sl, r3
 800ae1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae24:	d8e5      	bhi.n	800adf2 <__multiply+0x10a>
 800ae26:	9f01      	ldr	r7, [sp, #4]
 800ae28:	51eb      	str	r3, [r5, r7]
 800ae2a:	3504      	adds	r5, #4
 800ae2c:	e799      	b.n	800ad62 <__multiply+0x7a>
 800ae2e:	3e01      	subs	r6, #1
 800ae30:	e79b      	b.n	800ad6a <__multiply+0x82>
 800ae32:	bf00      	nop
 800ae34:	0800c660 	.word	0x0800c660
 800ae38:	0800c671 	.word	0x0800c671

0800ae3c <__pow5mult>:
 800ae3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae40:	4615      	mov	r5, r2
 800ae42:	f012 0203 	ands.w	r2, r2, #3
 800ae46:	4607      	mov	r7, r0
 800ae48:	460e      	mov	r6, r1
 800ae4a:	d007      	beq.n	800ae5c <__pow5mult+0x20>
 800ae4c:	3a01      	subs	r2, #1
 800ae4e:	4c25      	ldr	r4, [pc, #148]	@ (800aee4 <__pow5mult+0xa8>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae56:	f7ff fe9d 	bl	800ab94 <__multadd>
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	10ad      	asrs	r5, r5, #2
 800ae5e:	d03d      	beq.n	800aedc <__pow5mult+0xa0>
 800ae60:	69fc      	ldr	r4, [r7, #28]
 800ae62:	b97c      	cbnz	r4, 800ae84 <__pow5mult+0x48>
 800ae64:	2010      	movs	r0, #16
 800ae66:	f7ff fd7d 	bl	800a964 <malloc>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	61f8      	str	r0, [r7, #28]
 800ae6e:	b928      	cbnz	r0, 800ae7c <__pow5mult+0x40>
 800ae70:	4b1d      	ldr	r3, [pc, #116]	@ (800aee8 <__pow5mult+0xac>)
 800ae72:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae76:	481d      	ldr	r0, [pc, #116]	@ (800aeec <__pow5mult+0xb0>)
 800ae78:	f000 fbee 	bl	800b658 <__assert_func>
 800ae7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae80:	6004      	str	r4, [r0, #0]
 800ae82:	60c4      	str	r4, [r0, #12]
 800ae84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae8c:	b94c      	cbnz	r4, 800aea2 <__pow5mult+0x66>
 800ae8e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae92:	4638      	mov	r0, r7
 800ae94:	f7ff ff12 	bl	800acbc <__i2b>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	f8c8 0008 	str.w	r0, [r8, #8]
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	07eb      	lsls	r3, r5, #31
 800aea8:	d50a      	bpl.n	800aec0 <__pow5mult+0x84>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4622      	mov	r2, r4
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f7ff ff1a 	bl	800ace8 <__multiply>
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4638      	mov	r0, r7
 800aeba:	4646      	mov	r6, r8
 800aebc:	f7ff fe48 	bl	800ab50 <_Bfree>
 800aec0:	106d      	asrs	r5, r5, #1
 800aec2:	d00b      	beq.n	800aedc <__pow5mult+0xa0>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	b938      	cbnz	r0, 800aed8 <__pow5mult+0x9c>
 800aec8:	4622      	mov	r2, r4
 800aeca:	4621      	mov	r1, r4
 800aecc:	4638      	mov	r0, r7
 800aece:	f7ff ff0b 	bl	800ace8 <__multiply>
 800aed2:	6020      	str	r0, [r4, #0]
 800aed4:	f8c0 9000 	str.w	r9, [r0]
 800aed8:	4604      	mov	r4, r0
 800aeda:	e7e4      	b.n	800aea6 <__pow5mult+0x6a>
 800aedc:	4630      	mov	r0, r6
 800aede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee2:	bf00      	nop
 800aee4:	0800c6cc 	.word	0x0800c6cc
 800aee8:	0800c5f1 	.word	0x0800c5f1
 800aeec:	0800c671 	.word	0x0800c671

0800aef0 <__lshift>:
 800aef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	460c      	mov	r4, r1
 800aef6:	4607      	mov	r7, r0
 800aef8:	4691      	mov	r9, r2
 800aefa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	6849      	ldr	r1, [r1, #4]
 800af02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af06:	68a3      	ldr	r3, [r4, #8]
 800af08:	f108 0601 	add.w	r6, r8, #1
 800af0c:	42b3      	cmp	r3, r6
 800af0e:	db0b      	blt.n	800af28 <__lshift+0x38>
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff fddd 	bl	800aad0 <_Balloc>
 800af16:	4605      	mov	r5, r0
 800af18:	b948      	cbnz	r0, 800af2e <__lshift+0x3e>
 800af1a:	4602      	mov	r2, r0
 800af1c:	4b28      	ldr	r3, [pc, #160]	@ (800afc0 <__lshift+0xd0>)
 800af1e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af22:	4828      	ldr	r0, [pc, #160]	@ (800afc4 <__lshift+0xd4>)
 800af24:	f000 fb98 	bl	800b658 <__assert_func>
 800af28:	3101      	adds	r1, #1
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	e7ee      	b.n	800af0c <__lshift+0x1c>
 800af2e:	2300      	movs	r3, #0
 800af30:	f100 0114 	add.w	r1, r0, #20
 800af34:	f100 0210 	add.w	r2, r0, #16
 800af38:	4618      	mov	r0, r3
 800af3a:	4553      	cmp	r3, sl
 800af3c:	db33      	blt.n	800afa6 <__lshift+0xb6>
 800af3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af42:	f104 0314 	add.w	r3, r4, #20
 800af46:	6920      	ldr	r0, [r4, #16]
 800af48:	f019 091f 	ands.w	r9, r9, #31
 800af4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af54:	d02b      	beq.n	800afae <__lshift+0xbe>
 800af56:	f1c9 0e20 	rsb	lr, r9, #32
 800af5a:	468a      	mov	sl, r1
 800af5c:	2200      	movs	r2, #0
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	fa00 f009 	lsl.w	r0, r0, r9
 800af64:	4310      	orrs	r0, r2
 800af66:	f84a 0b04 	str.w	r0, [sl], #4
 800af6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af6e:	459c      	cmp	ip, r3
 800af70:	fa22 f20e 	lsr.w	r2, r2, lr
 800af74:	d8f3      	bhi.n	800af5e <__lshift+0x6e>
 800af76:	ebac 0304 	sub.w	r3, ip, r4
 800af7a:	f104 0015 	add.w	r0, r4, #21
 800af7e:	3b15      	subs	r3, #21
 800af80:	f023 0303 	bic.w	r3, r3, #3
 800af84:	3304      	adds	r3, #4
 800af86:	4584      	cmp	ip, r0
 800af88:	bf38      	it	cc
 800af8a:	2304      	movcc	r3, #4
 800af8c:	50ca      	str	r2, [r1, r3]
 800af8e:	b10a      	cbz	r2, 800af94 <__lshift+0xa4>
 800af90:	f108 0602 	add.w	r6, r8, #2
 800af94:	3e01      	subs	r6, #1
 800af96:	4638      	mov	r0, r7
 800af98:	4621      	mov	r1, r4
 800af9a:	612e      	str	r6, [r5, #16]
 800af9c:	f7ff fdd8 	bl	800ab50 <_Bfree>
 800afa0:	4628      	mov	r0, r5
 800afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa6:	3301      	adds	r3, #1
 800afa8:	f842 0f04 	str.w	r0, [r2, #4]!
 800afac:	e7c5      	b.n	800af3a <__lshift+0x4a>
 800afae:	3904      	subs	r1, #4
 800afb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb4:	459c      	cmp	ip, r3
 800afb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800afba:	d8f9      	bhi.n	800afb0 <__lshift+0xc0>
 800afbc:	e7ea      	b.n	800af94 <__lshift+0xa4>
 800afbe:	bf00      	nop
 800afc0:	0800c660 	.word	0x0800c660
 800afc4:	0800c671 	.word	0x0800c671

0800afc8 <__mcmp>:
 800afc8:	4603      	mov	r3, r0
 800afca:	690a      	ldr	r2, [r1, #16]
 800afcc:	6900      	ldr	r0, [r0, #16]
 800afce:	1a80      	subs	r0, r0, r2
 800afd0:	b530      	push	{r4, r5, lr}
 800afd2:	d10e      	bne.n	800aff2 <__mcmp+0x2a>
 800afd4:	3314      	adds	r3, #20
 800afd6:	3114      	adds	r1, #20
 800afd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afe8:	4295      	cmp	r5, r2
 800afea:	d003      	beq.n	800aff4 <__mcmp+0x2c>
 800afec:	d205      	bcs.n	800affa <__mcmp+0x32>
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	bd30      	pop	{r4, r5, pc}
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	d3f3      	bcc.n	800afe0 <__mcmp+0x18>
 800aff8:	e7fb      	b.n	800aff2 <__mcmp+0x2a>
 800affa:	2001      	movs	r0, #1
 800affc:	e7f9      	b.n	800aff2 <__mcmp+0x2a>
	...

0800b000 <__mdiff>:
 800b000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	4689      	mov	r9, r1
 800b006:	4606      	mov	r6, r0
 800b008:	4611      	mov	r1, r2
 800b00a:	4614      	mov	r4, r2
 800b00c:	4648      	mov	r0, r9
 800b00e:	f7ff ffdb 	bl	800afc8 <__mcmp>
 800b012:	1e05      	subs	r5, r0, #0
 800b014:	d112      	bne.n	800b03c <__mdiff+0x3c>
 800b016:	4629      	mov	r1, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff fd59 	bl	800aad0 <_Balloc>
 800b01e:	4602      	mov	r2, r0
 800b020:	b928      	cbnz	r0, 800b02e <__mdiff+0x2e>
 800b022:	4b41      	ldr	r3, [pc, #260]	@ (800b128 <__mdiff+0x128>)
 800b024:	f240 2137 	movw	r1, #567	@ 0x237
 800b028:	4840      	ldr	r0, [pc, #256]	@ (800b12c <__mdiff+0x12c>)
 800b02a:	f000 fb15 	bl	800b658 <__assert_func>
 800b02e:	2301      	movs	r3, #1
 800b030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b034:	4610      	mov	r0, r2
 800b036:	b003      	add	sp, #12
 800b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03c:	bfbc      	itt	lt
 800b03e:	464b      	movlt	r3, r9
 800b040:	46a1      	movlt	r9, r4
 800b042:	4630      	mov	r0, r6
 800b044:	bfb8      	it	lt
 800b046:	2501      	movlt	r5, #1
 800b048:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b04c:	bfb4      	ite	lt
 800b04e:	461c      	movlt	r4, r3
 800b050:	2500      	movge	r5, #0
 800b052:	f7ff fd3d 	bl	800aad0 <_Balloc>
 800b056:	4602      	mov	r2, r0
 800b058:	b918      	cbnz	r0, 800b062 <__mdiff+0x62>
 800b05a:	4b33      	ldr	r3, [pc, #204]	@ (800b128 <__mdiff+0x128>)
 800b05c:	f240 2145 	movw	r1, #581	@ 0x245
 800b060:	e7e2      	b.n	800b028 <__mdiff+0x28>
 800b062:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b066:	f104 0e14 	add.w	lr, r4, #20
 800b06a:	6926      	ldr	r6, [r4, #16]
 800b06c:	f100 0b14 	add.w	fp, r0, #20
 800b070:	60c5      	str	r5, [r0, #12]
 800b072:	f109 0514 	add.w	r5, r9, #20
 800b076:	f109 0310 	add.w	r3, r9, #16
 800b07a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b07e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b082:	46d9      	mov	r9, fp
 800b084:	f04f 0c00 	mov.w	ip, #0
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	9b01      	ldr	r3, [sp, #4]
 800b08c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b090:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b094:	4576      	cmp	r6, lr
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	fa1f f38a 	uxth.w	r3, sl
 800b09c:	4619      	mov	r1, r3
 800b09e:	b283      	uxth	r3, r0
 800b0a0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b0a4:	eba1 0303 	sub.w	r3, r1, r3
 800b0a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b0ac:	4463      	add	r3, ip
 800b0ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b0bc:	f849 3b04 	str.w	r3, [r9], #4
 800b0c0:	d8e3      	bhi.n	800b08a <__mdiff+0x8a>
 800b0c2:	1b33      	subs	r3, r6, r4
 800b0c4:	3415      	adds	r4, #21
 800b0c6:	3b15      	subs	r3, #21
 800b0c8:	f023 0303 	bic.w	r3, r3, #3
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	42a6      	cmp	r6, r4
 800b0d0:	bf38      	it	cc
 800b0d2:	2304      	movcc	r3, #4
 800b0d4:	441d      	add	r5, r3
 800b0d6:	445b      	add	r3, fp
 800b0d8:	462c      	mov	r4, r5
 800b0da:	461e      	mov	r6, r3
 800b0dc:	4544      	cmp	r4, r8
 800b0de:	d30e      	bcc.n	800b0fe <__mdiff+0xfe>
 800b0e0:	f108 0103 	add.w	r1, r8, #3
 800b0e4:	1b49      	subs	r1, r1, r5
 800b0e6:	3d03      	subs	r5, #3
 800b0e8:	f021 0103 	bic.w	r1, r1, #3
 800b0ec:	45a8      	cmp	r8, r5
 800b0ee:	bf38      	it	cc
 800b0f0:	2100      	movcc	r1, #0
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0f8:	b199      	cbz	r1, 800b122 <__mdiff+0x122>
 800b0fa:	6117      	str	r7, [r2, #16]
 800b0fc:	e79a      	b.n	800b034 <__mdiff+0x34>
 800b0fe:	f854 1b04 	ldr.w	r1, [r4], #4
 800b102:	46e6      	mov	lr, ip
 800b104:	fa1f fc81 	uxth.w	ip, r1
 800b108:	0c08      	lsrs	r0, r1, #16
 800b10a:	4471      	add	r1, lr
 800b10c:	44f4      	add	ip, lr
 800b10e:	b289      	uxth	r1, r1
 800b110:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b114:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b118:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b11c:	f846 1b04 	str.w	r1, [r6], #4
 800b120:	e7dc      	b.n	800b0dc <__mdiff+0xdc>
 800b122:	3f01      	subs	r7, #1
 800b124:	e7e6      	b.n	800b0f4 <__mdiff+0xf4>
 800b126:	bf00      	nop
 800b128:	0800c660 	.word	0x0800c660
 800b12c:	0800c671 	.word	0x0800c671

0800b130 <__d2b>:
 800b130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b134:	460f      	mov	r7, r1
 800b136:	2101      	movs	r1, #1
 800b138:	4616      	mov	r6, r2
 800b13a:	ec59 8b10 	vmov	r8, r9, d0
 800b13e:	f7ff fcc7 	bl	800aad0 <_Balloc>
 800b142:	4604      	mov	r4, r0
 800b144:	b930      	cbnz	r0, 800b154 <__d2b+0x24>
 800b146:	4602      	mov	r2, r0
 800b148:	4b23      	ldr	r3, [pc, #140]	@ (800b1d8 <__d2b+0xa8>)
 800b14a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b14e:	4823      	ldr	r0, [pc, #140]	@ (800b1dc <__d2b+0xac>)
 800b150:	f000 fa82 	bl	800b658 <__assert_func>
 800b154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b15c:	b10d      	cbz	r5, 800b162 <__d2b+0x32>
 800b15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b162:	9301      	str	r3, [sp, #4]
 800b164:	f1b8 0300 	subs.w	r3, r8, #0
 800b168:	d023      	beq.n	800b1b2 <__d2b+0x82>
 800b16a:	4668      	mov	r0, sp
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	f7ff fd78 	bl	800ac62 <__lo0bits>
 800b172:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b176:	b1d0      	cbz	r0, 800b1ae <__d2b+0x7e>
 800b178:	f1c0 0320 	rsb	r3, r0, #32
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	40c2      	lsrs	r2, r0
 800b182:	430b      	orrs	r3, r1
 800b184:	9201      	str	r2, [sp, #4]
 800b186:	6163      	str	r3, [r4, #20]
 800b188:	9b01      	ldr	r3, [sp, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	61a3      	str	r3, [r4, #24]
 800b18e:	bf0c      	ite	eq
 800b190:	2201      	moveq	r2, #1
 800b192:	2202      	movne	r2, #2
 800b194:	6122      	str	r2, [r4, #16]
 800b196:	b1a5      	cbz	r5, 800b1c2 <__d2b+0x92>
 800b198:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b19c:	4405      	add	r5, r0
 800b19e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b1a2:	603d      	str	r5, [r7, #0]
 800b1a4:	6030      	str	r0, [r6, #0]
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	b003      	add	sp, #12
 800b1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ae:	6161      	str	r1, [r4, #20]
 800b1b0:	e7ea      	b.n	800b188 <__d2b+0x58>
 800b1b2:	a801      	add	r0, sp, #4
 800b1b4:	f7ff fd55 	bl	800ac62 <__lo0bits>
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	3020      	adds	r0, #32
 800b1bc:	2201      	movs	r2, #1
 800b1be:	6163      	str	r3, [r4, #20]
 800b1c0:	e7e8      	b.n	800b194 <__d2b+0x64>
 800b1c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b1c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1ca:	6038      	str	r0, [r7, #0]
 800b1cc:	6918      	ldr	r0, [r3, #16]
 800b1ce:	f7ff fd29 	bl	800ac24 <__hi0bits>
 800b1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1d6:	e7e5      	b.n	800b1a4 <__d2b+0x74>
 800b1d8:	0800c660 	.word	0x0800c660
 800b1dc:	0800c671 	.word	0x0800c671

0800b1e0 <__ssputs_r>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	461f      	mov	r7, r3
 800b1e6:	688e      	ldr	r6, [r1, #8]
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	42be      	cmp	r6, r7
 800b1ee:	4690      	mov	r8, r2
 800b1f0:	680b      	ldr	r3, [r1, #0]
 800b1f2:	d82d      	bhi.n	800b250 <__ssputs_r+0x70>
 800b1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1fc:	d026      	beq.n	800b24c <__ssputs_r+0x6c>
 800b1fe:	6965      	ldr	r5, [r4, #20]
 800b200:	6909      	ldr	r1, [r1, #16]
 800b202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b206:	eba3 0901 	sub.w	r9, r3, r1
 800b20a:	1c7b      	adds	r3, r7, #1
 800b20c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b210:	444b      	add	r3, r9
 800b212:	106d      	asrs	r5, r5, #1
 800b214:	429d      	cmp	r5, r3
 800b216:	bf38      	it	cc
 800b218:	461d      	movcc	r5, r3
 800b21a:	0553      	lsls	r3, r2, #21
 800b21c:	d527      	bpl.n	800b26e <__ssputs_r+0x8e>
 800b21e:	4629      	mov	r1, r5
 800b220:	f7ff fbca 	bl	800a9b8 <_malloc_r>
 800b224:	4606      	mov	r6, r0
 800b226:	b360      	cbz	r0, 800b282 <__ssputs_r+0xa2>
 800b228:	464a      	mov	r2, r9
 800b22a:	6921      	ldr	r1, [r4, #16]
 800b22c:	f000 fa06 	bl	800b63c <memcpy>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	6126      	str	r6, [r4, #16]
 800b23e:	444e      	add	r6, r9
 800b240:	6165      	str	r5, [r4, #20]
 800b242:	eba5 0509 	sub.w	r5, r5, r9
 800b246:	6026      	str	r6, [r4, #0]
 800b248:	463e      	mov	r6, r7
 800b24a:	60a5      	str	r5, [r4, #8]
 800b24c:	42be      	cmp	r6, r7
 800b24e:	d900      	bls.n	800b252 <__ssputs_r+0x72>
 800b250:	463e      	mov	r6, r7
 800b252:	4632      	mov	r2, r6
 800b254:	4641      	mov	r1, r8
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	f000 f9c6 	bl	800b5e8 <memmove>
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	2000      	movs	r0, #0
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	60a3      	str	r3, [r4, #8]
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	4433      	add	r3, r6
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	462a      	mov	r2, r5
 800b270:	f000 fa36 	bl	800b6e0 <_realloc_r>
 800b274:	4606      	mov	r6, r0
 800b276:	2800      	cmp	r0, #0
 800b278:	d1e0      	bne.n	800b23c <__ssputs_r+0x5c>
 800b27a:	6921      	ldr	r1, [r4, #16]
 800b27c:	4650      	mov	r0, sl
 800b27e:	f7ff fb27 	bl	800a8d0 <_free_r>
 800b282:	230c      	movs	r3, #12
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	f8ca 3000 	str.w	r3, [sl]
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	e7e9      	b.n	800b26a <__ssputs_r+0x8a>
	...

0800b298 <_svfiprintf_r>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4698      	mov	r8, r3
 800b29e:	898b      	ldrh	r3, [r1, #12]
 800b2a0:	b09d      	sub	sp, #116	@ 0x74
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	061b      	lsls	r3, r3, #24
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	d510      	bpl.n	800b2ce <_svfiprintf_r+0x36>
 800b2ac:	690b      	ldr	r3, [r1, #16]
 800b2ae:	b973      	cbnz	r3, 800b2ce <_svfiprintf_r+0x36>
 800b2b0:	2140      	movs	r1, #64	@ 0x40
 800b2b2:	f7ff fb81 	bl	800a9b8 <_malloc_r>
 800b2b6:	6028      	str	r0, [r5, #0]
 800b2b8:	6128      	str	r0, [r5, #16]
 800b2ba:	b930      	cbnz	r0, 800b2ca <_svfiprintf_r+0x32>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	b01d      	add	sp, #116	@ 0x74
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	2340      	movs	r3, #64	@ 0x40
 800b2cc:	616b      	str	r3, [r5, #20]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d4:	f04f 0901 	mov.w	r9, #1
 800b2d8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b47c <_svfiprintf_r+0x1e4>
 800b2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2de:	2320      	movs	r3, #32
 800b2e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2e4:	2330      	movs	r3, #48	@ 0x30
 800b2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	469a      	mov	sl, r3
 800b2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f2:	b10a      	cbz	r2, 800b2f8 <_svfiprintf_r+0x60>
 800b2f4:	2a25      	cmp	r2, #37	@ 0x25
 800b2f6:	d1f9      	bne.n	800b2ec <_svfiprintf_r+0x54>
 800b2f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fc:	d00b      	beq.n	800b316 <_svfiprintf_r+0x7e>
 800b2fe:	465b      	mov	r3, fp
 800b300:	4622      	mov	r2, r4
 800b302:	4629      	mov	r1, r5
 800b304:	4638      	mov	r0, r7
 800b306:	f7ff ff6b 	bl	800b1e0 <__ssputs_r>
 800b30a:	3001      	adds	r0, #1
 800b30c:	f000 80a7 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b312:	445a      	add	r2, fp
 800b314:	9209      	str	r2, [sp, #36]	@ 0x24
 800b316:	f89a 3000 	ldrb.w	r3, [sl]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 809f 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b320:	2300      	movs	r3, #0
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	f10a 0a01 	add.w	sl, sl, #1
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b332:	931a      	str	r3, [sp, #104]	@ 0x68
 800b334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b338:	4654      	mov	r4, sl
 800b33a:	2205      	movs	r2, #5
 800b33c:	484f      	ldr	r0, [pc, #316]	@ (800b47c <_svfiprintf_r+0x1e4>)
 800b33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b342:	f7fe fc64 	bl	8009c0e <memchr>
 800b346:	9a04      	ldr	r2, [sp, #16]
 800b348:	b9d8      	cbnz	r0, 800b382 <_svfiprintf_r+0xea>
 800b34a:	06d0      	lsls	r0, r2, #27
 800b34c:	bf44      	itt	mi
 800b34e:	2320      	movmi	r3, #32
 800b350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b354:	0711      	lsls	r1, r2, #28
 800b356:	bf44      	itt	mi
 800b358:	232b      	movmi	r3, #43	@ 0x2b
 800b35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b35e:	f89a 3000 	ldrb.w	r3, [sl]
 800b362:	2b2a      	cmp	r3, #42	@ 0x2a
 800b364:	d015      	beq.n	800b392 <_svfiprintf_r+0xfa>
 800b366:	9a07      	ldr	r2, [sp, #28]
 800b368:	4654      	mov	r4, sl
 800b36a:	2000      	movs	r0, #0
 800b36c:	f04f 0c0a 	mov.w	ip, #10
 800b370:	4621      	mov	r1, r4
 800b372:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b376:	3b30      	subs	r3, #48	@ 0x30
 800b378:	2b09      	cmp	r3, #9
 800b37a:	d94b      	bls.n	800b414 <_svfiprintf_r+0x17c>
 800b37c:	b1b0      	cbz	r0, 800b3ac <_svfiprintf_r+0x114>
 800b37e:	9207      	str	r2, [sp, #28]
 800b380:	e014      	b.n	800b3ac <_svfiprintf_r+0x114>
 800b382:	eba0 0308 	sub.w	r3, r0, r8
 800b386:	46a2      	mov	sl, r4
 800b388:	fa09 f303 	lsl.w	r3, r9, r3
 800b38c:	4313      	orrs	r3, r2
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	e7d2      	b.n	800b338 <_svfiprintf_r+0xa0>
 800b392:	9b03      	ldr	r3, [sp, #12]
 800b394:	1d19      	adds	r1, r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	9103      	str	r1, [sp, #12]
 800b39c:	bfbb      	ittet	lt
 800b39e:	425b      	neglt	r3, r3
 800b3a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a4:	9307      	strge	r3, [sp, #28]
 800b3a6:	9307      	strlt	r3, [sp, #28]
 800b3a8:	bfb8      	it	lt
 800b3aa:	9204      	strlt	r2, [sp, #16]
 800b3ac:	7823      	ldrb	r3, [r4, #0]
 800b3ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3b0:	d10a      	bne.n	800b3c8 <_svfiprintf_r+0x130>
 800b3b2:	7863      	ldrb	r3, [r4, #1]
 800b3b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b6:	d132      	bne.n	800b41e <_svfiprintf_r+0x186>
 800b3b8:	9b03      	ldr	r3, [sp, #12]
 800b3ba:	3402      	adds	r4, #2
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3c4:	9203      	str	r2, [sp, #12]
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b48c <_svfiprintf_r+0x1f4>
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	7821      	ldrb	r1, [r4, #0]
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f7fe fc1c 	bl	8009c0e <memchr>
 800b3d6:	b138      	cbz	r0, 800b3e8 <_svfiprintf_r+0x150>
 800b3d8:	eba0 000a 	sub.w	r0, r0, sl
 800b3dc:	2240      	movs	r2, #64	@ 0x40
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	3401      	adds	r4, #1
 800b3e2:	4082      	lsls	r2, r0
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ec:	2206      	movs	r2, #6
 800b3ee:	4824      	ldr	r0, [pc, #144]	@ (800b480 <_svfiprintf_r+0x1e8>)
 800b3f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3f4:	f7fe fc0b 	bl	8009c0e <memchr>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d036      	beq.n	800b46a <_svfiprintf_r+0x1d2>
 800b3fc:	4b21      	ldr	r3, [pc, #132]	@ (800b484 <_svfiprintf_r+0x1ec>)
 800b3fe:	bb1b      	cbnz	r3, 800b448 <_svfiprintf_r+0x1b0>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	3307      	adds	r3, #7
 800b404:	f023 0307 	bic.w	r3, r3, #7
 800b408:	3308      	adds	r3, #8
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40e:	4433      	add	r3, r6
 800b410:	9309      	str	r3, [sp, #36]	@ 0x24
 800b412:	e76a      	b.n	800b2ea <_svfiprintf_r+0x52>
 800b414:	fb0c 3202 	mla	r2, ip, r2, r3
 800b418:	460c      	mov	r4, r1
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7a8      	b.n	800b370 <_svfiprintf_r+0xd8>
 800b41e:	2300      	movs	r3, #0
 800b420:	3401      	adds	r4, #1
 800b422:	f04f 0c0a 	mov.w	ip, #10
 800b426:	4619      	mov	r1, r3
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b430:	3a30      	subs	r2, #48	@ 0x30
 800b432:	2a09      	cmp	r2, #9
 800b434:	d903      	bls.n	800b43e <_svfiprintf_r+0x1a6>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0c6      	beq.n	800b3c8 <_svfiprintf_r+0x130>
 800b43a:	9105      	str	r1, [sp, #20]
 800b43c:	e7c4      	b.n	800b3c8 <_svfiprintf_r+0x130>
 800b43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b442:	4604      	mov	r4, r0
 800b444:	2301      	movs	r3, #1
 800b446:	e7f0      	b.n	800b42a <_svfiprintf_r+0x192>
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	462a      	mov	r2, r5
 800b44c:	a904      	add	r1, sp, #16
 800b44e:	4638      	mov	r0, r7
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4b0d      	ldr	r3, [pc, #52]	@ (800b488 <_svfiprintf_r+0x1f0>)
 800b454:	f7fd fe66 	bl	8009124 <_printf_float>
 800b458:	1c42      	adds	r2, r0, #1
 800b45a:	4606      	mov	r6, r0
 800b45c:	d1d6      	bne.n	800b40c <_svfiprintf_r+0x174>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	065b      	lsls	r3, r3, #25
 800b462:	f53f af2d 	bmi.w	800b2c0 <_svfiprintf_r+0x28>
 800b466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b468:	e72c      	b.n	800b2c4 <_svfiprintf_r+0x2c>
 800b46a:	ab03      	add	r3, sp, #12
 800b46c:	462a      	mov	r2, r5
 800b46e:	a904      	add	r1, sp, #16
 800b470:	4638      	mov	r0, r7
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	4b04      	ldr	r3, [pc, #16]	@ (800b488 <_svfiprintf_r+0x1f0>)
 800b476:	f7fe f8f1 	bl	800965c <_printf_i>
 800b47a:	e7ed      	b.n	800b458 <_svfiprintf_r+0x1c0>
 800b47c:	0800c7c8 	.word	0x0800c7c8
 800b480:	0800c7d2 	.word	0x0800c7d2
 800b484:	08009125 	.word	0x08009125
 800b488:	0800b1e1 	.word	0x0800b1e1
 800b48c:	0800c7ce 	.word	0x0800c7ce

0800b490 <__sflush_r>:
 800b490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b498:	0716      	lsls	r6, r2, #28
 800b49a:	4605      	mov	r5, r0
 800b49c:	460c      	mov	r4, r1
 800b49e:	d454      	bmi.n	800b54a <__sflush_r+0xba>
 800b4a0:	684b      	ldr	r3, [r1, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	dc02      	bgt.n	800b4ac <__sflush_r+0x1c>
 800b4a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dd48      	ble.n	800b53e <__sflush_r+0xae>
 800b4ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	d045      	beq.n	800b53e <__sflush_r+0xae>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b4b8:	682f      	ldr	r7, [r5, #0]
 800b4ba:	6a21      	ldr	r1, [r4, #32]
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	d030      	beq.n	800b522 <__sflush_r+0x92>
 800b4c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	0759      	lsls	r1, r3, #29
 800b4c6:	d505      	bpl.n	800b4d4 <__sflush_r+0x44>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	1ad2      	subs	r2, r2, r3
 800b4cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b4ce:	b10b      	cbz	r3, 800b4d4 <__sflush_r+0x44>
 800b4d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b4d2:	1ad2      	subs	r2, r2, r3
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4d8:	6a21      	ldr	r1, [r4, #32]
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b0      	blx	r6
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	d106      	bne.n	800b4f2 <__sflush_r+0x62>
 800b4e4:	6829      	ldr	r1, [r5, #0]
 800b4e6:	291d      	cmp	r1, #29
 800b4e8:	d82b      	bhi.n	800b542 <__sflush_r+0xb2>
 800b4ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b594 <__sflush_r+0x104>)
 800b4ec:	410a      	asrs	r2, r1
 800b4ee:	07d6      	lsls	r6, r2, #31
 800b4f0:	d427      	bmi.n	800b542 <__sflush_r+0xb2>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	04d9      	lsls	r1, r3, #19
 800b4f6:	6062      	str	r2, [r4, #4]
 800b4f8:	6922      	ldr	r2, [r4, #16]
 800b4fa:	6022      	str	r2, [r4, #0]
 800b4fc:	d504      	bpl.n	800b508 <__sflush_r+0x78>
 800b4fe:	1c42      	adds	r2, r0, #1
 800b500:	d101      	bne.n	800b506 <__sflush_r+0x76>
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	b903      	cbnz	r3, 800b508 <__sflush_r+0x78>
 800b506:	6560      	str	r0, [r4, #84]	@ 0x54
 800b508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b50a:	602f      	str	r7, [r5, #0]
 800b50c:	b1b9      	cbz	r1, 800b53e <__sflush_r+0xae>
 800b50e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b512:	4299      	cmp	r1, r3
 800b514:	d002      	beq.n	800b51c <__sflush_r+0x8c>
 800b516:	4628      	mov	r0, r5
 800b518:	f7ff f9da 	bl	800a8d0 <_free_r>
 800b51c:	2300      	movs	r3, #0
 800b51e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b520:	e00d      	b.n	800b53e <__sflush_r+0xae>
 800b522:	2301      	movs	r3, #1
 800b524:	4628      	mov	r0, r5
 800b526:	47b0      	blx	r6
 800b528:	4602      	mov	r2, r0
 800b52a:	1c50      	adds	r0, r2, #1
 800b52c:	d1c9      	bne.n	800b4c2 <__sflush_r+0x32>
 800b52e:	682b      	ldr	r3, [r5, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0c6      	beq.n	800b4c2 <__sflush_r+0x32>
 800b534:	2b1d      	cmp	r3, #29
 800b536:	d001      	beq.n	800b53c <__sflush_r+0xac>
 800b538:	2b16      	cmp	r3, #22
 800b53a:	d11d      	bne.n	800b578 <__sflush_r+0xe8>
 800b53c:	602f      	str	r7, [r5, #0]
 800b53e:	2000      	movs	r0, #0
 800b540:	e021      	b.n	800b586 <__sflush_r+0xf6>
 800b542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b546:	b21b      	sxth	r3, r3
 800b548:	e01a      	b.n	800b580 <__sflush_r+0xf0>
 800b54a:	690f      	ldr	r7, [r1, #16]
 800b54c:	2f00      	cmp	r7, #0
 800b54e:	d0f6      	beq.n	800b53e <__sflush_r+0xae>
 800b550:	0793      	lsls	r3, r2, #30
 800b552:	680e      	ldr	r6, [r1, #0]
 800b554:	600f      	str	r7, [r1, #0]
 800b556:	bf0c      	ite	eq
 800b558:	694b      	ldreq	r3, [r1, #20]
 800b55a:	2300      	movne	r3, #0
 800b55c:	eba6 0807 	sub.w	r8, r6, r7
 800b560:	608b      	str	r3, [r1, #8]
 800b562:	f1b8 0f00 	cmp.w	r8, #0
 800b566:	ddea      	ble.n	800b53e <__sflush_r+0xae>
 800b568:	4643      	mov	r3, r8
 800b56a:	463a      	mov	r2, r7
 800b56c:	6a21      	ldr	r1, [r4, #32]
 800b56e:	4628      	mov	r0, r5
 800b570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b572:	47b0      	blx	r6
 800b574:	2800      	cmp	r0, #0
 800b576:	dc08      	bgt.n	800b58a <__sflush_r+0xfa>
 800b578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	81a3      	strh	r3, [r4, #12]
 800b586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b58a:	4407      	add	r7, r0
 800b58c:	eba8 0800 	sub.w	r8, r8, r0
 800b590:	e7e7      	b.n	800b562 <__sflush_r+0xd2>
 800b592:	bf00      	nop
 800b594:	dfbffffe 	.word	0xdfbffffe

0800b598 <_fflush_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	690b      	ldr	r3, [r1, #16]
 800b59c:	4605      	mov	r5, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	b913      	cbnz	r3, 800b5a8 <_fflush_r+0x10>
 800b5a2:	2500      	movs	r5, #0
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	b118      	cbz	r0, 800b5b2 <_fflush_r+0x1a>
 800b5aa:	6a03      	ldr	r3, [r0, #32]
 800b5ac:	b90b      	cbnz	r3, 800b5b2 <_fflush_r+0x1a>
 800b5ae:	f7fe fa01 	bl	80099b4 <__sinit>
 800b5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0f3      	beq.n	800b5a2 <_fflush_r+0xa>
 800b5ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b5bc:	07d0      	lsls	r0, r2, #31
 800b5be:	d404      	bmi.n	800b5ca <_fflush_r+0x32>
 800b5c0:	0599      	lsls	r1, r3, #22
 800b5c2:	d402      	bmi.n	800b5ca <_fflush_r+0x32>
 800b5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5c6:	f7fe fb20 	bl	8009c0a <__retarget_lock_acquire_recursive>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	f7ff ff5f 	bl	800b490 <__sflush_r>
 800b5d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	07da      	lsls	r2, r3, #31
 800b5d8:	d4e4      	bmi.n	800b5a4 <_fflush_r+0xc>
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	059b      	lsls	r3, r3, #22
 800b5de:	d4e1      	bmi.n	800b5a4 <_fflush_r+0xc>
 800b5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5e2:	f7fe fb13 	bl	8009c0c <__retarget_lock_release_recursive>
 800b5e6:	e7dd      	b.n	800b5a4 <_fflush_r+0xc>

0800b5e8 <memmove>:
 800b5e8:	4288      	cmp	r0, r1
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	eb01 0402 	add.w	r4, r1, r2
 800b5f0:	d902      	bls.n	800b5f8 <memmove+0x10>
 800b5f2:	4284      	cmp	r4, r0
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	d807      	bhi.n	800b608 <memmove+0x20>
 800b5f8:	1e43      	subs	r3, r0, #1
 800b5fa:	42a1      	cmp	r1, r4
 800b5fc:	d008      	beq.n	800b610 <memmove+0x28>
 800b5fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b602:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b606:	e7f8      	b.n	800b5fa <memmove+0x12>
 800b608:	4402      	add	r2, r0
 800b60a:	4601      	mov	r1, r0
 800b60c:	428a      	cmp	r2, r1
 800b60e:	d100      	bne.n	800b612 <memmove+0x2a>
 800b610:	bd10      	pop	{r4, pc}
 800b612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b61a:	e7f7      	b.n	800b60c <memmove+0x24>

0800b61c <_sbrk_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	2300      	movs	r3, #0
 800b620:	4d05      	ldr	r5, [pc, #20]	@ (800b638 <_sbrk_r+0x1c>)
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	f7f7 fac4 	bl	8002bb4 <_sbrk>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_sbrk_r+0x1a>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_sbrk_r+0x1a>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20000ab4 	.word	0x20000ab4

0800b63c <memcpy>:
 800b63c:	440a      	add	r2, r1
 800b63e:	1e43      	subs	r3, r0, #1
 800b640:	4291      	cmp	r1, r2
 800b642:	d100      	bne.n	800b646 <memcpy+0xa>
 800b644:	4770      	bx	lr
 800b646:	b510      	push	{r4, lr}
 800b648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b64c:	4291      	cmp	r1, r2
 800b64e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b652:	d1f9      	bne.n	800b648 <memcpy+0xc>
 800b654:	bd10      	pop	{r4, pc}
	...

0800b658 <__assert_func>:
 800b658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b65a:	4614      	mov	r4, r2
 800b65c:	461a      	mov	r2, r3
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <__assert_func+0x2c>)
 800b660:	4605      	mov	r5, r0
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68d8      	ldr	r0, [r3, #12]
 800b666:	b954      	cbnz	r4, 800b67e <__assert_func+0x26>
 800b668:	4b07      	ldr	r3, [pc, #28]	@ (800b688 <__assert_func+0x30>)
 800b66a:	461c      	mov	r4, r3
 800b66c:	9100      	str	r1, [sp, #0]
 800b66e:	4907      	ldr	r1, [pc, #28]	@ (800b68c <__assert_func+0x34>)
 800b670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b674:	462b      	mov	r3, r5
 800b676:	f000 f86f 	bl	800b758 <fiprintf>
 800b67a:	f000 f87f 	bl	800b77c <abort>
 800b67e:	4b04      	ldr	r3, [pc, #16]	@ (800b690 <__assert_func+0x38>)
 800b680:	e7f4      	b.n	800b66c <__assert_func+0x14>
 800b682:	bf00      	nop
 800b684:	20000020 	.word	0x20000020
 800b688:	0800c81e 	.word	0x0800c81e
 800b68c:	0800c7f0 	.word	0x0800c7f0
 800b690:	0800c7e3 	.word	0x0800c7e3

0800b694 <_calloc_r>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	fba1 5402 	umull	r5, r4, r1, r2
 800b69a:	b93c      	cbnz	r4, 800b6ac <_calloc_r+0x18>
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7ff f98b 	bl	800a9b8 <_malloc_r>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	b928      	cbnz	r0, 800b6b2 <_calloc_r+0x1e>
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	220c      	movs	r2, #12
 800b6ae:	6002      	str	r2, [r0, #0]
 800b6b0:	e7f9      	b.n	800b6a6 <_calloc_r+0x12>
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	f7fe fa2a 	bl	8009b0e <memset>
 800b6ba:	e7f5      	b.n	800b6a8 <_calloc_r+0x14>

0800b6bc <__ascii_mbtowc>:
 800b6bc:	b082      	sub	sp, #8
 800b6be:	b901      	cbnz	r1, 800b6c2 <__ascii_mbtowc+0x6>
 800b6c0:	a901      	add	r1, sp, #4
 800b6c2:	b142      	cbz	r2, 800b6d6 <__ascii_mbtowc+0x1a>
 800b6c4:	b14b      	cbz	r3, 800b6da <__ascii_mbtowc+0x1e>
 800b6c6:	7813      	ldrb	r3, [r2, #0]
 800b6c8:	600b      	str	r3, [r1, #0]
 800b6ca:	7812      	ldrb	r2, [r2, #0]
 800b6cc:	1e10      	subs	r0, r2, #0
 800b6ce:	bf18      	it	ne
 800b6d0:	2001      	movne	r0, #1
 800b6d2:	b002      	add	sp, #8
 800b6d4:	4770      	bx	lr
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	e7fb      	b.n	800b6d2 <__ascii_mbtowc+0x16>
 800b6da:	f06f 0001 	mvn.w	r0, #1
 800b6de:	e7f8      	b.n	800b6d2 <__ascii_mbtowc+0x16>

0800b6e0 <_realloc_r>:
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4615      	mov	r5, r2
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	b921      	cbnz	r1, 800b6f6 <_realloc_r+0x16>
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f2:	f7ff b961 	b.w	800a9b8 <_malloc_r>
 800b6f6:	b92a      	cbnz	r2, 800b704 <_realloc_r+0x24>
 800b6f8:	f7ff f8ea 	bl	800a8d0 <_free_r>
 800b6fc:	2400      	movs	r4, #0
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	f000 f841 	bl	800b78a <_malloc_usable_size_r>
 800b708:	4285      	cmp	r5, r0
 800b70a:	4606      	mov	r6, r0
 800b70c:	d802      	bhi.n	800b714 <_realloc_r+0x34>
 800b70e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b712:	d8f4      	bhi.n	800b6fe <_realloc_r+0x1e>
 800b714:	4629      	mov	r1, r5
 800b716:	4640      	mov	r0, r8
 800b718:	f7ff f94e 	bl	800a9b8 <_malloc_r>
 800b71c:	4607      	mov	r7, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0ec      	beq.n	800b6fc <_realloc_r+0x1c>
 800b722:	42b5      	cmp	r5, r6
 800b724:	462a      	mov	r2, r5
 800b726:	4621      	mov	r1, r4
 800b728:	bf28      	it	cs
 800b72a:	4632      	movcs	r2, r6
 800b72c:	f7ff ff86 	bl	800b63c <memcpy>
 800b730:	4621      	mov	r1, r4
 800b732:	4640      	mov	r0, r8
 800b734:	463c      	mov	r4, r7
 800b736:	f7ff f8cb 	bl	800a8d0 <_free_r>
 800b73a:	e7e0      	b.n	800b6fe <_realloc_r+0x1e>

0800b73c <__ascii_wctomb>:
 800b73c:	4603      	mov	r3, r0
 800b73e:	4608      	mov	r0, r1
 800b740:	b141      	cbz	r1, 800b754 <__ascii_wctomb+0x18>
 800b742:	2aff      	cmp	r2, #255	@ 0xff
 800b744:	d904      	bls.n	800b750 <__ascii_wctomb+0x14>
 800b746:	228a      	movs	r2, #138	@ 0x8a
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	4770      	bx	lr
 800b750:	2001      	movs	r0, #1
 800b752:	700a      	strb	r2, [r1, #0]
 800b754:	4770      	bx	lr
	...

0800b758 <fiprintf>:
 800b758:	b40e      	push	{r1, r2, r3}
 800b75a:	b503      	push	{r0, r1, lr}
 800b75c:	ab03      	add	r3, sp, #12
 800b75e:	4601      	mov	r1, r0
 800b760:	4805      	ldr	r0, [pc, #20]	@ (800b778 <fiprintf+0x20>)
 800b762:	f853 2b04 	ldr.w	r2, [r3], #4
 800b766:	6800      	ldr	r0, [r0, #0]
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	f000 f83f 	bl	800b7ec <_vfiprintf_r>
 800b76e:	b002      	add	sp, #8
 800b770:	f85d eb04 	ldr.w	lr, [sp], #4
 800b774:	b003      	add	sp, #12
 800b776:	4770      	bx	lr
 800b778:	20000020 	.word	0x20000020

0800b77c <abort>:
 800b77c:	2006      	movs	r0, #6
 800b77e:	b508      	push	{r3, lr}
 800b780:	f000 fa08 	bl	800bb94 <raise>
 800b784:	2001      	movs	r0, #1
 800b786:	f7f7 f99d 	bl	8002ac4 <_exit>

0800b78a <_malloc_usable_size_r>:
 800b78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78e:	1f18      	subs	r0, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	bfbc      	itt	lt
 800b794:	580b      	ldrlt	r3, [r1, r0]
 800b796:	18c0      	addlt	r0, r0, r3
 800b798:	4770      	bx	lr

0800b79a <__sfputc_r>:
 800b79a:	6893      	ldr	r3, [r2, #8]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	6093      	str	r3, [r2, #8]
 800b7a2:	b410      	push	{r4}
 800b7a4:	da08      	bge.n	800b7b8 <__sfputc_r+0x1e>
 800b7a6:	6994      	ldr	r4, [r2, #24]
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	db01      	blt.n	800b7b0 <__sfputc_r+0x16>
 800b7ac:	290a      	cmp	r1, #10
 800b7ae:	d103      	bne.n	800b7b8 <__sfputc_r+0x1e>
 800b7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b4:	f000 b932 	b.w	800ba1c <__swbuf_r>
 800b7b8:	6813      	ldr	r3, [r2, #0]
 800b7ba:	1c58      	adds	r0, r3, #1
 800b7bc:	6010      	str	r0, [r2, #0]
 800b7be:	4608      	mov	r0, r1
 800b7c0:	7019      	strb	r1, [r3, #0]
 800b7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <__sfputs_r>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	460f      	mov	r7, r1
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	18d5      	adds	r5, r2, r3
 800b7d2:	42ac      	cmp	r4, r5
 800b7d4:	d101      	bne.n	800b7da <__sfputs_r+0x12>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e007      	b.n	800b7ea <__sfputs_r+0x22>
 800b7da:	463a      	mov	r2, r7
 800b7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff ffda 	bl	800b79a <__sfputc_r>
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	d1f3      	bne.n	800b7d2 <__sfputs_r+0xa>
 800b7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7ec <_vfiprintf_r>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	b09d      	sub	sp, #116	@ 0x74
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	4698      	mov	r8, r3
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	b118      	cbz	r0, 800b804 <_vfiprintf_r+0x18>
 800b7fc:	6a03      	ldr	r3, [r0, #32]
 800b7fe:	b90b      	cbnz	r3, 800b804 <_vfiprintf_r+0x18>
 800b800:	f7fe f8d8 	bl	80099b4 <__sinit>
 800b804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b806:	07d9      	lsls	r1, r3, #31
 800b808:	d405      	bmi.n	800b816 <_vfiprintf_r+0x2a>
 800b80a:	89ab      	ldrh	r3, [r5, #12]
 800b80c:	059a      	lsls	r2, r3, #22
 800b80e:	d402      	bmi.n	800b816 <_vfiprintf_r+0x2a>
 800b810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b812:	f7fe f9fa 	bl	8009c0a <__retarget_lock_acquire_recursive>
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	071b      	lsls	r3, r3, #28
 800b81a:	d501      	bpl.n	800b820 <_vfiprintf_r+0x34>
 800b81c:	692b      	ldr	r3, [r5, #16]
 800b81e:	b99b      	cbnz	r3, 800b848 <_vfiprintf_r+0x5c>
 800b820:	4629      	mov	r1, r5
 800b822:	4630      	mov	r0, r6
 800b824:	f000 f938 	bl	800ba98 <__swsetup_r>
 800b828:	b170      	cbz	r0, 800b848 <_vfiprintf_r+0x5c>
 800b82a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b82c:	07dc      	lsls	r4, r3, #31
 800b82e:	d504      	bpl.n	800b83a <_vfiprintf_r+0x4e>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	b01d      	add	sp, #116	@ 0x74
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	89ab      	ldrh	r3, [r5, #12]
 800b83c:	0598      	lsls	r0, r3, #22
 800b83e:	d4f7      	bmi.n	800b830 <_vfiprintf_r+0x44>
 800b840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b842:	f7fe f9e3 	bl	8009c0c <__retarget_lock_release_recursive>
 800b846:	e7f3      	b.n	800b830 <_vfiprintf_r+0x44>
 800b848:	2300      	movs	r3, #0
 800b84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b84e:	f04f 0901 	mov.w	r9, #1
 800b852:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ba08 <_vfiprintf_r+0x21c>
 800b856:	9309      	str	r3, [sp, #36]	@ 0x24
 800b858:	2320      	movs	r3, #32
 800b85a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b85e:	2330      	movs	r3, #48	@ 0x30
 800b860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b864:	4623      	mov	r3, r4
 800b866:	469a      	mov	sl, r3
 800b868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86c:	b10a      	cbz	r2, 800b872 <_vfiprintf_r+0x86>
 800b86e:	2a25      	cmp	r2, #37	@ 0x25
 800b870:	d1f9      	bne.n	800b866 <_vfiprintf_r+0x7a>
 800b872:	ebba 0b04 	subs.w	fp, sl, r4
 800b876:	d00b      	beq.n	800b890 <_vfiprintf_r+0xa4>
 800b878:	465b      	mov	r3, fp
 800b87a:	4622      	mov	r2, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff ffa2 	bl	800b7c8 <__sfputs_r>
 800b884:	3001      	adds	r0, #1
 800b886:	f000 80a7 	beq.w	800b9d8 <_vfiprintf_r+0x1ec>
 800b88a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b88c:	445a      	add	r2, fp
 800b88e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b890:	f89a 3000 	ldrb.w	r3, [sl]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 809f 	beq.w	800b9d8 <_vfiprintf_r+0x1ec>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a0:	f10a 0a01 	add.w	sl, sl, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	9307      	str	r3, [sp, #28]
 800b8a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b2:	4654      	mov	r4, sl
 800b8b4:	2205      	movs	r2, #5
 800b8b6:	4854      	ldr	r0, [pc, #336]	@ (800ba08 <_vfiprintf_r+0x21c>)
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	f7fe f9a7 	bl	8009c0e <memchr>
 800b8c0:	9a04      	ldr	r2, [sp, #16]
 800b8c2:	b9d8      	cbnz	r0, 800b8fc <_vfiprintf_r+0x110>
 800b8c4:	06d1      	lsls	r1, r2, #27
 800b8c6:	bf44      	itt	mi
 800b8c8:	2320      	movmi	r3, #32
 800b8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8ce:	0713      	lsls	r3, r2, #28
 800b8d0:	bf44      	itt	mi
 800b8d2:	232b      	movmi	r3, #43	@ 0x2b
 800b8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8de:	d015      	beq.n	800b90c <_vfiprintf_r+0x120>
 800b8e0:	9a07      	ldr	r2, [sp, #28]
 800b8e2:	4654      	mov	r4, sl
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f04f 0c0a 	mov.w	ip, #10
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8f0:	3b30      	subs	r3, #48	@ 0x30
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d94b      	bls.n	800b98e <_vfiprintf_r+0x1a2>
 800b8f6:	b1b0      	cbz	r0, 800b926 <_vfiprintf_r+0x13a>
 800b8f8:	9207      	str	r2, [sp, #28]
 800b8fa:	e014      	b.n	800b926 <_vfiprintf_r+0x13a>
 800b8fc:	eba0 0308 	sub.w	r3, r0, r8
 800b900:	46a2      	mov	sl, r4
 800b902:	fa09 f303 	lsl.w	r3, r9, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	e7d2      	b.n	800b8b2 <_vfiprintf_r+0xc6>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	1d19      	adds	r1, r3, #4
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	bfbb      	ittet	lt
 800b918:	425b      	neglt	r3, r3
 800b91a:	f042 0202 	orrlt.w	r2, r2, #2
 800b91e:	9307      	strge	r3, [sp, #28]
 800b920:	9307      	strlt	r3, [sp, #28]
 800b922:	bfb8      	it	lt
 800b924:	9204      	strlt	r2, [sp, #16]
 800b926:	7823      	ldrb	r3, [r4, #0]
 800b928:	2b2e      	cmp	r3, #46	@ 0x2e
 800b92a:	d10a      	bne.n	800b942 <_vfiprintf_r+0x156>
 800b92c:	7863      	ldrb	r3, [r4, #1]
 800b92e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b930:	d132      	bne.n	800b998 <_vfiprintf_r+0x1ac>
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	3402      	adds	r4, #2
 800b936:	1d1a      	adds	r2, r3, #4
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b93e:	9203      	str	r2, [sp, #12]
 800b940:	9305      	str	r3, [sp, #20]
 800b942:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba18 <_vfiprintf_r+0x22c>
 800b946:	2203      	movs	r2, #3
 800b948:	7821      	ldrb	r1, [r4, #0]
 800b94a:	4650      	mov	r0, sl
 800b94c:	f7fe f95f 	bl	8009c0e <memchr>
 800b950:	b138      	cbz	r0, 800b962 <_vfiprintf_r+0x176>
 800b952:	eba0 000a 	sub.w	r0, r0, sl
 800b956:	2240      	movs	r2, #64	@ 0x40
 800b958:	9b04      	ldr	r3, [sp, #16]
 800b95a:	3401      	adds	r4, #1
 800b95c:	4082      	lsls	r2, r0
 800b95e:	4313      	orrs	r3, r2
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b966:	2206      	movs	r2, #6
 800b968:	4828      	ldr	r0, [pc, #160]	@ (800ba0c <_vfiprintf_r+0x220>)
 800b96a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b96e:	f7fe f94e 	bl	8009c0e <memchr>
 800b972:	2800      	cmp	r0, #0
 800b974:	d03f      	beq.n	800b9f6 <_vfiprintf_r+0x20a>
 800b976:	4b26      	ldr	r3, [pc, #152]	@ (800ba10 <_vfiprintf_r+0x224>)
 800b978:	bb1b      	cbnz	r3, 800b9c2 <_vfiprintf_r+0x1d6>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	3307      	adds	r3, #7
 800b97e:	f023 0307 	bic.w	r3, r3, #7
 800b982:	3308      	adds	r3, #8
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b988:	443b      	add	r3, r7
 800b98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98c:	e76a      	b.n	800b864 <_vfiprintf_r+0x78>
 800b98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b992:	460c      	mov	r4, r1
 800b994:	2001      	movs	r0, #1
 800b996:	e7a8      	b.n	800b8ea <_vfiprintf_r+0xfe>
 800b998:	2300      	movs	r3, #0
 800b99a:	3401      	adds	r4, #1
 800b99c:	f04f 0c0a 	mov.w	ip, #10
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9aa:	3a30      	subs	r2, #48	@ 0x30
 800b9ac:	2a09      	cmp	r2, #9
 800b9ae:	d903      	bls.n	800b9b8 <_vfiprintf_r+0x1cc>
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0c6      	beq.n	800b942 <_vfiprintf_r+0x156>
 800b9b4:	9105      	str	r1, [sp, #20]
 800b9b6:	e7c4      	b.n	800b942 <_vfiprintf_r+0x156>
 800b9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9bc:	4604      	mov	r4, r0
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7f0      	b.n	800b9a4 <_vfiprintf_r+0x1b8>
 800b9c2:	ab03      	add	r3, sp, #12
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	a904      	add	r1, sp, #16
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	4b11      	ldr	r3, [pc, #68]	@ (800ba14 <_vfiprintf_r+0x228>)
 800b9ce:	f7fd fba9 	bl	8009124 <_printf_float>
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	1c78      	adds	r0, r7, #1
 800b9d6:	d1d6      	bne.n	800b986 <_vfiprintf_r+0x19a>
 800b9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9da:	07d9      	lsls	r1, r3, #31
 800b9dc:	d405      	bmi.n	800b9ea <_vfiprintf_r+0x1fe>
 800b9de:	89ab      	ldrh	r3, [r5, #12]
 800b9e0:	059a      	lsls	r2, r3, #22
 800b9e2:	d402      	bmi.n	800b9ea <_vfiprintf_r+0x1fe>
 800b9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9e6:	f7fe f911 	bl	8009c0c <__retarget_lock_release_recursive>
 800b9ea:	89ab      	ldrh	r3, [r5, #12]
 800b9ec:	065b      	lsls	r3, r3, #25
 800b9ee:	f53f af1f 	bmi.w	800b830 <_vfiprintf_r+0x44>
 800b9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9f4:	e71e      	b.n	800b834 <_vfiprintf_r+0x48>
 800b9f6:	ab03      	add	r3, sp, #12
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	a904      	add	r1, sp, #16
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	4b04      	ldr	r3, [pc, #16]	@ (800ba14 <_vfiprintf_r+0x228>)
 800ba02:	f7fd fe2b 	bl	800965c <_printf_i>
 800ba06:	e7e4      	b.n	800b9d2 <_vfiprintf_r+0x1e6>
 800ba08:	0800c7c8 	.word	0x0800c7c8
 800ba0c:	0800c7d2 	.word	0x0800c7d2
 800ba10:	08009125 	.word	0x08009125
 800ba14:	0800b7c9 	.word	0x0800b7c9
 800ba18:	0800c7ce 	.word	0x0800c7ce

0800ba1c <__swbuf_r>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	460e      	mov	r6, r1
 800ba20:	4614      	mov	r4, r2
 800ba22:	4605      	mov	r5, r0
 800ba24:	b118      	cbz	r0, 800ba2e <__swbuf_r+0x12>
 800ba26:	6a03      	ldr	r3, [r0, #32]
 800ba28:	b90b      	cbnz	r3, 800ba2e <__swbuf_r+0x12>
 800ba2a:	f7fd ffc3 	bl	80099b4 <__sinit>
 800ba2e:	69a3      	ldr	r3, [r4, #24]
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	071a      	lsls	r2, r3, #28
 800ba36:	d501      	bpl.n	800ba3c <__swbuf_r+0x20>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	b943      	cbnz	r3, 800ba4e <__swbuf_r+0x32>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 f82a 	bl	800ba98 <__swsetup_r>
 800ba44:	b118      	cbz	r0, 800ba4e <__swbuf_r+0x32>
 800ba46:	f04f 37ff 	mov.w	r7, #4294967295
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	b2f6      	uxtb	r6, r6
 800ba52:	6922      	ldr	r2, [r4, #16]
 800ba54:	4637      	mov	r7, r6
 800ba56:	1a98      	subs	r0, r3, r2
 800ba58:	6963      	ldr	r3, [r4, #20]
 800ba5a:	4283      	cmp	r3, r0
 800ba5c:	dc05      	bgt.n	800ba6a <__swbuf_r+0x4e>
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4628      	mov	r0, r5
 800ba62:	f7ff fd99 	bl	800b598 <_fflush_r>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1ed      	bne.n	800ba46 <__swbuf_r+0x2a>
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	60a3      	str	r3, [r4, #8]
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	6022      	str	r2, [r4, #0]
 800ba76:	701e      	strb	r6, [r3, #0]
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	6962      	ldr	r2, [r4, #20]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d004      	beq.n	800ba8a <__swbuf_r+0x6e>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	07db      	lsls	r3, r3, #31
 800ba84:	d5e1      	bpl.n	800ba4a <__swbuf_r+0x2e>
 800ba86:	2e0a      	cmp	r6, #10
 800ba88:	d1df      	bne.n	800ba4a <__swbuf_r+0x2e>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f7ff fd83 	bl	800b598 <_fflush_r>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0d9      	beq.n	800ba4a <__swbuf_r+0x2e>
 800ba96:	e7d6      	b.n	800ba46 <__swbuf_r+0x2a>

0800ba98 <__swsetup_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4b29      	ldr	r3, [pc, #164]	@ (800bb40 <__swsetup_r+0xa8>)
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	b118      	cbz	r0, 800baac <__swsetup_r+0x14>
 800baa4:	6a03      	ldr	r3, [r0, #32]
 800baa6:	b90b      	cbnz	r3, 800baac <__swsetup_r+0x14>
 800baa8:	f7fd ff84 	bl	80099b4 <__sinit>
 800baac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab0:	0719      	lsls	r1, r3, #28
 800bab2:	d422      	bmi.n	800bafa <__swsetup_r+0x62>
 800bab4:	06da      	lsls	r2, r3, #27
 800bab6:	d407      	bmi.n	800bac8 <__swsetup_r+0x30>
 800bab8:	2209      	movs	r2, #9
 800baba:	602a      	str	r2, [r5, #0]
 800babc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	e033      	b.n	800bb30 <__swsetup_r+0x98>
 800bac8:	0758      	lsls	r0, r3, #29
 800baca:	d512      	bpl.n	800baf2 <__swsetup_r+0x5a>
 800bacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bace:	b141      	cbz	r1, 800bae2 <__swsetup_r+0x4a>
 800bad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bad4:	4299      	cmp	r1, r3
 800bad6:	d002      	beq.n	800bade <__swsetup_r+0x46>
 800bad8:	4628      	mov	r0, r5
 800bada:	f7fe fef9 	bl	800a8d0 <_free_r>
 800bade:	2300      	movs	r3, #0
 800bae0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bae8:	81a3      	strh	r3, [r4, #12]
 800baea:	2300      	movs	r3, #0
 800baec:	6063      	str	r3, [r4, #4]
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	f043 0308 	orr.w	r3, r3, #8
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	6923      	ldr	r3, [r4, #16]
 800bafc:	b94b      	cbnz	r3, 800bb12 <__swsetup_r+0x7a>
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb08:	d003      	beq.n	800bb12 <__swsetup_r+0x7a>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f000 f882 	bl	800bc16 <__smakebuf_r>
 800bb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb16:	f013 0201 	ands.w	r2, r3, #1
 800bb1a:	d00a      	beq.n	800bb32 <__swsetup_r+0x9a>
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	60a2      	str	r2, [r4, #8]
 800bb20:	6962      	ldr	r2, [r4, #20]
 800bb22:	4252      	negs	r2, r2
 800bb24:	61a2      	str	r2, [r4, #24]
 800bb26:	6922      	ldr	r2, [r4, #16]
 800bb28:	b942      	cbnz	r2, 800bb3c <__swsetup_r+0xa4>
 800bb2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb2e:	d1c5      	bne.n	800babc <__swsetup_r+0x24>
 800bb30:	bd38      	pop	{r3, r4, r5, pc}
 800bb32:	0799      	lsls	r1, r3, #30
 800bb34:	bf58      	it	pl
 800bb36:	6962      	ldrpl	r2, [r4, #20]
 800bb38:	60a2      	str	r2, [r4, #8]
 800bb3a:	e7f4      	b.n	800bb26 <__swsetup_r+0x8e>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	e7f7      	b.n	800bb30 <__swsetup_r+0x98>
 800bb40:	20000020 	.word	0x20000020

0800bb44 <_raise_r>:
 800bb44:	291f      	cmp	r1, #31
 800bb46:	b538      	push	{r3, r4, r5, lr}
 800bb48:	4605      	mov	r5, r0
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	d904      	bls.n	800bb58 <_raise_r+0x14>
 800bb4e:	2316      	movs	r3, #22
 800bb50:	6003      	str	r3, [r0, #0]
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb5a:	b112      	cbz	r2, 800bb62 <_raise_r+0x1e>
 800bb5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb60:	b94b      	cbnz	r3, 800bb76 <_raise_r+0x32>
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 f830 	bl	800bbc8 <_getpid_r>
 800bb68:	4622      	mov	r2, r4
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb72:	f000 b817 	b.w	800bba4 <_kill_r>
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d00a      	beq.n	800bb90 <_raise_r+0x4c>
 800bb7a:	1c59      	adds	r1, r3, #1
 800bb7c:	d103      	bne.n	800bb86 <_raise_r+0x42>
 800bb7e:	2316      	movs	r3, #22
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	2001      	movs	r0, #1
 800bb84:	e7e7      	b.n	800bb56 <_raise_r+0x12>
 800bb86:	2100      	movs	r1, #0
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb8e:	4798      	blx	r3
 800bb90:	2000      	movs	r0, #0
 800bb92:	e7e0      	b.n	800bb56 <_raise_r+0x12>

0800bb94 <raise>:
 800bb94:	4b02      	ldr	r3, [pc, #8]	@ (800bba0 <raise+0xc>)
 800bb96:	4601      	mov	r1, r0
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	f7ff bfd3 	b.w	800bb44 <_raise_r>
 800bb9e:	bf00      	nop
 800bba0:	20000020 	.word	0x20000020

0800bba4 <_kill_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	2300      	movs	r3, #0
 800bba8:	4d06      	ldr	r5, [pc, #24]	@ (800bbc4 <_kill_r+0x20>)
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	f7f6 ff77 	bl	8002aa4 <_kill>
 800bbb6:	1c43      	adds	r3, r0, #1
 800bbb8:	d102      	bne.n	800bbc0 <_kill_r+0x1c>
 800bbba:	682b      	ldr	r3, [r5, #0]
 800bbbc:	b103      	cbz	r3, 800bbc0 <_kill_r+0x1c>
 800bbbe:	6023      	str	r3, [r4, #0]
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000ab4 	.word	0x20000ab4

0800bbc8 <_getpid_r>:
 800bbc8:	f7f6 bf64 	b.w	8002a94 <_getpid>

0800bbcc <__swhatbuf_r>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	460c      	mov	r4, r1
 800bbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd4:	b096      	sub	sp, #88	@ 0x58
 800bbd6:	4615      	mov	r5, r2
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	461e      	mov	r6, r3
 800bbdc:	da0c      	bge.n	800bbf8 <__swhatbuf_r+0x2c>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbe6:	bf14      	ite	ne
 800bbe8:	2340      	movne	r3, #64	@ 0x40
 800bbea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bbee:	2000      	movs	r0, #0
 800bbf0:	6031      	str	r1, [r6, #0]
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	b016      	add	sp, #88	@ 0x58
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	466a      	mov	r2, sp
 800bbfa:	f000 f849 	bl	800bc90 <_fstat_r>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	dbed      	blt.n	800bbde <__swhatbuf_r+0x12>
 800bc02:	9901      	ldr	r1, [sp, #4]
 800bc04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc0c:	4259      	negs	r1, r3
 800bc0e:	4159      	adcs	r1, r3
 800bc10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc14:	e7eb      	b.n	800bbee <__swhatbuf_r+0x22>

0800bc16 <__smakebuf_r>:
 800bc16:	898b      	ldrh	r3, [r1, #12]
 800bc18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc1a:	079d      	lsls	r5, r3, #30
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	d507      	bpl.n	800bc32 <__smakebuf_r+0x1c>
 800bc22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	6123      	str	r3, [r4, #16]
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	6163      	str	r3, [r4, #20]
 800bc2e:	b003      	add	sp, #12
 800bc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc32:	ab01      	add	r3, sp, #4
 800bc34:	466a      	mov	r2, sp
 800bc36:	f7ff ffc9 	bl	800bbcc <__swhatbuf_r>
 800bc3a:	9f00      	ldr	r7, [sp, #0]
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	f7fe feb9 	bl	800a9b8 <_malloc_r>
 800bc46:	b948      	cbnz	r0, 800bc5c <__smakebuf_r+0x46>
 800bc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d4ee      	bmi.n	800bc2e <__smakebuf_r+0x18>
 800bc50:	f023 0303 	bic.w	r3, r3, #3
 800bc54:	f043 0302 	orr.w	r3, r3, #2
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7e2      	b.n	800bc22 <__smakebuf_r+0xc>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc6c:	b15b      	cbz	r3, 800bc86 <__smakebuf_r+0x70>
 800bc6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc72:	4630      	mov	r0, r6
 800bc74:	f000 f81e 	bl	800bcb4 <_isatty_r>
 800bc78:	b128      	cbz	r0, 800bc86 <__smakebuf_r+0x70>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f023 0303 	bic.w	r3, r3, #3
 800bc80:	f043 0301 	orr.w	r3, r3, #1
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	431d      	orrs	r5, r3
 800bc8a:	81a5      	strh	r5, [r4, #12]
 800bc8c:	e7cf      	b.n	800bc2e <__smakebuf_r+0x18>
	...

0800bc90 <_fstat_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	2300      	movs	r3, #0
 800bc94:	4d06      	ldr	r5, [pc, #24]	@ (800bcb0 <_fstat_r+0x20>)
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	f7f6 ff61 	bl	8002b64 <_fstat>
 800bca2:	1c43      	adds	r3, r0, #1
 800bca4:	d102      	bne.n	800bcac <_fstat_r+0x1c>
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	b103      	cbz	r3, 800bcac <_fstat_r+0x1c>
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	bd38      	pop	{r3, r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	20000ab4 	.word	0x20000ab4

0800bcb4 <_isatty_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	4d05      	ldr	r5, [pc, #20]	@ (800bcd0 <_isatty_r+0x1c>)
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	f7f6 ff60 	bl	8002b84 <_isatty>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_isatty_r+0x1a>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_isatty_r+0x1a>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	20000ab4 	.word	0x20000ab4

0800bcd4 <_init>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr

0800bce0 <_fini>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	bf00      	nop
 800bce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce6:	bc08      	pop	{r3}
 800bce8:	469e      	mov	lr, r3
 800bcea:	4770      	bx	lr
